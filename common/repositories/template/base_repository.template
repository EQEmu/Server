/**
 * DO NOT MODIFY THIS FILE
 *
 * This repository was automatically generated and is NOT to be modified directly.
 * Any repository modifications are meant to be made to the repository extending the base.
 * Any modifications to base repositories are to be made by the generator only
 *
 * @generator ./utils/scripts/generators/repository-generator.pl
 * @docs https://eqemu.gitbook.io/server/in-development/developer-area/repositories
 */

#ifndef EQEMU_BASE_{{TABLE_NAME_UPPER}}_REPOSITORY_H
#define EQEMU_BASE_{{TABLE_NAME_UPPER}}_REPOSITORY_H

#include "../../database.h"
#include "../../string_util.h"

class Base{{TABLE_NAME_CLASS}}Repository {
public:
	struct {{TABLE_NAME_STRUCT}} {
{{TABLE_STRUCT_COLUMNS}}
	};

	static std::string PrimaryKey()
	{
		return std::string("{{PRIMARY_KEY_STRING}}");
	}

	static std::vector<std::string> Columns()
	{
		return {
{{COLUMNS_LIST_QUOTED}}
		};
	}

	static std::string ColumnsRaw()
	{
		return std::string(implode(", ", Columns()));
	}

	static std::string TableName()
	{
		return std::string("{{TABLE_NAME_VAR}}");
	}

	static std::string BaseSelect()
	{
		return fmt::format(
			"SELECT {} FROM {}",
			ColumnsRaw(),
			TableName()
		);
	}

	static std::string BaseInsert()
	{
		return fmt::format(
			"INSERT INTO {} ({}) ",
			TableName(),
			ColumnsRaw()
		);
	}

	static {{TABLE_NAME_STRUCT}} NewEntity()
	{
		{{TABLE_NAME_STRUCT}} entry{};

{{DEFAULT_ENTRIES}}

		return entry;
	}

	static {{TABLE_NAME_STRUCT}} Get{{TABLE_NAME_STRUCT}}Entry(
		const std::vector<{{TABLE_NAME_STRUCT}}> &{{TABLE_NAME_VAR}}s,
		int {{TABLE_NAME_VAR}}_id
	)
	{
		for (auto &{{TABLE_NAME_VAR}} : {{TABLE_NAME_VAR}}s) {
			if ({{TABLE_NAME_VAR}}.{{PRIMARY_KEY_STRING}} == {{TABLE_NAME_VAR}}_id) {
				return {{TABLE_NAME_VAR}};
			}
		}

		return NewEntity();
	}

	static {{TABLE_NAME_STRUCT}} FindOne(
		Database& db,
		int {{TABLE_NAME_VAR}}_id
	)
	{
		auto results = db.QueryDatabase(
			fmt::format(
				"{} WHERE id = {} LIMIT 1",
				BaseSelect(),
				{{TABLE_NAME_VAR}}_id
			)
		);

		auto row = results.begin();
		if (results.RowCount() == 1) {
			{{TABLE_NAME_STRUCT}} entry{};

{{FIND_ONE_ENTRIES}}
			return entry;
		}

		return NewEntity();
	}

	static int DeleteOne(
		Database& db,
		int {{TABLE_NAME_VAR}}_id
	)
	{
		auto results = db.QueryDatabase(
			fmt::format(
				"DELETE FROM {} WHERE {} = {}",
				TableName(),
				PrimaryKey(),
				{{TABLE_NAME_VAR}}_id
			)
		);

		return (results.Success() ? results.RowsAffected() : 0);
	}

	static int UpdateOne(
		Database& db,
		{{TABLE_NAME_STRUCT}} {{TABLE_NAME_VAR}}_entry
	)
	{
		std::vector<std::string> update_values;

		auto columns = Columns();

{{UPDATE_ONE_ENTRIES}}

		auto results = db.QueryDatabase(
			fmt::format(
				"UPDATE {} SET {} WHERE {} = {}",
				TableName(),
				implode(", ", update_values),
				PrimaryKey(),
				{{TABLE_NAME_VAR}}_entry.{{PRIMARY_KEY_STRING}}
			)
		);

		return (results.Success() ? results.RowsAffected() : 0);
	}

	static {{TABLE_NAME_STRUCT}} InsertOne(
		Database& db,
		{{TABLE_NAME_STRUCT}} {{TABLE_NAME_VAR}}_entry
	)
	{
		std::vector<std::string> insert_values;

{{INSERT_ONE_ENTRIES}}

		auto results = db.QueryDatabase(
			fmt::format(
				"{} VALUES ({})",
				BaseInsert(),
				implode(",", insert_values)
			)
		);

		if (results.Success()) {
			{{TABLE_NAME_VAR}}_entry.{{PRIMARY_KEY_STRING}} = results.LastInsertedID();
			return {{TABLE_NAME_VAR}}_entry;
		}

		{{TABLE_NAME_VAR}}_entry = NewEntity();

		return {{TABLE_NAME_VAR}}_entry;
	}

	static int InsertMany(
		Database& db,
		std::vector<{{TABLE_NAME_STRUCT}}> {{TABLE_NAME_VAR}}_entries
	)
	{
		std::vector<std::string> insert_chunks;

		for (auto &{{TABLE_NAME_VAR}}_entry: {{TABLE_NAME_VAR}}_entries) {
			std::vector<std::string> insert_values;

{{INSERT_MANY_ENTRIES}}

			insert_chunks.push_back("(" + implode(",", insert_values) + ")");
		}

		std::vector<std::string> insert_values;

		auto results = db.QueryDatabase(
			fmt::format(
				"{} VALUES {}",
				BaseInsert(),
				implode(",", insert_chunks)
			)
		);

		return (results.Success() ? results.RowsAffected() : 0);
	}

	static std::vector<{{TABLE_NAME_STRUCT}}> All(Database& db)
	{
		std::vector<{{TABLE_NAME_STRUCT}}> all_entries;

		auto results = db.QueryDatabase(
			fmt::format(
				"{}",
				BaseSelect()
			)
		);

		all_entries.reserve(results.RowCount());

		for (auto row = results.begin(); row != results.end(); ++row) {
			{{TABLE_NAME_STRUCT}} entry{};

{{ALL_ENTRIES}}

			all_entries.push_back(entry);
		}

		return all_entries;
	}

	static std::vector<{{TABLE_NAME_STRUCT}}> GetWhere(Database& db, std::string where_filter)
	{
		std::vector<{{TABLE_NAME_STRUCT}}> all_entries;

		auto results = db.QueryDatabase(
			fmt::format(
				"{} WHERE {}",
				BaseSelect(),
				where_filter
			)
		);

		all_entries.reserve(results.RowCount());

		for (auto row = results.begin(); row != results.end(); ++row) {
			{{TABLE_NAME_STRUCT}} entry{};

{{ALL_ENTRIES}}

			all_entries.push_back(entry);
		}

		return all_entries;
	}

	static int DeleteWhere(Database& db, std::string where_filter)
	{
		auto results = db.QueryDatabase(
			fmt::format(
				"DELETE FROM {} WHERE {}",
				TableName(),
				where_filter
			)
		);

		return (results.Success() ? results.RowsAffected() : 0);
	}

	static int Truncate(Database& db)
	{
		auto results = db.QueryDatabase(
			fmt::format(
				"TRUNCATE TABLE {}",
				TableName()
			)
		);

		return (results.Success() ? results.RowsAffected() : 0);
	}

};

#endif //EQEMU_BASE_{{TABLE_NAME_UPPER}}_REPOSITORY_H

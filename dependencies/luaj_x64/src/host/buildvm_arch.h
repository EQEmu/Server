/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM x64 version 1.3.0
** DO NOT EDIT! The original file is in "vm_x86.dasc".
*/

#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif

#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[14200] = {
  254,1,248,10,252,247,198,237,15,132,244,11,131,230,252,248,41,252,242,72,
  141,76,49,252,248,139,114,252,252,199,68,10,4,237,248,12,131,192,1,15,132,
  244,13,137,68,36,84,252,247,198,237,15,132,244,14,248,15,129,252,246,239,
  252,247,198,237,15,133,244,10,199,131,233,237,131,230,252,248,41,214,252,
  247,222,131,232,1,15,132,244,248,248,1,255,72,139,44,10,72,137,106,252,248,
  131,194,8,131,232,1,15,133,244,1,248,2,139,108,36,96,137,181,233,248,3,139,
  68,36,84,139,76,36,88,248,4,57,193,15,133,244,252,248,5,131,252,234,8,137,
  149,233,248,16,72,139,76,36,104,72,137,141,233,49,192,248,17,72,131,196,40,
  91,94,95,93,195,248,6,15,130,244,253,59,149,233,15,135,244,254,199,66,252,
  252,237,255,131,194,8,131,192,1,252,233,244,4,248,7,133,201,15,132,244,5,
  41,193,141,20,202,252,233,244,5,248,8,137,149,233,137,68,36,84,137,202,137,
  252,233,232,251,1,0,139,149,233,252,233,244,3,248,13,176,235,252,233,244,
  18,248,19,137,208,72,137,204,248,18,139,108,36,96,139,173,233,199,133,233,
  237,255,252,233,244,17,248,20,248,21,72,129,225,239,72,137,204,248,22,139,
  108,36,96,72,199,193,252,248,252,255,252,255,252,255,184,237,139,149,233,
  139,157,233,129,195,239,139,114,252,252,199,66,252,252,237,199,131,233,237,
  252,233,244,12,248,23,186,237,252,233,244,248,248,24,255,131,232,8,252,233,
  244,247,248,25,141,68,194,252,248,248,1,15,182,142,233,131,198,4,137,149,
  233,137,133,233,137,116,36,100,137,202,248,2,137,252,233,232,251,1,0,139,
  149,233,139,133,233,139,106,252,248,41,208,193,232,3,131,192,1,139,181,233,
  139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,252,235,248,26,85,87,
  86,83,72,131,252,236,40,137,205,137,76,36,96,137,209,190,237,49,192,72,141,
  188,253,36,233,139,157,233,129,195,239,72,137,189,233,137,68,36,100,72,137,
  68,36,104,137,68,36,88,137,68,36,92,56,133,233,15,132,244,249,255,199,131,
  233,237,136,133,233,139,149,233,139,133,233,41,200,193,232,3,131,192,1,41,
  209,139,114,252,252,137,68,36,84,252,247,198,237,15,132,244,14,252,233,244,
  15,248,27,85,87,86,83,72,131,252,236,40,190,237,68,137,76,36,92,252,233,244,
  247,248,28,85,87,86,83,72,131,252,236,40,190,237,248,1,68,137,68,36,88,137,
  205,137,76,36,96,137,209,72,139,189,233,72,137,124,36,104,137,108,36,100,
  72,137,165,233,248,2,255,139,157,233,129,195,239,248,3,199,131,233,237,139,
  149,233,1,206,41,214,139,133,233,41,200,193,232,3,131,192,1,248,29,139,105,
  252,248,129,121,253,252,252,239,15,133,244,30,248,31,137,202,137,114,252,
  252,139,181,233,139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,252,
  235,248,32,85,87,86,83,72,131,252,236,40,137,205,137,76,36,96,137,108,36,
  100,139,189,233,43,189,233,199,68,36,92,0,0,0,0,137,124,36,88,72,139,189,
  233,72,137,124,36,104,72,137,165,233,65,252,255,209,133,192,15,132,244,16,
  255,137,193,190,237,252,233,244,2,248,11,1,209,131,230,252,248,137,213,41,
  252,242,199,68,193,252,252,237,137,200,139,117,252,244,72,99,77,252,240,131,
  252,249,1,15,134,244,247,72,141,61,245,72,1,252,249,139,122,252,248,139,191,
  233,139,191,233,252,255,225,248,1,15,132,244,33,41,213,193,252,237,3,141,
  69,252,255,252,233,244,34,248,35,15,182,78,252,255,131,252,237,16,141,12,
  202,41,252,233,15,132,244,36,252,247,217,193,252,233,3,65,137,200,139,76,
  36,96,137,145,233,255,72,139,0,72,137,69,0,137,252,234,252,233,244,37,248,
  38,137,68,36,80,199,68,36,84,237,72,141,68,36,80,128,126,252,252,235,15,133,
  244,247,141,139,233,137,41,199,65,4,237,137,205,252,233,244,248,248,39,15,
  182,70,252,254,252,242,15,42,192,252,242,15,17,68,36,80,72,141,68,36,80,252,
  233,244,247,248,40,15,182,70,252,254,141,4,194,248,1,15,182,110,252,255,141,
  44,252,234,248,2,139,76,36,96,137,145,233,137,252,234,73,137,192,137,205,
  137,116,36,100,232,251,1,1,139,149,233,133,192,15,132,244,249,248,36,255,
  15,182,78,252,253,72,139,40,72,137,44,202,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,248,3,139,141,233,137,113,252,244,141,
  177,233,41,214,139,105,252,248,184,237,252,233,244,31,248,41,137,68,36,80,
  199,68,36,84,237,72,141,68,36,80,128,126,252,252,235,15,133,244,247,141,139,
  233,137,41,199,65,4,237,137,205,252,233,244,248,248,42,15,182,70,252,254,
  252,242,15,42,192,252,242,15,17,68,36,80,72,141,68,36,80,252,233,244,247,
  248,43,15,182,70,252,254,141,4,194,248,1,255,15,182,110,252,255,141,44,252,
  234,248,2,139,76,36,96,137,145,233,137,252,234,73,137,192,137,205,137,116,
  36,100,232,251,1,2,139,149,233,133,192,15,132,244,249,15,182,78,252,253,72,
  139,44,202,72,137,40,248,44,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,248,3,139,141,233,137,113,252,244,15,182,70,252,253,
  72,139,44,194,72,137,105,16,141,177,233,41,214,139,105,252,248,184,237,252,
  233,244,31,248,45,139,108,36,96,137,149,233,68,141,4,194,141,20,202,137,252,
  233,68,15,182,78,252,252,137,116,36,100,232,251,1,3,248,3,139,149,233,131,
  252,248,1,15,135,244,46,248,4,141,118,4,15,130,244,252,248,5,255,15,183,70,
  252,254,141,180,253,134,233,248,6,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,248,47,131,198,4,129,120,253,4,239,15,130,244,5,
  252,233,244,6,248,48,129,120,253,4,239,252,233,244,4,248,49,131,252,238,4,
  65,137,192,65,137,252,233,139,108,36,96,137,149,233,137,202,137,252,233,137,
  116,36,100,232,251,1,4,252,233,244,3,248,50,131,252,238,4,139,108,36,96,137,
  149,233,137,252,233,139,86,252,252,137,116,36,100,232,251,1,5,252,233,244,
  3,248,51,248,52,255,141,4,199,252,233,244,247,248,53,248,54,141,4,199,141,
  44,252,234,149,252,233,244,248,248,55,141,4,194,137,197,252,233,244,248,248,
  56,248,57,141,4,194,248,1,141,44,252,234,248,2,141,12,202,65,137,232,65,137,
  193,15,182,70,252,252,137,68,36,32,139,108,36,96,137,149,233,137,202,137,
  252,233,137,116,36,100,232,251,1,6,139,149,233,133,192,15,132,244,44,248,
  46,137,193,41,208,137,113,252,244,141,176,233,184,237,255,252,233,244,29,
  248,58,139,108,36,96,137,149,233,141,20,194,137,252,233,137,116,36,100,232,
  251,1,7,139,149,233,255,133,192,15,133,244,46,15,183,70,252,254,139,12,194,
  252,233,244,59,255,252,233,244,46,255,248,60,141,76,202,8,248,30,137,76,36,
  84,137,68,36,80,131,252,233,8,139,108,36,96,137,149,233,137,202,68,141,4,
  193,137,252,233,137,116,36,100,232,251,1,8,139,149,233,139,76,36,84,139,68,
  36,80,139,105,252,248,131,192,1,57,215,15,132,244,61,137,202,137,114,252,
  252,139,181,233,139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,252,
  235,248,62,139,108,36,96,137,149,233,137,202,137,252,233,137,116,36,100,232,
  251,1,9,139,149,233,139,70,252,252,15,182,204,15,182,232,193,232,16,252,255,
  164,253,252,235,233,248,63,129,252,248,239,15,130,244,64,139,106,4,129,252,
  253,239,15,131,244,64,139,114,252,252,137,68,36,84,137,106,252,252,139,42,
  137,106,252,248,131,232,2,15,132,244,248,255,137,209,248,1,131,193,8,72,139,
  41,72,137,105,252,248,131,232,1,15,133,244,1,248,2,139,68,36,84,252,233,244,
  65,248,66,129,252,248,239,15,130,244,64,139,106,4,137,252,233,193,252,249,
  15,131,252,249,252,254,15,132,244,249,184,237,252,247,213,57,232,15,71,197,
  248,2,139,106,252,248,139,132,253,197,233,139,114,252,252,199,66,252,252,
  237,137,66,252,248,252,233,244,67,248,3,184,237,255,252,233,244,2,248,68,
  129,252,248,239,15,130,244,64,139,106,4,139,114,252,252,129,252,253,239,15,
  133,244,252,248,1,139,42,139,173,233,248,2,133,252,237,199,66,252,252,237,
  15,132,244,67,139,131,233,199,66,252,252,237,137,106,252,248,139,141,233,
  35,136,233,105,201,239,255,3,141,233,248,3,129,185,233,239,15,133,244,250,
  57,129,233,15,132,244,251,248,4,139,137,233,133,201,15,133,244,3,252,233,
  244,67,248,5,139,105,4,129,252,253,239,15,132,244,67,139,1,137,106,252,252,
  137,66,252,248,252,233,244,67,248,6,255,129,252,253,239,15,132,244,1,129,
  252,253,239,15,135,244,254,129,252,253,239,15,134,244,253,189,237,252,233,
  244,254,248,7,189,237,248,8,252,247,213,139,172,253,171,233,252,233,244,2,
  248,69,129,252,248,239,255,15,130,244,64,129,122,253,4,239,15,133,244,64,
  139,42,131,189,233,0,15,133,244,64,129,122,253,12,239,15,133,244,64,139,66,
  8,137,133,233,139,114,252,252,199,66,252,252,237,137,106,252,248,252,246,
  133,233,235,15,132,244,247,128,165,233,235,139,131,233,255,137,171,233,137,
  133,233,248,1,252,233,244,67,248,70,129,252,248,239,15,130,244,64,129,122,
  253,4,239,15,133,244,64,137,213,68,141,66,8,139,18,139,76,36,96,232,251,1,
  10,137,252,234,72,139,40,139,114,252,252,72,137,106,252,248,252,233,244,67,
  248,71,129,252,248,239,15,133,244,64,129,122,253,4,239,15,131,244,64,255,
  252,242,15,16,2,252,233,244,72,248,73,129,252,248,239,15,130,244,64,139,114,
  252,252,129,122,253,4,239,15,133,244,249,139,2,248,2,199,66,252,252,237,137,
  66,252,248,252,233,244,67,248,3,129,122,253,4,239,15,135,244,64,131,187,233,
  0,15,133,244,64,255,139,171,233,59,171,233,15,130,244,247,232,244,74,248,
  1,139,108,36,96,137,149,233,137,116,36,100,137,252,233,232,251,1,11,139,149,
  233,252,233,244,2,248,75,129,252,248,239,15,130,244,64,15,132,244,248,248,
  1,129,122,253,4,239,15,133,244,64,255,139,108,36,96,137,149,233,137,149,233,
  139,114,252,252,68,141,66,8,139,18,137,252,233,137,116,36,100,232,251,1,12,
  139,149,233,133,192,15,132,244,249,72,139,106,8,72,139,66,16,72,137,106,252,
  248,72,137,2,248,76,184,237,252,233,244,77,248,2,199,66,12,237,252,233,244,
  1,248,3,199,66,252,252,237,252,233,244,67,248,78,129,252,248,239,15,130,244,
  64,255,139,42,129,122,253,4,239,15,133,244,64,255,131,189,233,0,15,133,244,
  64,255,139,106,252,248,139,133,233,139,114,252,252,199,66,252,252,237,137,
  66,252,248,199,66,12,237,184,237,252,233,244,77,248,79,129,252,248,239,15,
  130,244,64,129,122,253,4,239,15,133,244,64,129,122,253,12,239,15,131,244,
  64,139,114,252,252,252,242,15,16,66,8,72,189,237,237,102,72,15,110,205,252,
  242,15,88,193,252,242,15,45,192,252,242,15,17,66,252,248,139,42,59,133,233,
  15,131,244,248,255,193,224,3,3,133,233,248,1,129,120,253,4,239,15,132,244,
  80,72,139,40,72,137,42,252,233,244,76,248,2,131,189,233,0,15,132,244,80,137,
  252,233,137,213,137,194,232,251,1,13,137,252,234,133,192,15,133,244,1,248,
  80,184,237,252,233,244,77,248,81,129,252,248,239,15,130,244,64,255,139,106,
  252,248,139,133,233,139,114,252,252,199,66,252,252,237,137,66,252,248,15,
  87,192,252,242,15,17,66,8,184,237,252,233,244,77,248,82,129,252,248,239,15,
  130,244,64,141,74,8,131,232,1,190,237,248,1,15,182,171,233,193,252,237,235,
  131,229,1,1,252,238,252,233,244,29,248,83,129,252,248,239,15,130,244,64,129,
  122,253,12,239,255,15,133,244,64,139,106,4,137,106,12,199,66,4,237,139,42,
  139,114,8,137,106,8,137,50,141,74,16,131,232,2,190,237,252,233,244,1,248,
  84,129,252,248,239,15,130,244,64,139,42,139,114,252,252,137,116,36,100,137,
  108,36,80,129,122,253,4,239,15,133,244,64,72,131,189,233,0,15,133,244,64,
  128,189,233,235,15,135,244,64,255,139,141,233,15,132,244,247,59,141,233,15,
  132,244,64,248,1,141,116,193,252,240,59,181,233,15,135,244,64,137,181,233,
  139,108,36,96,137,149,233,131,194,8,137,149,233,141,108,194,232,72,41,252,
  245,57,206,15,132,244,249,248,2,72,139,4,46,72,137,70,252,248,131,252,238,
  8,57,206,15,133,244,2,248,3,137,202,139,76,36,80,232,244,26,255,199,131,233,
  237,139,108,36,96,139,116,36,80,139,149,233,129,252,248,239,15,135,244,254,
  248,4,139,142,233,139,190,233,137,142,233,137,252,254,41,206,15,132,244,252,
  141,4,50,193,252,238,3,59,133,233,15,135,244,255,137,213,72,41,205,248,5,
  72,139,1,72,137,4,41,131,193,8,57,252,249,15,133,244,5,248,6,141,70,2,199,
  66,252,252,237,248,7,255,139,116,36,100,137,68,36,84,72,199,193,252,248,252,
  255,252,255,252,255,252,247,198,237,15,132,244,14,252,233,244,15,248,8,199,
  66,252,252,237,139,142,233,131,252,233,8,137,142,233,72,139,1,72,137,2,184,
  237,252,233,244,7,248,9,139,76,36,80,137,185,233,137,252,242,137,252,233,
  232,251,1,0,139,116,36,80,139,149,233,252,233,244,4,248,85,139,106,252,248,
  139,173,233,139,114,252,252,137,116,36,100,137,108,36,80,72,131,189,233,0,
  255,15,133,244,64,128,189,233,235,15,135,244,64,139,141,233,15,132,244,247,
  59,141,233,15,132,244,64,248,1,141,116,193,252,248,59,181,233,15,135,244,
  64,137,181,233,139,108,36,96,137,149,233,137,149,233,141,108,194,252,240,
  72,41,252,245,57,206,15,132,244,249,248,2,255,72,139,4,46,72,137,70,252,248,
  131,252,238,8,57,206,15,133,244,2,248,3,137,202,139,76,36,80,232,244,26,199,
  131,233,237,139,108,36,96,139,116,36,80,139,149,233,129,252,248,239,15,135,
  244,254,248,4,139,142,233,139,190,233,137,142,233,137,252,254,41,206,15,132,
  244,252,141,4,50,193,252,238,3,59,133,233,15,135,244,255,255,137,213,72,41,
  205,248,5,72,139,1,72,137,4,41,131,193,8,57,252,249,15,133,244,5,248,6,141,
  70,1,248,7,139,116,36,100,137,68,36,84,49,201,252,247,198,237,15,132,244,
  14,252,233,244,15,248,8,137,252,242,137,252,233,232,251,1,14,248,9,139,76,
  36,80,137,185,233,137,252,242,137,252,233,232,251,1,0,139,116,36,80,139,149,
  233,252,233,244,4,248,86,139,108,36,96,72,252,247,133,233,237,15,132,244,
  64,255,137,149,233,141,68,194,252,248,137,133,233,49,192,72,137,133,233,176,
  235,136,133,233,252,233,244,17,248,87,248,88,139,114,252,252,221,90,252,248,
  252,233,244,67,248,89,129,252,248,239,15,130,244,64,129,122,253,4,239,15,
  131,244,64,252,242,15,16,2,72,184,237,237,255,102,72,15,110,200,15,84,193,
  248,72,139,114,252,252,252,242,15,17,66,252,248,248,67,184,237,248,77,137,
  68,36,84,248,65,252,247,198,237,15,133,244,253,248,5,56,70,252,255,15,135,
  244,252,15,182,78,252,253,72,252,247,209,141,20,202,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,248,6,199,68,194,252,244,237,
  131,192,1,252,233,244,5,248,7,72,199,193,252,248,252,255,252,255,252,255,
  252,233,244,15,248,90,129,122,253,4,239,255,15,131,244,64,252,242,15,16,2,
  232,244,91,252,233,244,72,248,92,129,122,253,4,239,15,131,244,64,252,242,
  15,16,2,232,244,93,252,233,244,72,248,94,129,252,248,239,15,130,244,64,129,
  122,253,4,239,15,131,244,64,255,252,242,15,81,2,252,233,244,72,248,95,129,
  252,248,239,15,133,244,64,129,122,253,4,239,15,131,244,64,217,252,237,221,
  2,217,252,241,252,233,244,88,248,96,129,252,248,239,15,130,244,64,129,122,
  253,4,239,15,131,244,64,217,252,236,221,2,217,252,241,252,233,244,88,248,
  97,255,129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,221,
  2,232,244,98,252,233,244,88,248,99,129,252,248,239,15,130,244,64,129,122,
  253,4,239,15,131,244,64,221,2,217,252,254,252,233,244,88,248,100,255,129,
  252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,221,2,217,252,255,
  252,233,244,88,248,101,129,252,248,239,15,130,244,64,129,122,253,4,239,15,
  131,244,64,221,2,217,252,242,221,216,252,233,244,88,248,102,129,252,248,239,
  15,130,244,64,255,129,122,253,4,239,15,131,244,64,221,2,217,192,216,200,217,
  232,222,225,217,252,250,217,252,243,252,233,244,88,248,103,129,252,248,239,
  15,130,244,64,129,122,253,4,239,15,131,244,64,221,2,217,192,216,200,217,232,
  222,225,217,252,250,217,201,217,252,243,252,233,244,88,248,104,129,252,248,
  239,15,130,244,64,129,122,253,4,239,15,131,244,64,255,221,2,217,232,217,252,
  243,252,233,244,88,248,105,129,252,248,239,15,130,244,64,129,122,253,4,239,
  15,131,244,64,252,242,15,16,2,137,213,232,251,1,15,137,252,234,252,233,244,
  72,248,106,129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,
  252,242,15,16,2,137,213,232,251,1,16,137,252,234,252,233,244,72,248,107,255,
  129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,252,242,15,
  16,2,137,213,232,251,1,17,137,252,234,252,233,244,72,248,108,248,109,129,
  252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,252,242,15,16,2,
  139,106,252,248,252,242,15,89,133,233,252,233,244,72,248,110,255,129,252,
  248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,129,122,253,12,239,
  15,131,244,64,221,2,221,66,8,217,252,243,252,233,244,88,248,111,129,252,248,
  239,15,130,244,64,129,122,253,4,239,15,131,244,64,129,122,253,12,239,15,131,
  244,64,255,221,66,8,221,2,217,252,253,221,217,252,233,244,88,248,112,129,
  252,248,239,15,130,244,64,139,106,4,129,252,253,239,15,131,244,64,139,114,
  252,252,139,2,137,106,252,252,137,66,252,248,209,229,129,252,253,0,0,224,
  252,255,15,131,244,249,9,232,15,132,244,249,184,252,254,3,0,0,129,252,253,
  0,0,32,0,15,130,244,250,248,1,193,252,237,21,41,197,252,242,15,42,197,139,
  106,252,252,129,229,252,255,252,255,15,128,129,205,0,0,224,63,137,106,252,
  252,248,2,252,242,15,17,2,184,237,252,233,244,77,248,3,255,15,87,192,252,
  233,244,2,248,4,252,242,15,16,2,72,189,237,237,102,72,15,110,205,252,242,
  15,89,193,252,242,15,17,66,252,248,139,106,252,252,184,52,4,0,0,209,229,252,
  233,244,1,248,113,129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,
  244,64,252,242,15,16,2,139,106,4,139,114,252,252,209,229,129,252,253,0,0,
  224,252,255,15,132,244,250,15,40,224,232,244,114,252,242,15,92,224,248,1,
  252,242,15,17,66,252,248,252,242,15,17,34,139,66,252,252,139,106,4,49,232,
  15,136,244,249,248,2,255,184,237,252,233,244,77,248,3,129,252,245,0,0,0,128,
  137,106,4,252,233,244,2,248,4,15,87,228,252,233,244,1,248,115,129,252,248,
  239,15,130,244,64,129,122,253,4,239,15,131,244,64,129,122,253,12,239,15,131,
  244,64,221,66,8,221,2,248,1,255,217,252,248,223,224,158,15,138,244,1,221,
  217,252,233,244,88,248,116,129,252,248,239,15,130,244,64,129,122,253,4,239,
  15,131,244,64,129,122,253,12,239,15,131,244,64,252,242,15,16,2,252,242,15,
  16,74,8,232,244,117,252,233,244,72,248,118,185,2,0,0,0,129,122,253,4,239,
  255,15,131,244,64,252,242,15,16,2,248,5,57,193,15,131,244,72,129,124,253,
  202,252,252,239,15,131,244,64,248,6,252,242,15,16,76,202,252,248,248,7,252,
  242,15,93,193,131,193,1,252,233,244,5,248,119,185,2,0,0,0,129,122,253,4,239,
  15,131,244,64,252,242,15,16,2,248,5,57,193,15,131,244,72,129,124,253,202,
  252,252,239,255,15,131,244,64,248,6,252,242,15,16,76,202,252,248,248,7,252,
  242,15,95,193,131,193,1,252,233,244,5,248,120,129,252,248,239,15,130,244,
  64,129,122,253,4,239,15,133,244,64,139,42,252,242,15,42,133,233,252,233,244,
  72,248,121,129,252,248,239,15,133,244,64,255,129,122,253,4,239,15,133,244,
  64,139,42,139,114,252,252,131,189,233,1,15,130,244,80,15,182,173,233,252,
  242,15,42,197,252,233,244,72,248,122,139,171,233,59,171,233,15,130,244,247,
  232,244,74,248,1,129,252,248,239,15,133,244,64,255,129,122,253,4,239,15,131,
  244,64,252,242,15,44,42,129,252,253,252,255,0,0,0,15,135,244,64,137,108,36,
  84,199,68,36,32,1,0,0,0,72,141,68,36,84,248,123,139,108,36,96,137,149,233,
  68,139,68,36,32,72,137,194,137,252,233,137,116,36,100,232,251,1,18,139,149,
  233,139,114,252,252,199,66,252,252,237,137,66,252,248,252,233,244,67,248,
  124,139,171,233,59,171,233,15,130,244,247,232,244,74,248,1,199,68,36,84,252,
  255,252,255,252,255,252,255,129,252,248,239,255,15,130,244,64,15,134,244,
  247,129,122,253,20,239,15,131,244,64,252,242,15,44,106,16,137,108,36,84,248,
  1,129,122,253,4,239,15,133,244,64,129,122,253,12,239,15,131,244,64,139,42,
  137,108,36,32,139,173,233,252,242,15,44,74,8,139,68,36,84,57,197,15,130,244,
  251,248,2,133,201,15,142,244,253,248,3,255,139,108,36,32,41,200,15,140,244,
  125,141,172,253,13,233,131,192,1,248,4,137,68,36,32,137,232,252,233,244,123,
  248,5,15,140,244,252,141,68,40,1,252,233,244,2,248,6,137,232,252,233,244,
  2,248,7,15,132,244,254,1,252,233,131,193,1,15,143,244,3,248,8,255,185,1,0,
  0,0,252,233,244,3,248,125,49,192,252,233,244,4,248,126,139,171,233,59,171,
  233,15,130,244,247,232,244,74,248,1,129,252,248,239,15,133,244,64,129,122,
  253,4,239,15,133,244,64,129,122,253,12,239,255,139,42,15,131,244,64,252,242,
  15,44,66,8,133,192,15,142,244,125,131,189,233,1,15,130,244,125,15,133,244,
  127,57,131,233,15,130,244,127,15,182,141,233,139,171,233,137,68,36,32,248,
  1,136,77,0,131,197,1,131,232,1,15,133,244,1,139,131,233,252,233,244,123,248,
  128,255,129,252,248,239,15,130,244,64,139,171,233,59,171,233,15,130,244,247,
  232,244,74,248,1,129,122,253,4,239,15,133,244,64,139,42,139,133,233,133,192,
  15,132,244,125,57,131,233,15,130,244,129,129,197,239,255,137,116,36,84,137,
  68,36,32,139,179,233,248,1,15,182,77,0,131,197,1,131,232,1,136,12,6,15,133,
  244,1,137,252,240,139,116,36,84,252,233,244,123,248,130,129,252,248,239,15,
  130,244,64,139,171,233,59,171,233,15,130,244,247,232,244,74,248,1,129,122,
  253,4,239,15,133,244,64,255,139,42,139,133,233,57,131,233,15,130,244,129,
  129,197,239,137,116,36,84,137,68,36,32,139,179,233,252,233,244,249,248,1,
  15,182,76,5,0,131,252,249,65,15,130,244,248,131,252,249,90,15,135,244,248,
  131,252,241,32,248,2,136,12,6,248,3,131,232,1,15,137,244,1,137,252,240,139,
  116,36,84,252,233,244,123,248,131,255,129,252,248,239,15,130,244,64,139,171,
  233,59,171,233,15,130,244,247,232,244,74,248,1,129,122,253,4,239,15,133,244,
  64,139,42,139,133,233,57,131,233,15,130,244,129,129,197,239,137,116,36,84,
  137,68,36,32,139,179,233,252,233,244,249,248,1,255,15,182,76,5,0,131,252,
  249,97,15,130,244,248,131,252,249,122,15,135,244,248,131,252,241,32,248,2,
  136,12,6,248,3,131,232,1,15,137,244,1,137,252,240,139,116,36,84,252,233,244,
  123,248,132,129,252,248,239,15,130,244,64,129,122,253,4,239,15,133,244,64,
  137,213,139,10,232,251,1,19,137,252,234,252,242,15,42,192,252,233,244,72,
  248,133,255,129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,
  252,242,15,16,2,72,189,237,237,102,72,15,110,205,252,242,15,88,193,102,15,
  126,197,248,2,252,233,244,134,248,135,129,252,248,239,15,130,244,64,72,189,
  237,237,102,72,15,110,205,129,122,253,4,239,15,131,244,64,255,252,242,15,
  16,2,252,242,15,88,193,102,15,126,197,248,2,137,68,36,84,141,68,194,252,240,
  248,1,57,208,15,134,244,134,129,120,253,4,239,15,131,244,136,252,242,15,16,
  0,252,242,15,88,193,102,15,126,193,33,205,131,232,8,252,233,244,1,248,137,
  129,252,248,239,15,130,244,64,72,189,237,237,102,72,15,110,205,129,122,253,
  4,239,15,131,244,64,252,242,15,16,2,252,242,15,88,193,102,15,126,197,248,
  2,137,68,36,84,141,68,194,252,240,248,1,255,57,208,15,134,244,134,129,120,
  253,4,239,15,131,244,136,252,242,15,16,0,252,242,15,88,193,102,15,126,193,
  9,205,131,232,8,252,233,244,1,248,138,129,252,248,239,15,130,244,64,72,189,
  237,237,102,72,15,110,205,129,122,253,4,239,15,131,244,64,252,242,15,16,2,
  252,242,15,88,193,102,15,126,197,248,2,137,68,36,84,141,68,194,252,240,248,
  1,57,208,15,134,244,134,255,129,120,253,4,239,15,131,244,136,252,242,15,16,
  0,252,242,15,88,193,102,15,126,193,49,205,131,232,8,252,233,244,1,248,139,
  129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,252,242,15,
  16,2,72,189,237,237,102,72,15,110,205,252,242,15,88,193,102,15,126,197,248,
  2,15,205,252,233,244,134,248,140,129,252,248,239,15,130,244,64,255,129,122,
  253,4,239,15,131,244,64,252,242,15,16,2,72,189,237,237,102,72,15,110,205,
  252,242,15,88,193,102,15,126,197,248,2,252,247,213,248,134,252,242,15,42,
  197,252,233,244,72,248,136,139,68,36,84,252,233,244,64,248,141,129,252,248,
  239,15,130,244,64,129,122,253,4,239,15,131,244,64,129,122,253,12,239,255,
  15,131,244,64,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,72,15,
  110,213,252,242,15,88,194,252,242,15,88,202,102,15,126,197,102,15,126,201,
  211,229,252,233,244,134,248,142,129,252,248,239,15,130,244,64,129,122,253,
  4,239,15,131,244,64,129,122,253,12,239,15,131,244,64,252,242,15,16,2,252,
  242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,242,
  15,88,202,102,15,126,197,102,15,126,201,211,252,237,252,233,244,134,248,143,
  255,129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,129,122,
  253,12,239,15,131,244,64,252,242,15,16,2,252,242,15,16,74,8,72,189,237,237,
  102,72,15,110,213,252,242,15,88,194,252,242,15,88,202,102,15,126,197,102,
  15,126,201,211,252,253,252,233,244,134,248,144,129,252,248,239,15,130,244,
  64,129,122,253,4,239,15,131,244,64,255,129,122,253,12,239,15,131,244,64,252,
  242,15,16,2,252,242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,
  88,194,252,242,15,88,202,102,15,126,197,102,15,126,201,211,197,252,233,244,
  134,248,145,129,252,248,239,15,130,244,64,129,122,253,4,239,15,131,244,64,
  129,122,253,12,239,15,131,244,64,252,242,15,16,2,252,242,15,16,74,8,72,189,
  237,237,102,72,15,110,213,252,242,15,88,194,252,242,15,88,202,102,15,126,
  197,102,15,126,201,211,205,252,233,244,134,248,127,255,184,237,252,233,244,
  64,248,129,184,237,248,64,139,108,36,96,139,114,252,252,137,116,36,100,137,
  149,233,141,68,194,252,248,141,136,233,137,133,233,139,66,252,248,59,141,
  233,15,135,244,251,137,252,233,252,255,144,233,139,149,233,133,192,15,143,
  244,77,248,1,139,141,233,41,209,193,252,233,3,133,192,141,65,1,139,106,252,
  248,15,133,244,34,255,139,181,233,139,14,15,182,252,233,15,182,205,131,198,
  4,252,255,36,252,235,248,34,137,209,252,247,198,237,15,133,244,249,15,182,
  110,252,253,72,252,247,213,141,20,252,234,252,233,244,29,248,3,137,252,245,
  131,229,252,248,41,252,234,252,233,244,29,248,5,186,237,137,252,233,232,251,
  1,0,139,149,233,49,192,252,233,244,1,248,74,93,72,137,108,36,32,139,108,36,
  96,137,116,36,100,137,149,233,141,68,194,252,248,137,252,233,137,133,233,
  232,251,1,20,139,149,233,139,133,233,255,41,208,193,232,3,131,192,1,72,139,
  108,36,32,85,195,248,146,15,182,131,233,168,235,15,133,244,251,168,235,15,
  133,244,247,168,235,15,132,244,247,252,255,139,233,252,233,244,247,248,147,
  15,182,131,233,168,235,15,133,244,251,252,233,244,247,248,148,255,15,182,
  131,233,168,235,15,133,244,251,168,235,15,132,244,251,252,255,139,233,15,
  132,244,247,168,235,15,132,244,251,248,1,139,108,36,96,137,149,233,137,252,
  242,137,252,233,232,251,1,21,248,3,139,149,233,248,4,15,182,78,252,253,248,
  5,15,182,110,252,252,15,183,70,252,254,252,255,164,253,252,235,233,248,149,
  255,131,198,4,139,77,232,137,76,36,84,252,233,244,4,248,150,139,106,252,248,
  139,173,233,15,182,133,233,141,4,194,139,108,36,96,137,149,233,137,133,233,
  137,252,242,141,139,233,72,137,171,233,137,116,36,100,232,251,1,22,252,233,
  244,3,248,151,137,116,36,100,252,233,244,247,248,152,137,116,36,100,131,206,
  1,248,1,141,68,194,252,248,139,108,36,96,137,149,233,137,133,233,137,252,
  242,137,252,233,232,251,1,23,199,68,36,100,0,0,0,0,131,230,252,254,139,149,
  233,72,137,193,139,133,233,255,41,208,72,137,205,15,182,78,252,253,193,232,
  3,131,192,1,252,255,229,248,153,65,85,65,84,65,83,65,82,65,81,65,80,87,86,
  85,72,141,108,36,88,85,83,82,81,80,15,182,69,252,248,138,101,252,240,76,137,
  125,252,248,76,137,117,252,240,139,93,0,139,139,233,199,131,233,237,137,131,
  233,137,139,233,72,129,252,236,239,72,131,197,128,252,242,68,15,17,125,252,
  248,252,242,68,15,17,117,252,240,252,242,68,15,17,109,232,252,242,68,15,17,
  101,224,252,242,68,15,17,93,216,252,242,68,15,17,85,208,252,242,68,15,17,
  77,200,252,242,68,15,17,69,192,252,242,15,17,125,184,252,242,15,17,117,176,
  252,242,15,17,109,168,252,242,15,17,101,160,252,242,15,17,93,152,252,242,
  15,17,85,144,252,242,15,17,77,136,252,242,15,17,69,128,139,171,233,139,147,
  233,72,137,171,233,199,131,233,0,0,0,0,137,149,233,72,141,148,253,36,233,
  141,139,233,232,251,1,24,72,139,141,233,72,129,225,239,137,169,233,139,149,
  233,139,177,233,252,233,244,247,248,154,255,72,141,140,253,36,233,248,1,102,
  68,15,111,185,233,102,68,15,111,177,233,102,68,15,111,169,233,102,68,15,111,
  161,233,102,68,15,111,153,233,102,68,15,111,145,233,102,68,15,111,137,233,
  102,68,15,111,129,233,102,15,111,185,233,72,137,204,102,15,111,49,76,139,
  124,36,16,76,139,116,36,24,76,139,108,36,32,76,139,100,36,80,133,192,15,136,
  244,249,137,68,36,84,139,122,252,248,139,191,233,139,191,233,199,131,233,
  0,0,0,0,199,131,233,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  129,252,253,239,15,130,244,248,255,139,68,36,84,248,2,252,255,36,252,235,
  248,3,252,247,216,137,252,233,137,194,232,251,1,25,248,91,248,155,72,184,
  237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,102,
  15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,
  242,15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,242,15,194,
  193,1,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,93,248,156,
  72,184,237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,
  102,15,84,202,102,15,46,217,15,134,244,247,255,102,15,85,208,252,242,15,88,
  203,252,242,15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,
  242,15,194,193,6,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,
  114,248,157,72,184,237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,
  216,15,40,200,102,15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,15,
  40,193,252,242,15,88,203,252,242,15,92,203,72,184,237,237,102,72,15,110,216,
  252,242,15,194,193,1,102,15,84,195,252,242,15,92,200,102,15,86,202,15,40,
  193,248,1,195,248,158,15,40,232,252,242,15,94,193,72,184,237,237,102,72,15,
  110,208,72,184,237,237,102,72,15,110,216,15,40,224,102,15,84,226,102,15,46,
  220,15,134,244,247,255,102,15,85,208,252,242,15,88,227,252,242,15,92,227,
  102,15,86,226,72,184,237,237,102,72,15,110,208,252,242,15,194,196,1,102,15,
  84,194,252,242,15,92,224,15,40,197,252,242,15,89,204,252,242,15,92,193,195,
  248,1,252,242,15,89,200,15,40,197,252,242,15,92,193,195,248,159,252,242,15,
  17,68,36,8,217,232,221,68,36,8,217,252,241,221,92,36,8,252,242,15,16,68,36,
  8,195,248,98,217,252,234,222,201,248,160,217,84,36,8,129,124,36,8,0,0,128,
  127,15,132,244,247,129,124,36,8,0,0,128,252,255,15,132,244,248,248,161,217,
  192,217,252,252,220,252,233,217,201,217,252,240,217,232,222,193,217,252,253,
  221,217,248,1,195,248,2,221,216,217,252,238,195,248,117,248,162,252,242,15,
  45,193,252,242,15,42,208,102,15,46,202,15,133,244,254,15,138,244,255,248,
  163,255,131,252,248,1,15,142,244,252,248,1,169,1,0,0,0,15,133,244,248,252,
  242,15,89,192,209,232,252,233,244,1,248,2,209,232,15,132,244,251,15,40,200,
  248,3,252,242,15,89,192,209,232,15,132,244,250,15,131,244,3,252,242,15,89,
  200,252,233,244,3,248,4,252,242,15,89,193,248,5,195,248,6,255,15,132,244,
  5,15,130,244,253,252,247,216,232,244,1,72,184,237,237,102,72,15,110,200,252,
  242,15,94,200,15,40,193,195,248,7,72,184,237,237,102,72,15,110,192,195,248,
  8,102,72,15,126,200,72,209,224,72,193,192,12,72,61,252,254,15,0,0,15,132,
  244,248,102,72,15,126,192,72,209,224,15,132,244,250,72,193,192,12,72,61,252,
  254,15,0,0,15,132,244,251,252,242,15,17,76,36,16,252,242,15,17,68,36,8,221,
  68,36,16,221,68,36,8,217,252,241,217,192,217,252,252,220,252,233,217,201,
  217,252,240,217,232,222,193,217,252,253,221,217,221,92,36,8,252,242,15,16,
  68,36,8,195,248,9,72,184,237,237,255,102,72,15,110,208,102,15,46,194,15,132,
  244,247,15,40,193,248,1,195,248,2,72,184,237,237,102,72,15,110,208,102,15,
  84,194,72,184,237,237,102,72,15,110,208,102,15,46,194,15,132,244,1,102,15,
  80,193,15,87,192,136,196,15,146,208,48,224,15,133,244,1,248,3,72,184,237,
  237,102,72,15,110,192,195,248,4,102,15,80,193,133,192,15,133,244,3,15,87,
  192,195,248,5,102,15,80,193,133,192,15,132,244,3,255,15,87,192,195,248,164,
  131,252,250,1,15,130,244,91,15,132,244,93,131,252,250,3,15,130,244,114,15,
  135,244,248,252,242,15,81,192,195,248,2,252,242,15,17,68,36,8,221,68,36,8,
  131,252,250,5,15,135,244,248,88,15,132,244,247,232,244,98,80,252,233,244,
  253,248,1,232,244,160,255,80,252,233,244,253,248,2,131,252,250,7,15,132,244,
  247,15,135,244,248,217,252,237,217,201,217,252,241,252,233,244,253,248,1,
  217,232,217,201,217,252,241,252,233,244,253,248,2,131,252,250,9,15,132,244,
  247,15,135,244,248,217,252,236,217,201,217,252,241,252,233,244,253,248,1,
  255,217,252,254,252,233,244,253,248,2,131,252,250,11,15,132,244,247,15,135,
  244,255,217,252,255,252,233,244,253,248,1,217,252,242,221,216,248,7,221,92,
  36,8,252,242,15,16,68,36,8,195,248,9,204,248,165,65,131,252,248,1,15,132,
  244,247,15,135,244,248,252,242,15,88,193,195,248,1,252,242,15,92,193,195,
  248,2,65,131,252,248,3,15,132,244,247,255,15,135,244,248,252,242,15,89,193,
  195,248,1,252,242,15,94,193,195,248,2,65,131,252,248,5,15,130,244,158,15,
  132,244,117,65,131,252,248,7,15,132,244,247,15,135,244,248,72,184,237,237,
  102,72,15,110,200,15,87,193,195,248,1,72,184,237,237,102,72,15,110,200,15,
  84,193,195,248,2,65,131,252,248,9,15,135,244,248,255,252,242,15,17,68,36,
  8,252,242,15,17,76,36,16,221,68,36,8,221,68,36,16,15,132,244,247,217,252,
  243,248,7,221,92,36,8,252,242,15,16,68,36,8,195,248,1,217,201,217,252,253,
  221,217,252,233,244,7,248,2,65,131,252,248,11,15,132,244,247,15,135,244,255,
  252,242,15,93,193,195,248,1,252,242,15,95,193,195,248,9,204,248,166,137,200,
  86,72,137,214,83,15,162,137,6,137,94,4,137,78,8,137,86,12,91,94,195,248,167,
  255,204,255,204,248,168,87,86,83,72,131,252,236,40,141,157,233,139,181,233,
  15,183,192,137,134,233,72,137,142,233,72,137,150,233,76,137,134,233,76,137,
  142,233,252,242,15,17,134,233,252,242,15,17,142,233,252,242,15,17,150,233,
  252,242,15,17,158,233,72,141,132,253,36,233,72,137,134,233,72,137,226,137,
  116,36,100,137,252,241,232,251,1,26,199,131,233,237,139,144,233,139,128,233,
  41,208,139,106,252,248,193,232,3,131,192,1,139,181,233,139,14,15,182,252,
  233,15,182,205,131,198,4,252,255,36,252,235,248,33,255,139,76,36,96,139,179,
  233,72,137,142,233,137,145,233,137,169,233,137,252,241,137,194,232,251,1,
  27,72,139,134,233,252,242,15,16,134,233,252,233,244,17,248,169,85,72,137,
  229,83,72,137,203,139,131,233,72,41,196,15,182,139,233,131,252,233,1,15,136,
  244,248,248,1,72,139,132,253,203,233,72,137,132,253,204,233,131,252,233,1,
  15,137,244,1,248,2,15,182,131,233,255,72,139,139,233,72,139,147,233,76,139,
  131,233,76,139,139,233,133,192,15,132,244,251,15,40,131,233,15,40,139,233,
  15,40,147,233,15,40,155,233,248,5,252,255,147,233,72,137,131,233,15,41,131,
  233,72,139,93,252,248,201,195,255,129,124,253,202,4,239,15,131,244,45,129,
  124,253,194,4,239,15,131,244,45,248,1,252,242,15,16,4,194,248,2,131,198,4,
  102,15,46,4,202,248,3,255,15,135,244,247,255,15,130,244,247,255,15,131,244,
  247,255,15,183,70,252,254,141,180,253,134,233,248,1,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,255,139,108,194,4,131,198,4,255,
  129,252,253,239,15,131,244,251,129,124,253,202,4,239,15,131,244,251,248,1,
  252,242,15,16,4,202,248,2,102,15,46,4,194,248,4,255,15,138,244,248,15,133,
  244,248,255,15,138,244,248,15,132,244,247,255,248,1,15,183,70,252,254,141,
  180,253,134,233,248,2,255,248,2,15,183,70,252,254,141,180,253,134,233,248,
  1,255,252,233,244,9,255,248,5,129,252,253,239,15,132,244,50,129,124,253,202,
  4,239,15,132,244,50,57,108,202,4,15,133,244,2,129,252,253,239,15,131,244,
  1,139,12,202,139,4,194,57,193,15,132,244,1,129,252,253,239,15,135,244,2,129,
  252,253,239,15,130,244,2,255,139,169,233,133,252,237,15,132,244,2,252,246,
  133,233,235,15,133,244,2,255,49,252,237,255,189,1,0,0,0,255,252,233,244,49,
  255,248,3,129,252,253,239,255,15,133,244,9,255,252,233,244,50,255,72,252,
  247,208,139,108,202,4,131,198,4,129,252,253,239,15,133,244,249,139,12,202,
  59,12,135,255,139,108,202,4,131,198,4,255,129,252,253,239,15,131,244,249,
  248,1,252,242,15,16,4,199,248,2,102,15,46,4,202,248,4,255,72,252,247,208,
  139,108,202,4,131,198,4,57,197,255,15,133,244,249,15,183,70,252,254,141,180,
  253,134,233,248,2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,252,235,248,3,129,252,253,239,15,133,244,2,252,233,244,50,255,15,132,244,
  248,129,252,253,239,15,132,244,50,15,183,70,252,254,141,180,253,134,233,248,
  2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,255,
  139,108,194,4,131,198,4,129,252,253,239,255,137,108,202,4,139,44,194,137,
  44,202,255,72,139,44,194,72,137,44,202,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,252,235,255,49,252,237,129,124,253,194,4,239,129,
  213,239,137,108,202,4,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,255,129,124,253,194,4,239,15,131,244,55,252,242,15,16,4,194,
  72,184,237,237,102,72,15,110,200,15,87,193,252,242,15,17,4,202,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,255,129,124,253,194,
  4,239,15,133,244,248,139,4,194,15,87,192,252,242,15,42,128,233,248,1,252,
  242,15,17,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,252,235,248,2,129,124,253,194,4,239,15,133,244,58,139,12,194,255,139,169,
  233,131,252,253,0,15,133,244,255,248,3,255,248,59,137,213,232,251,1,19,252,
  242,15,42,192,137,252,234,15,182,78,252,253,252,233,244,1,255,248,9,252,246,
  133,233,235,15,133,244,3,252,233,244,58,255,15,182,252,236,15,182,192,255,
  129,124,253,252,234,4,239,15,131,244,52,252,242,15,16,4,252,234,252,242,15,
  88,4,199,255,129,124,253,252,234,4,239,15,131,244,54,252,242,15,16,4,199,
  252,242,15,88,4,252,234,255,129,124,253,252,234,4,239,15,131,244,57,129,124,
  253,194,4,239,15,131,244,57,252,242,15,16,4,252,234,252,242,15,88,4,194,255,
  129,124,253,252,234,4,239,15,131,244,52,252,242,15,16,4,252,234,252,242,15,
  92,4,199,255,129,124,253,252,234,4,239,15,131,244,54,252,242,15,16,4,199,
  252,242,15,92,4,252,234,255,129,124,253,252,234,4,239,15,131,244,57,129,124,
  253,194,4,239,15,131,244,57,252,242,15,16,4,252,234,252,242,15,92,4,194,255,
  129,124,253,252,234,4,239,15,131,244,52,252,242,15,16,4,252,234,252,242,15,
  89,4,199,255,129,124,253,252,234,4,239,15,131,244,54,252,242,15,16,4,199,
  252,242,15,89,4,252,234,255,129,124,253,252,234,4,239,15,131,244,57,129,124,
  253,194,4,239,15,131,244,57,252,242,15,16,4,252,234,252,242,15,89,4,194,255,
  129,124,253,252,234,4,239,15,131,244,52,252,242,15,16,4,252,234,252,242,15,
  94,4,199,255,129,124,253,252,234,4,239,15,131,244,54,252,242,15,16,4,199,
  252,242,15,94,4,252,234,255,129,124,253,252,234,4,239,15,131,244,57,129,124,
  253,194,4,239,15,131,244,57,252,242,15,16,4,252,234,252,242,15,94,4,194,255,
  129,124,253,252,234,4,239,15,131,244,52,252,242,15,16,4,252,234,252,242,15,
  16,12,199,255,129,124,253,252,234,4,239,15,131,244,54,252,242,15,16,4,199,
  252,242,15,16,12,252,234,255,129,124,253,252,234,4,239,15,131,244,57,129,
  124,253,194,4,239,15,131,244,57,252,242,15,16,4,252,234,252,242,15,16,12,
  194,255,248,170,232,244,158,252,242,15,17,4,202,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,252,235,255,252,233,244,170,255,232,244,117,
  252,242,15,17,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,255,15,182,252,236,15,182,192,139,76,36,96,137,145,233,141,
  20,194,65,137,192,65,41,232,248,37,137,205,137,116,36,100,232,251,1,28,139,
  149,233,133,192,15,133,244,46,15,182,110,252,255,15,182,78,252,253,72,139,
  4,252,234,72,137,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,255,72,252,247,208,139,4,135,199,68,202,4,237,137,4,202,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,255,15,191,
  192,252,242,15,42,192,252,242,15,17,4,202,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,255,252,242,15,16,4,199,252,242,15,17,
  4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,
  255,72,252,247,208,137,68,202,4,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,255,141,76,202,12,141,68,194,4,189,237,137,105,
  252,248,248,1,137,41,131,193,8,57,193,15,134,244,1,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,255,139,106,252,248,139,172,253,
  133,233,139,173,233,72,139,69,0,72,137,4,202,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,252,235,255,139,106,252,248,139,172,253,141,
  233,128,189,233,0,139,173,233,139,12,194,139,68,194,4,137,77,0,137,69,4,15,
  132,244,247,252,246,133,233,235,15,133,244,248,248,1,139,6,15,182,204,15,
  182,232,131,198,4,193,232,16,252,255,36,252,235,248,2,129,232,239,129,252,
  248,239,15,134,244,1,252,246,129,233,235,15,132,244,1,135,213,141,139,233,
  255,232,251,1,29,137,252,234,252,233,244,1,255,72,252,247,208,139,106,252,
  248,139,172,253,141,233,139,12,135,139,133,233,137,8,199,64,4,237,252,246,
  133,233,235,15,133,244,248,248,1,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,248,2,252,246,129,233,235,15,132,244,1,128,189,
  233,0,15,132,244,1,137,213,137,194,141,139,233,232,251,1,29,137,252,234,252,
  233,244,1,255,139,106,252,248,252,242,15,16,4,199,139,172,253,141,233,139,
  141,233,252,242,15,17,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,252,235,255,72,252,247,208,139,106,252,248,139,172,253,141,233,
  139,141,233,137,65,4,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,255,141,180,253,134,233,139,108,36,96,131,189,233,0,15,132,
  244,247,137,149,233,141,20,202,137,252,233,232,251,1,30,139,149,233,248,1,
  139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,255,72,
  252,247,208,139,108,36,96,137,149,233,68,139,66,252,248,139,20,135,137,252,
  233,137,116,36,100,232,251,1,31,139,149,233,15,182,78,252,253,137,4,202,199,
  68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  252,235,255,139,108,36,96,137,149,233,139,139,233,59,139,233,137,116,36,100,
  15,131,244,251,248,1,65,137,192,37,252,255,7,0,0,65,193,232,11,61,252,255,
  7,0,0,15,132,244,249,248,2,137,252,233,137,194,232,251,1,32,139,149,233,15,
  182,78,252,253,137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,248,3,184,1,8,0,0,252,233,244,2,248,5,
  137,252,233,232,251,1,33,15,183,70,252,254,252,233,244,1,255,72,252,247,208,
  139,108,36,96,139,139,233,137,116,36,100,59,139,233,137,149,233,15,131,244,
  249,248,2,139,20,135,137,252,233,232,251,1,34,139,149,233,15,182,78,252,253,
  137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,248,3,137,252,233,232,251,1,33,15,183,70,252,254,72,
  252,247,208,252,233,244,2,255,72,252,247,208,139,106,252,248,139,173,233,
  139,4,135,252,233,244,171,255,72,252,247,208,139,106,252,248,139,173,233,
  139,4,135,252,233,244,172,255,15,182,252,236,15,182,192,129,124,253,252,234,
  4,239,15,133,244,40,139,44,252,234,129,124,253,194,4,239,15,131,244,251,252,
  242,15,16,4,194,252,242,15,45,192,252,242,15,42,200,102,15,46,193,15,133,
  244,40,59,133,233,15,131,244,40,193,224,3,3,133,233,129,120,253,4,239,15,
  132,244,248,72,139,40,72,137,44,202,248,1,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,248,2,131,189,233,0,15,132,244,249,255,
  139,141,233,252,246,129,233,235,15,132,244,40,15,182,78,252,253,248,3,199,
  68,202,4,237,252,233,244,1,248,5,129,124,253,194,4,239,15,133,244,40,139,
  4,194,252,233,244,171,255,15,182,252,236,15,182,192,72,252,247,208,139,4,
  135,129,124,253,252,234,4,239,15,133,244,38,139,44,252,234,248,171,139,141,
  233,35,136,233,105,201,239,3,141,233,248,1,129,185,233,239,15,133,244,250,
  57,129,233,15,133,244,250,129,121,253,4,239,15,132,244,251,15,182,70,252,
  253,72,139,41,72,137,44,194,248,2,255,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,252,235,248,3,15,182,70,252,253,199,68,194,4,237,
  252,233,244,2,248,4,139,137,233,133,201,15,133,244,1,248,5,139,141,233,133,
  201,15,132,244,3,252,246,129,233,235,15,133,244,3,252,233,244,38,255,15,182,
  252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,39,139,44,252,234,
  59,133,233,15,131,244,39,193,224,3,3,133,233,129,120,253,4,239,15,132,244,
  248,72,139,40,72,137,44,202,248,1,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,248,2,131,189,233,0,15,132,244,249,139,141,233,
  252,246,129,233,235,15,132,244,39,255,15,182,78,252,253,248,3,199,68,202,
  4,237,252,233,244,1,255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,
  15,133,244,43,139,44,252,234,129,124,253,194,4,239,15,131,244,251,252,242,
  15,16,4,194,252,242,15,45,192,252,242,15,42,200,102,15,46,193,15,133,244,
  43,59,133,233,15,131,244,43,193,224,3,3,133,233,129,120,253,4,239,15,132,
  244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,255,72,139,44,202,
  72,137,40,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,
  235,248,3,131,189,233,0,15,132,244,1,139,141,233,252,246,129,233,235,15,132,
  244,43,15,182,78,252,253,252,233,244,1,248,5,129,124,253,194,4,239,15,133,
  244,43,139,4,194,252,233,244,172,248,7,128,165,233,235,255,139,139,233,137,
  171,233,137,141,233,15,182,78,252,253,252,233,244,2,255,15,182,252,236,15,
  182,192,72,252,247,208,139,4,135,129,124,253,252,234,4,239,15,133,244,41,
  139,44,252,234,248,172,139,141,233,35,136,233,105,201,239,198,133,233,0,3,
  141,233,248,1,129,185,233,239,15,133,244,251,57,129,233,15,133,244,251,129,
  121,253,4,239,15,132,244,250,248,2,255,252,246,133,233,235,15,133,244,253,
  248,3,15,182,70,252,253,72,139,44,194,72,137,41,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,252,235,248,4,131,189,233,0,15,132,244,2,
  137,76,36,80,139,141,233,252,246,129,233,235,15,132,244,41,139,76,36,80,252,
  233,244,2,248,5,139,137,233,133,201,15,133,244,1,255,139,141,233,133,201,
  15,132,244,252,252,246,129,233,235,15,132,244,41,248,6,137,68,36,80,199,68,
  36,84,237,137,108,36,32,139,76,36,96,137,145,233,76,141,68,36,80,137,252,
  234,137,205,137,116,36,100,232,251,1,35,139,149,233,139,108,36,32,137,193,
  252,233,244,2,248,7,128,165,233,235,139,131,233,137,171,233,137,133,233,252,
  233,244,3,255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,
  244,42,139,44,252,234,59,133,233,15,131,244,42,193,224,3,3,133,233,129,120,
  253,4,239,15,132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,72,
  139,12,202,72,137,8,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,248,3,131,189,233,0,15,132,244,1,255,139,141,233,252,246,129,
  233,235,15,132,244,42,15,182,78,252,253,252,233,244,1,248,7,128,165,233,235,
  139,139,233,137,171,233,137,141,233,15,182,78,252,253,252,233,244,2,255,137,
  124,36,80,139,60,199,248,1,141,12,202,139,105,252,248,252,246,133,233,235,
  15,133,244,253,248,2,139,68,36,84,131,232,1,15,132,244,250,1,252,248,59,133,
  233,15,135,244,251,41,252,248,193,231,3,3,189,233,248,3,72,139,41,131,193,
  8,72,137,47,131,199,8,131,232,1,15,133,244,3,248,4,139,124,36,80,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,5,139,76,36,
  96,137,145,233,137,252,234,65,137,192,137,205,137,116,36,100,232,251,1,36,
  139,149,233,15,182,78,252,253,252,233,244,1,248,7,255,128,165,233,235,139,
  131,233,137,171,233,137,133,233,252,233,244,2,255,3,68,36,84,255,129,124,
  253,202,4,239,139,44,202,15,133,244,60,141,84,202,8,137,114,252,252,139,181,
  233,139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,252,235,255,141,
  76,202,8,137,215,139,105,252,248,129,121,253,252,252,239,15,133,244,30,248,
  61,139,114,252,252,252,247,198,237,15,133,244,253,248,1,137,106,252,248,137,
  68,36,84,131,232,1,15,132,244,249,248,2,72,139,41,131,193,8,72,137,47,131,
  199,8,131,232,1,15,133,244,2,139,106,252,248,248,3,139,68,36,84,128,189,233,
  1,15,135,244,251,248,4,139,181,233,139,14,15,182,252,233,15,182,205,131,198,
  4,252,255,36,252,235,248,5,255,252,247,198,237,15,133,244,4,15,182,78,252,
  253,72,252,247,209,141,12,202,139,121,252,248,139,191,233,139,191,233,252,
  233,244,4,248,7,129,252,238,239,252,247,198,237,15,133,244,254,41,252,242,
  137,215,139,114,252,252,252,233,244,1,248,8,129,198,239,252,233,244,1,255,
  141,76,202,8,72,139,105,232,72,139,65,252,240,72,137,41,72,137,65,8,139,105,
  224,139,65,228,137,105,252,248,137,65,252,252,129,252,248,239,184,237,15,
  133,244,30,137,202,137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,
  205,131,198,4,252,255,36,252,235,255,137,124,36,80,137,92,36,84,139,108,202,
  252,240,139,68,202,252,248,139,157,233,131,198,4,139,189,233,248,1,57,216,
  15,131,244,251,129,124,253,199,4,239,15,132,244,250,252,242,15,42,192,72,
  139,44,199,72,137,108,202,8,131,192,1,252,242,15,17,4,202,137,68,202,252,
  248,248,2,15,183,70,252,254,141,180,253,134,233,248,3,139,92,36,84,139,124,
  36,80,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,
  248,4,131,192,1,252,233,244,1,248,5,41,216,248,6,59,133,233,15,135,244,3,
  105,252,248,239,255,3,189,233,129,191,233,239,15,132,244,253,141,92,24,1,
  72,139,175,233,72,139,135,233,72,137,44,202,72,137,68,202,8,137,92,202,252,
  248,252,233,244,2,248,7,131,192,1,252,233,244,6,255,129,124,253,202,252,236,
  239,15,133,244,251,139,108,202,232,129,124,253,202,252,244,239,15,133,244,
  251,129,124,253,202,252,252,239,15,133,244,251,128,189,233,235,15,133,244,
  251,141,180,253,134,233,199,68,202,252,248,0,0,0,0,199,68,202,252,252,252,
  255,127,252,254,252,255,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,248,5,198,70,252,252,235,141,180,253,134,233,198,6,
  235,252,233,244,1,255,15,182,252,236,15,182,192,137,124,36,80,141,188,253,
  194,233,141,12,202,43,122,252,252,133,252,237,15,132,244,251,141,108,252,
  233,252,248,57,215,15,131,244,248,248,1,72,139,71,252,248,131,199,8,72,137,
  1,131,193,8,57,252,233,15,131,244,249,57,215,15,130,244,1,248,2,199,65,4,
  237,131,193,8,57,252,233,15,130,244,2,248,3,139,124,36,80,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,5,199,68,36,84,1,0,
  0,0,137,208,41,252,248,15,134,244,3,137,197,193,252,237,3,131,197,1,137,108,
  36,84,139,108,36,96,1,200,59,133,233,15,135,244,253,248,6,255,72,139,71,252,
  248,131,199,8,72,137,1,131,193,8,57,215,15,130,244,6,252,233,244,3,248,7,
  137,149,233,137,141,233,137,116,36,100,41,215,139,84,36,84,131,252,234,1,
  137,252,233,232,251,1,0,139,149,233,139,141,233,1,215,252,233,244,6,255,193,
  225,3,255,248,1,139,114,252,252,137,68,36,84,252,247,198,237,15,133,244,253,
  255,248,14,137,215,131,232,1,15,132,244,249,248,2,72,139,44,15,72,137,111,
  252,248,131,199,8,131,232,1,15,133,244,2,248,3,139,68,36,84,15,182,110,252,
  255,248,5,57,197,15,135,244,252,255,72,139,44,10,72,137,106,252,248,255,248,
  5,56,70,252,255,15,135,244,252,255,15,182,78,252,253,72,252,247,209,141,20,
  202,139,122,252,248,139,191,233,139,191,233,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,248,6,255,199,71,252,252,237,131,199,
  8,255,199,68,194,252,244,237,255,131,192,1,252,233,244,5,248,7,141,174,233,
  252,247,197,237,15,133,244,15,41,252,234,255,1,252,233,255,137,252,245,209,
  252,237,129,229,239,102,129,172,253,43,233,238,15,130,244,150,255,141,12,
  202,255,129,121,253,4,239,15,133,244,255,255,129,121,253,12,239,15,133,244,
  62,129,121,253,20,239,15,133,244,62,139,41,131,121,16,0,15,140,244,251,255,
  129,121,253,12,239,15,133,244,167,129,121,253,20,239,15,133,244,167,255,139,
  105,16,133,252,237,15,136,244,251,3,41,15,128,244,247,137,41,255,59,105,8,
  199,65,28,237,137,105,24,255,15,142,244,253,248,1,248,6,141,180,253,134,233,
  255,141,180,253,134,233,15,183,70,252,254,15,142,245,248,1,248,6,255,15,143,
  244,253,248,6,141,180,253,134,233,248,1,255,248,7,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,248,5,255,3,41,15,128,244,1,137,
  41,255,15,141,244,7,255,141,180,253,134,233,15,183,70,252,254,15,141,245,
  255,15,140,244,7,255,252,233,244,6,248,9,255,129,121,253,4,239,255,15,131,
  244,62,129,121,253,12,239,15,131,244,62,255,129,121,253,12,239,15,131,244,
  167,129,121,253,20,239,15,131,244,167,255,139,105,20,255,129,252,253,239,
  15,131,244,62,255,252,242,15,16,1,252,242,15,16,73,8,255,252,242,15,88,65,
  16,252,242,15,17,1,133,252,237,15,136,244,249,255,15,140,244,249,255,102,
  15,46,200,248,1,252,242,15,17,65,24,255,15,131,244,248,141,180,253,134,233,
  255,141,180,253,134,233,15,183,70,252,254,15,131,245,255,15,130,244,248,141,
  180,253,134,233,255,248,2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,252,235,248,3,102,15,46,193,252,233,244,1,255,141,12,202,139,105,
  4,129,252,253,239,15,132,244,247,255,137,105,252,252,139,41,137,105,252,248,
  252,233,245,255,141,180,253,134,233,139,1,137,105,252,252,137,65,252,248,
  255,139,139,233,139,4,129,72,139,128,233,139,108,36,96,137,147,233,137,171,
  233,76,137,100,36,80,76,137,108,36,32,76,137,116,36,24,76,137,124,36,16,72,
  137,225,72,129,252,236,239,102,15,127,49,102,15,127,185,233,102,68,15,127,
  129,233,102,68,15,127,137,233,102,68,15,127,145,233,102,68,15,127,153,233,
  102,68,15,127,161,233,102,68,15,127,169,233,102,68,15,127,177,233,102,68,
  15,127,185,233,252,255,224,255,141,180,253,134,233,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,255,137,252,245,209,252,237,129,
  229,239,102,129,172,253,43,233,238,15,130,244,152,255,139,190,233,139,108,
  36,96,141,12,202,59,141,233,15,135,244,25,15,182,142,233,57,200,15,134,244,
  249,248,2,255,15,183,70,252,254,252,233,245,255,248,3,199,68,194,252,252,
  237,131,192,1,57,200,15,134,244,3,252,233,244,2,255,141,44,197,237,141,4,
  194,139,122,252,248,137,104,252,252,137,120,252,248,139,108,36,96,141,12,
  200,59,141,233,15,135,244,24,137,209,137,194,15,182,174,233,133,252,237,15,
  132,244,248,248,1,131,193,8,57,209,15,131,244,249,139,121,252,248,137,56,
  139,121,252,252,137,120,4,131,192,8,199,65,252,252,237,131,252,237,1,15,133,
  244,1,248,2,255,139,190,233,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,255,248,3,199,64,4,237,131,192,8,131,252,237,1,15,133,
  244,3,252,233,244,2,255,139,106,252,248,72,139,189,233,139,108,36,96,141,
  68,194,252,248,137,149,233,141,136,233,59,141,233,137,133,233,255,137,252,
  233,255,72,137,252,250,137,252,233,255,15,135,244,23,199,131,233,237,255,
  252,255,215,255,252,255,147,233,255,199,131,233,237,139,149,233,141,12,194,
  252,247,217,3,141,233,139,114,252,252,252,233,244,12,255,254,0
};

enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_vm_unwind_yield,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c_eh,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_rethrow,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vm_call_dispatch,
  GLOB_vmeta_call,
  GLOB_vm_call_dispatch_f,
  GLOB_vm_cpcall,
  GLOB_cont_ffi_callback,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_arith_vno,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nvo,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vvo,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_LEN_Z,
  GLOB_vmeta_call_ra,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_fff_resxmm0,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_fff_resi,
  GLOB_fff_resn,
  GLOB_ff_math_abs,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_vm_exp_x87,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_deg,
  GLOB_ff_math_rad,
  GLOB_ff_math_atan2,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_vm_trunc,
  GLOB_ff_math_fmod,
  GLOB_ff_math_pow,
  GLOB_vm_pow,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_len,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_rep,
  GLOB_fff_fallback_2,
  GLOB_ff_string_reverse,
  GLOB_fff_fallback_1,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_table_getn,
  GLOB_ff_bit_tobit,
  GLOB_fff_resbit,
  GLOB_ff_bit_band,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_hotloop,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_floor_sse,
  GLOB_vm_ceil_sse,
  GLOB_vm_trunc_sse,
  GLOB_vm_mod,
  GLOB_vm_log2,
  GLOB_vm_exp2_x87,
  GLOB_vm_exp2raw,
  GLOB_vm_pow_sse,
  GLOB_vm_powi_sse,
  GLOB_vm_foldfpm,
  GLOB_vm_foldarith,
  GLOB_vm_cpuid,
  GLOB_assert_bad_for_arg_type,
  GLOB_vm_ffi_callback,
  GLOB_vm_ffi_call,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "vm_unwind_yield",
  "BC_RET_Z",
  "vm_return",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c_eh",
  "vm_unwind_c@8",
  "vm_unwind_rethrow",
  "vm_unwind_ff@4",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vm_call_dispatch",
  "vmeta_call",
  "vm_call_dispatch_f",
  "vm_cpcall",
  "cont_ffi_callback",
  "vm_call_tail",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_arith_vno",
  "vmeta_arith_vn",
  "vmeta_arith_nvo",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vvo",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_LEN_Z",
  "vmeta_call_ra",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "fff_resxmm0",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "fff_resi",
  "fff_resn",
  "ff_math_abs",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_sqrt",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "vm_exp_x87",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_deg",
  "ff_math_rad",
  "ff_math_atan2",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "vm_trunc",
  "ff_math_fmod",
  "ff_math_pow",
  "vm_pow",
  "ff_math_min",
  "ff_math_max",
  "ff_string_len",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_rep",
  "fff_fallback_2",
  "ff_string_reverse",
  "fff_fallback_1",
  "ff_string_lower",
  "ff_string_upper",
  "ff_table_getn",
  "ff_bit_tobit",
  "fff_resbit",
  "ff_bit_band",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_hotloop",
  "vm_callhook",
  "vm_hotcall",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_floor_sse",
  "vm_ceil_sse",
  "vm_trunc_sse",
  "vm_mod",
  "vm_log2",
  "vm_exp2_x87",
  "vm_exp2raw",
  "vm_pow_sse",
  "vm_powi_sse",
  "vm_foldfpm",
  "vm_foldarith",
  "vm_cpuid",
  "assert_bad_for_arg_type",
  "vm_ffi_callback",
  "vm_ffi_call@4",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack@8",
  "lj_meta_tget",
  "lj_meta_tset",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_equal_cd@8",
  "lj_meta_arith",
  "lj_meta_len@8",
  "lj_meta_call",
  "lj_meta_for@8",
  "lj_tab_get",
  "lj_str_fromnum@8",
  "lj_tab_next",
  "lj_tab_getinth@8",
  "lj_ffh_coroutine_wrap_err@8",
  "lj_vm_sinh",
  "lj_vm_cosh",
  "lj_vm_tanh",
  "lj_str_new",
  "lj_tab_len@4",
  "lj_gc_step@4",
  "lj_dispatch_ins@8",
  "lj_trace_hot@8",
  "lj_dispatch_call@8",
  "lj_trace_exit@8",
  "lj_err_throw@8",
  "lj_ccallback_enter@8",
  "lj_ccallback_leave@8",
  "lj_meta_cat",
  "lj_gc_barrieruv@8",
  "lj_func_closeuv@8",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop@4",
  "lj_tab_dup@8",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, FRAME_P, LJ_TTRUE, FRAME_TYPE, FRAME_C, FRAME_TYPE, DISPATCH_GL(vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 92, Dt1(->base), Dt1(->top), Dt1(->cframe), Dt1(->maxstack), LJ_TNIL);
  dasm_put(Dst, 190, Dt1(->top), Dt1(->top), LUA_YIELD, Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 271, CFRAME_RAWMASK, 1+1, Dt1(->base), Dt1(->glref), GG_G2DISP, LJ_TFALSE, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_MINSTACK);
  dasm_put(Dst, 342, -4+PC2PROTO(framesize), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_CP, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status));
  dasm_put(Dst, 488, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE, FRAME_CP, FRAME_C, Dt1(->cframe), Dt1(->cframe));
  dasm_put(Dst, 601, Dt1(->glref), GG_G2DISP, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), LJ_TFUNC, Dt7(->pc), Dt1(->stack), Dt1(->top), Dt1(->cframe), Dt1(->cframe));
  dasm_put(Dst, 738, FRAME_CP, LJ_TNIL, 0, Dt7(->pc), PC2PROTO(k), Dt1(->base));
  dasm_put(Dst, 864, LJ_TSTR, BC_GGET, DISPATCH_GL(tmptv), LJ_TTAB, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1004, Dt1(->top), FRAME_CONT, 2+1, LJ_TSTR, BC_GSET, DISPATCH_GL(tmptv), LJ_TTAB);
  dasm_put(Dst, 1140, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 3+1, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1311, -BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1445, Dt1(->base), Dt1(->base), FRAME_CONT, 2+1);
  dasm_put(Dst, 1557, Dt1(->base), Dt1(->base));
#if LJ_52
  dasm_put(Dst, 1588);
#else
  dasm_put(Dst, 1607);
#endif
  dasm_put(Dst, 1612, Dt1(->base), Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC, 1+1, LJ_TISTRUECOND);
  dasm_put(Dst, 1798, 1+1, ~LJ_TNUMX, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, ~LJ_TLIGHTUD);
  dasm_put(Dst, 1902, 1+1, LJ_TTAB, Dt6(->metatable), LJ_TNIL, DISPATCH_GL(gcroot)+4*(GCROOT_MMNAME+MM_metatable), LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node));
  dasm_put(Dst, 1974, Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), DtB(->next), LJ_TNIL);
  dasm_put(Dst, 2039, LJ_TUDATA, LJ_TNUMX, LJ_TISNUM, LJ_TLIGHTUD, LJ_TNUMX, DISPATCH_GL(gcroot[GCROOT_BASEMT]), 2+1);
  dasm_put(Dst, 2094, LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain));
  dasm_put(Dst, 2162, DISPATCH_GL(gc.grayagain), Dt6(->gclist), 2+1, LJ_TTAB, 1+1, LJ_TISNUM);
  dasm_put(Dst, 2248, 1+1, LJ_TSTR, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]));
  dasm_put(Dst, 2317, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), 1+1, LJ_TTAB);
  dasm_put(Dst, 2383, Dt1(->base), Dt1(->top), Dt1(->base), 1+2, LJ_TNIL, LJ_TNIL, 1+1);
  dasm_put(Dst, 2479, LJ_TTAB);
#if LJ_52
  dasm_put(Dst, 2491, Dt6(->metatable));
#endif
  dasm_put(Dst, 2500, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, 1+3, 1+1, LJ_TTAB, LJ_TISNUM, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), Dt6(->asize));
  dasm_put(Dst, 2604, Dt6(->array), LJ_TNIL, Dt6(->hmask), 1+0, 1+1);
  dasm_put(Dst, 2479, LJ_TTAB);
#if LJ_52
  dasm_put(Dst, 2491, Dt6(->metatable));
#endif
  dasm_put(Dst, 2680, Dt8(->upvalue[0]), LJ_TFUNC, 1+3, 1+1, 8+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, 2+1, LJ_TFUNC);
  dasm_put(Dst, 2769, LJ_TFUNC, 16+FRAME_PCALL, 1+1, LJ_TTHREAD, Dt1(->cframe), Dt1(->status), LUA_YIELD);
  dasm_put(Dst, 2856, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 2947, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), LJ_TTRUE);
  dasm_put(Dst, 3041, FRAME_TYPE, LJ_TFALSE, Dt1(->top), Dt1(->top), 1+2, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe));
  dasm_put(Dst, 3158, Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 3229, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
  dasm_put(Dst, 3317, FRAME_TYPE, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME);
  dasm_put(Dst, 3429, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status), 1+1, LJ_TISNUM, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32));
  dasm_put(Dst, 3500, 1+1, FRAME_TYPE, LJ_TNIL, LJ_TISNUM);
  dasm_put(Dst, 3622, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 3681, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 3755, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 3812, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 3879, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 3969, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4057, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  dasm_put(Dst, 4135, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4202, 1+1, LJ_TISNUM, 1+2);
  dasm_put(Dst, 4339, (unsigned int)(U64x(43500000,00000000)), (unsigned int)((U64x(43500000,00000000))>>32), 1+1, LJ_TISNUM);
  dasm_put(Dst, 4475, 1+2, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4542, 2+1, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4617, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4706, 1+1, LJ_TSTR, Dt5(->len), 1+1);
  dasm_put(Dst, 4776, LJ_TSTR, Dt5(->len), Dt5([1]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1);
  dasm_put(Dst, 4838, LJ_TISNUM, Dt1(->base), Dt1(->base), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2);
  dasm_put(Dst, 4963, LJ_TISNUM, LJ_TSTR, LJ_TISNUM, Dt5(->len));
  dasm_put(Dst, 5046, sizeof(GCstr)-1);
  dasm_put(Dst, 5117, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 2+1, LJ_TSTR, LJ_TISNUM);
  dasm_put(Dst, 5174, Dt5(->len), DISPATCH_GL(tmpbuf.sz), Dt5([1]), DISPATCH_GL(tmpbuf.buf), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5247, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr));
  dasm_put(Dst, 5301, DISPATCH_GL(tmpbuf.buf), 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR);
  dasm_put(Dst, 5377, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5462, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5527, 1+1, LJ_TTAB);
  dasm_put(Dst, 5619, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 1+1, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), LJ_TISNUM);
  dasm_put(Dst, 5694, LJ_TISNUM, 1+1, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), LJ_TISNUM);
  dasm_put(Dst, 5815, LJ_TISNUM, 1+1, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), LJ_TISNUM);
  dasm_put(Dst, 5915, LJ_TISNUM, 1+1, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 1+1);
  dasm_put(Dst, 6008, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 6091, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  dasm_put(Dst, 6215, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1, LJ_TISNUM);
  dasm_put(Dst, 6306, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32), 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  dasm_put(Dst, 6434, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 6524, Dt7(->pc), FRAME_TYPE, LUA_MINSTACK, Dt1(->base), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 6650, DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), DISPATCH_GL(hookmask), HOOK_ACTIVE);
  dasm_put(Dst, 6716, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE, Dt1(->base), Dt1(->base), GG_DISP2STATIC);
  dasm_put(Dst, 6799, Dt7(->pc), PC2PROTO(framesize), Dt1(->base), Dt1(->top), GG_DISP2J, DISPATCH_J(L), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 6929, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 16*8+4*8, DISPATCH_GL(jit_L), DISPATCH_GL(jit_base), DISPATCH_J(L), DISPATCH_GL(jit_L), Dt1(->base), 4*8, GG_DISP2J, Dt1(->cframe), CFRAME_RAWMASK, CFRAME_OFS_L, Dt1(->base), CFRAME_OFS_PC);
  dasm_put(Dst, 7182, 9*16+4*8, -9*16, -8*16, -7*16, -6*16, -5*16, -4*16, -3*16, -2*16, -1*16, Dt7(->pc), PC2PROTO(k), DISPATCH_GL(jit_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, BC_FUNCF);
  dasm_put(Dst, 7324, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32));
  dasm_put(Dst, 7472, (unsigned int)(U64x(bff00000,00000000)), (unsigned int)((U64x(bff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32));
  dasm_put(Dst, 7652, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 7856);
  dasm_put(Dst, 7936, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 8098, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7ff00000,00000000)), (unsigned int)((U64x(7ff00000,00000000))>>32));
  dasm_put(Dst, 8208);
  dasm_put(Dst, 8284);
  dasm_put(Dst, 8357);
  dasm_put(Dst, 8450, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32));
  dasm_put(Dst, 8536);
#ifdef LUA_USE_ASSERT
  dasm_put(Dst, 8652);
#endif
#define DtE(_V) (int)(ptrdiff_t)&(((CTState *)0)_V)
  dasm_put(Dst, 8654, GG_G2DISP, Dt2(->ctype_state), DtE(->cb.slot), DtE(->cb.gpr[0]), DtE(->cb.gpr[1]), DtE(->cb.gpr[2]), DtE(->cb.gpr[3]), DtE(->cb.fpr[0]), DtE(->cb.fpr[1]), DtE(->cb.fpr[2]), DtE(->cb.fpr[3]), CFRAME_SIZE+4*8, DtE(->cb.stack), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), Dt7(->pc));
#define DtF(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
  dasm_put(Dst, 8786, DISPATCH_GL(ctype_state), DtE(->L), Dt1(->base), Dt1(->top), DtE(->cb.gpr[0]), DtE(->cb.fpr[0]), DtF(->spadj), DtF(->nsp), offsetof(CCallState, stack), CCALL_SPS_EXTRA*8, DtF(->nfpr));
  dasm_put(Dst, 8883, DtF(->gpr[0]), DtF(->gpr[1]), DtF(->gpr[2]), DtF(->gpr[3]), DtF(->fpr[0]), DtF(->fpr[1]), DtF(->fpr[2]), DtF(->fpr[3]), DtF(->func), DtF(->gpr[0]), DtF(->fpr[0]));
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop)
{
  int vk = 0;
  dasm_put(Dst, 486, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */


  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 8943, LJ_TISNUM, LJ_TISNUM);
    switch (op) {
    case BC_ISLT:
    dasm_put(Dst, 7467);
    break;
    case BC_ISGE:
    dasm_put(Dst, 8984);
    break;
    case BC_ISLE:
    dasm_put(Dst, 8989);
    break;
    case BC_ISGT:
    dasm_put(Dst, 8994);
    break;
    default: break;  /* Shut up GCC. */
    }
    dasm_put(Dst, 8999, -BCBIAS_J*4);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 9031);
    if (vk) {
    } else {
    }
    dasm_put(Dst, 9039, LJ_TISNUM, LJ_TISNUM);
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 9075);
    } else {
      dasm_put(Dst, 9084);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 9093, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 9108, -BCBIAS_J*4);
    }
    if (LJ_DUALNUM && (op == BC_ISEQV || op == BC_ISNEV ||
		       op == BC_ISEQN || op == BC_ISNEN)) {
      dasm_put(Dst, 9123);
    } else {
      dasm_put(Dst, 9011);
    }
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 9128, LJ_TCDATA, LJ_TCDATA, LJ_TISPRI, LJ_TISTABUD, LJ_TUDATA);
      dasm_put(Dst, 9193, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
      if (vk) {
	dasm_put(Dst, 9213);
      } else {
	dasm_put(Dst, 9217);
      }
      dasm_put(Dst, 9223);
    } else {
      dasm_put(Dst, 9228, LJ_TCDATA);
      if (LJ_DUALNUM && vk) {
	dasm_put(Dst, 9235);
      } else {
	dasm_put(Dst, 9208);
      }
      dasm_put(Dst, 9240);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 9245, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 9079);
    } else {
      dasm_put(Dst, 8445);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 9271);
    if (vk) {
    } else {
    }
    dasm_put(Dst, 9279, LJ_TISNUM);
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 9305);
    if (!LJ_HASFFI) goto iseqne_test;
    if (vk) {
      dasm_put(Dst, 9319, -BCBIAS_J*4, LJ_TCDATA);
    } else {
      dasm_put(Dst, 9369, LJ_TCDATA, -BCBIAS_J*4);
    }
    break;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 9413, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 8994);
    } else {
      dasm_put(Dst, 8989);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 9425);
    }
    dasm_put(Dst, 8999, -BCBIAS_J*4);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 9436);
    break;
  case BC_NOT:
    dasm_put(Dst, 9464, LJ_TISTRUECOND, LJ_TTRUE);
    break;
  case BC_UNM:
    dasm_put(Dst, 9500, LJ_TISNUM, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32));
    break;
  case BC_LEN:
    dasm_put(Dst, 9554, LJ_TSTR, Dt5(->len), LJ_TTAB);
#if LJ_52
    dasm_put(Dst, 9619, Dt6(->metatable));
#endif
    dasm_put(Dst, 9633);
#if LJ_52
    dasm_put(Dst, 9659, Dt6(->nomm), 1<<MM_len);
#endif
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9683, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9708, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9733, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9528);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9768, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9793, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9818, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9528);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9853, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9878, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9903, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9528);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 9938, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 9963, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 9988, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 9528);
    break;
  case BC_MODVN:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10023, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 10048, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 10073, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10108);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10023, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 10048, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 10073, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10139);
    break;
  case BC_POW:
    dasm_put(Dst, 9675);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 10023, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 10048, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 10073, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 10144);
    break;

  case BC_CAT:
    dasm_put(Dst, 10173, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 10256, LJ_TSTR);
    break;
  case BC_KCDATA:
    dasm_put(Dst, 10256, LJ_TCDATA);
    break;
  case BC_KSHORT:
    dasm_put(Dst, 10291);
    break;
  case BC_KNUM:
    dasm_put(Dst, 10325);
    break;
  case BC_KPRI:
    dasm_put(Dst, 10357);
    break;
  case BC_KNIL:
    dasm_put(Dst, 10385, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 10432, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
    dasm_put(Dst, 10472, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TISNUM - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, GG_DISP2G);
    dasm_put(Dst, 10563);
    break;
#undef TV2MARKOFS
  case BC_USETS:
    dasm_put(Dst, 10575, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 10668, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETP:
    dasm_put(Dst, 10711, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 10750, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 10805, Dt1(->base), Dt1(->base), LJ_TFUNC);
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 10871, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), LJ_TTAB);
    break;
  case BC_TDUP:
    dasm_put(Dst, 10993, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;

  case BC_GGET:
    dasm_put(Dst, 11088, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 11107, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 11126, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable));
    dasm_put(Dst, 11243, Dt6(->metatable), Dt6(->nomm), 1<<MM_index, LJ_TNIL, LJ_TSTR);
    break;
  case BC_TGETS:
    dasm_put(Dst, 11291, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 11375, LJ_TNIL, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 11446, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 11541, LJ_TNIL);
    break;

  case BC_TSETV:
    dasm_put(Dst, 11558, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK);
    dasm_put(Dst, 11650, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt6(->marked), (uint8_t)~LJ_GC_BLACK);
    dasm_put(Dst, 11733, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 11752, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->nomm), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 11828, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next));
    dasm_put(Dst, 11916, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt1(->base), Dt1(->base), Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 12007, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable));
    dasm_put(Dst, 12101, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 12147, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 12290, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 9679);
    if (op == BC_CALLM) {
      dasm_put(Dst, 12308);
    }
    dasm_put(Dst, 12313, LJ_TFUNC, Dt7(->pc));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 12308);
    break;
  case BC_CALLT:
    dasm_put(Dst, 12355, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->pc));
    dasm_put(Dst, 12470, FRAME_TYPE, Dt7(->pc), PC2PROTO(k), FRAME_VARG, FRAME_TYPEP, FRAME_VARG);
    break;

  case BC_ITERC:
    dasm_put(Dst, 12541, LJ_TFUNC, 2+1, Dt7(->pc));
    break;

  case BC_ITERN:
    dasm_put(Dst, 12612, Dt6(->asize), Dt6(->array), LJ_TNIL, -BCBIAS_J*4, Dt6(->hmask), sizeof(Node));
    dasm_put(Dst, 12753, Dt6(->node), DtB(->val.it), LJ_TNIL, DtB(->key), DtB(->val));
    break;

  case BC_ISNEXT:
    dasm_put(Dst, 12804, LJ_TFUNC, LJ_TTAB, LJ_TNIL, Dt8(->ffid), FF_next_N, -BCBIAS_J*4, BC_JMP, -BCBIAS_J*4, BC_ITERC);
    break;

  case BC_VARG:
    dasm_put(Dst, 12916, (8+FRAME_VARG), LJ_TNIL, Dt1(->maxstack));
    dasm_put(Dst, 13076, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 12308);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 13142);
    }
    dasm_put(Dst, 13146, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 13165);
      break;
    case BC_RET1:
      dasm_put(Dst, 13217);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 13227);
    default:
      break;
    }
    dasm_put(Dst, 13238, Dt7(->pc), PC2PROTO(k));
    if (op == BC_RET) {
      dasm_put(Dst, 13282, LJ_TNIL);
    } else {
      dasm_put(Dst, 13291, LJ_TNIL);
    }
    dasm_put(Dst, 13298, -FRAME_VARG, FRAME_TYPEP);
    if (op != BC_RET0) {
      dasm_put(Dst, 13322);
    }
    dasm_put(Dst, 9654);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
    dasm_put(Dst, 13326, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 13347);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 13351, LJ_TISNUM);
      if (!vk) {
	dasm_put(Dst, 13361, LJ_TISNUM, LJ_TISNUM);
      } else {
#ifdef LUA_USE_ASSERT
	dasm_put(Dst, 13390, LJ_TISNUM, LJ_TISNUM);
#endif
	dasm_put(Dst, 13409);
      }
      dasm_put(Dst, 13428, LJ_TISNUM);
      if (op == BC_FORI) {
	dasm_put(Dst, 13439, -BCBIAS_J*4);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 13453, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 13471, -BCBIAS_J*4);
      } else {
	dasm_put(Dst, 13463, BC_JLOOP);
      }
      dasm_put(Dst, 13485);
      if (vk) {
	dasm_put(Dst, 13509);
      }
      dasm_put(Dst, 13428, LJ_TISNUM);
      if (op == BC_FORI) {
	dasm_put(Dst, 13518);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 13523, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 13537);
      } else {
	dasm_put(Dst, 13533, BC_JLOOP);
      }
      dasm_put(Dst, 13542);
    } else if (!vk) {
      dasm_put(Dst, 13549, LJ_TISNUM);
    }
    if (!vk) {
      dasm_put(Dst, 13555, LJ_TISNUM);
    } else {
#ifdef LUA_USE_ASSERT
      dasm_put(Dst, 13569, LJ_TISNUM, LJ_TISNUM);
#endif
    }
    dasm_put(Dst, 13588);
    if (!vk) {
      dasm_put(Dst, 13592, LJ_TISNUM);
    }
    dasm_put(Dst, 13601);
    if (vk) {
      dasm_put(Dst, 13613);
    } else {
      dasm_put(Dst, 13632);
    }
    dasm_put(Dst, 13637);
    if (vk) {
    } else {
    }
    if (op == BC_FORI) {
      dasm_put(Dst, 13650, -BCBIAS_J*4);
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 13660, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      dasm_put(Dst, 13674, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 13670, BC_JLOOP);
    }
    dasm_put(Dst, 13684);
    break;

  case BC_ITERL:
    dasm_put(Dst, 13326, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 13716, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 13731, BC_JLOOP);
    } else {
      dasm_put(Dst, 13745, -BCBIAS_J*4);
    }
    dasm_put(Dst, 9009);
    break;

  case BC_LOOP:
    dasm_put(Dst, 13326, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_LOOP);
    break;

  case BC_ILOOP:
    dasm_put(Dst, 9011);
    break;

  case BC_JLOOP:
    dasm_put(Dst, 13761, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(jit_L), 9*16+4*8, -1*16, -2*16, -3*16, -4*16, -5*16, -6*16, -7*16, -8*16, -9*16);
    break;

  case BC_JMP:
    dasm_put(Dst, 13870, -BCBIAS_J*4);
    break;

  /* -- Function headers -------------------------------------------------- */

   /*
   ** Reminder: A function may be called with func/args above L->maxstack,
   ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
   ** too. This means all FUNC* ops (including fast functions) must check
   ** for stack overflow _before_ adding more slots!
   */

  case BC_FUNCF:
    dasm_put(Dst, 13895, HOTCOUNT_PCMASK, GG_DISP2HOT, HOTCOUNT_CALL);
  case BC_FUNCV:  /* NYI: compiled vararg functions. */
    break;

  case BC_JFUNCF:
#if !LJ_HASJIT
    break;
#endif
  case BC_IFUNCF:
    dasm_put(Dst, 13916, -4+PC2PROTO(k), Dt1(->maxstack), -4+PC2PROTO(numparams));
    if (op == BC_JFUNCF) {
      dasm_put(Dst, 13946, BC_JLOOP);
    } else {
      dasm_put(Dst, 9011);
    }
    dasm_put(Dst, 13955, LJ_TNIL);
    break;

  case BC_JFUNCV:
#if !LJ_HASJIT
    break;
#endif
    dasm_put(Dst, 8652);
    break;  /* NYI: compiled vararg functions. */

  case BC_IFUNCV:
    dasm_put(Dst, 13977, FRAME_VARG, Dt1(->maxstack), -4+PC2PROTO(numparams), LJ_TNIL);
    if (op == BC_JFUNCV) {
      dasm_put(Dst, 13946, BC_JLOOP);
    } else {
      dasm_put(Dst, 14068, -4+PC2PROTO(k));
    }
    dasm_put(Dst, 14091, LJ_TNIL);
    break;

  case BC_FUNCC:
  case BC_FUNCCW:
    dasm_put(Dst, 14113, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->top));
    if (op == BC_FUNCC) {
      dasm_put(Dst, 14143);
    } else {
      dasm_put(Dst, 14147);
    }
    dasm_put(Dst, 14155, DISPATCH_GL(vmstate), ~LJ_VMST_C);
    if (op == BC_FUNCC) {
      dasm_put(Dst, 14164);
    } else {
      dasm_put(Dst, 14168, DISPATCH_GL(wrapf));
    }
    dasm_put(Dst, 14173, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top));
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  dasm_growpc(Dst, BC__MAX);
  build_subroutines(ctx);
  dasm_put(Dst, 14198);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op);
  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
  int fcofs = (int)((uint8_t *)ctx->glob[GLOB_vm_ffi_call] - ctx->code);
#if LJ_64
#define SZPTR	"8"
#define BSZPTR	"3"
#define REG_SP	"0x7"
#define REG_RA	"0x10"
#else
#define SZPTR	"4"
#define BSZPTR	"2"
#define REG_SP	"0x4"
#define REG_RA	"0x8"
#endif
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
#if LJ_64
	"\t.quad .Lbegin\n"
	"\t.quad %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.long .Lbegin\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE0:\n\n", fcofs, CFRAME_SIZE);
#if LJ_HASFFI
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .Lframe0\n"
#if LJ_64
	"\t.quad lj_vm_ffi_call\n"
	"\t.quad %d\n"
	"\t.byte 0xe\n\t.uleb128 16\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0xd\n\t.uleb128 0x6\n"		/* def_cfa_register rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
#else
	"\t.long lj_vm_ffi_call\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 8\n"		/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0xd\n\t.uleb128 0x5\n"		/* def_cfa_register ebp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE1:\n\n", (int)ctx->codesz - fcofs);
#endif
#if (defined(__sun__) && defined(__svr4__))
    fprintf(ctx->fp, "\t.section .eh_frame,\"aw\",@progbits\n");
#else
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
#endif
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE2:\n"
	"\t.long .LEFDE2-.LASFDE2\n"
	".LASFDE2:\n"
	"\t.long .LASFDE2-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE2:\n\n", fcofs, CFRAME_SIZE);
#if LJ_HASFFI
    fprintf(ctx->fp,
	".Lframe2:\n"
	"\t.long .LECIE2-.LSCIE2\n"
	".LSCIE2:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 1\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE2:\n\n");
    fprintf(ctx->fp,
	".LSFDE3:\n"
	"\t.long .LEFDE3-.LASFDE3\n"
	".LASFDE3:\n"
	"\t.long .LASFDE3-.Lframe2\n"
	"\t.long lj_vm_ffi_call-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
#if LJ_64
	"\t.byte 0xe\n\t.uleb128 16\n"		/* def_cfa_offset */
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0xd\n\t.uleb128 0x6\n"		/* def_cfa_register rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
#else
	"\t.byte 0xe\n\t.uleb128 8\n"		/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0xd\n\t.uleb128 0x5\n"		/* def_cfa_register ebp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE3:\n\n", (int)ctx->codesz - fcofs);
#endif
    break;
  /* Mental note: never let Apple design an assembler.
  ** Or a linker. Or a plastic case. But I digress.
  */
  case BUILD_machasm: {
#if LJ_HASFFI
    int fcsize = 0;
#endif
    int i;
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$x,LECIEX-LSCIEX\n"
	"\t.long L$set$x\n"
	"LSCIEX:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\\0\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
#if LJ_64
	"\t.long _lj_err_unwind_dwarf+4@GOTPCREL\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte " REG_SP "\n\t.byte " SZPTR "\n"
#else
	"\t.long L_lj_err_unwind_dwarf$non_lazy_ptr-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH-O. */
#endif
	"\t.byte 0x80+" REG_RA "\n\t.byte 0x1\n"
	"\t.align " BSZPTR "\n"
	"LECIEX:\n\n");
    for (i = 0; i < ctx->nsym; i++) {
      const char *name = ctx->sym[i].name;
      int32_t size = ctx->sym[i+1].ofs - ctx->sym[i].ofs;
      if (size == 0) continue;
#if LJ_HASFFI
      if (!strcmp(name, "_lj_vm_ffi_call")) { fcsize = size; continue; }
#endif
      fprintf(ctx->fp,
	  "%s.eh:\n"
	  "LSFDE%d:\n"
	  "\t.set L$set$%d,LEFDE%d-LASFDE%d\n"
	  "\t.long L$set$%d\n"
	  "LASFDE%d:\n"
	  "\t.long LASFDE%d-EH_frame1\n"
	  "\t.long %s-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"				/* augmentation length */
	  "\t.byte 0xe\n\t.byte %d\n"		/* def_cfa_offset */
#if LJ_64
	  "\t.byte 0x86\n\t.byte 0x2\n"		/* offset rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset rbx */
	  "\t.byte 0x8f\n\t.byte 0x4\n"		/* offset r15 */
	  "\t.byte 0x8e\n\t.byte 0x5\n"		/* offset r14 */
#else
	  "\t.byte 0x84\n\t.byte 0x2\n"		/* offset ebp (4 for MACH-O)*/
	  "\t.byte 0x87\n\t.byte 0x3\n"		/* offset edi */
	  "\t.byte 0x86\n\t.byte 0x4\n"		/* offset esi */
	  "\t.byte 0x83\n\t.byte 0x5\n"		/* offset ebx */
#endif
	  "\t.align " BSZPTR "\n"
	  "LEFDE%d:\n\n",
	  name, i, i, i, i, i, i, i, name, size, CFRAME_SIZE, i);
    }
#if LJ_HASFFI
    if (fcsize) {
      fprintf(ctx->fp,
	  "EH_frame2:\n"
	  "\t.set L$set$y,LECIEY-LSCIEY\n"
	  "\t.long L$set$y\n"
	  "LSCIEY:\n"
	  "\t.long 0\n"
	  "\t.byte 0x1\n"
	  "\t.ascii \"zR\\0\"\n"
	  "\t.byte 0x1\n"
	  "\t.byte 128-" SZPTR "\n"
	  "\t.byte " REG_RA "\n"
	  "\t.byte 1\n"				/* augmentation length */
#if LJ_64
	  "\t.byte 0x1b\n"			/* pcrel|sdata4 */
	  "\t.byte 0xc\n\t.byte " REG_SP "\n\t.byte " SZPTR "\n"
#else
	  "\t.byte 0x1b\n"			/* pcrel|sdata4 */
	  "\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH. */
#endif
	  "\t.byte 0x80+" REG_RA "\n\t.byte 0x1\n"
	  "\t.align " BSZPTR "\n"
	  "LECIEY:\n\n");
      fprintf(ctx->fp,
	  "_lj_vm_ffi_call.eh:\n"
	  "LSFDEY:\n"
	  "\t.set L$set$yy,LEFDEY-LASFDEY\n"
	  "\t.long L$set$yy\n"
	  "LASFDEY:\n"
	  "\t.long LASFDEY-EH_frame2\n"
	  "\t.long _lj_vm_ffi_call-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"				/* augmentation length */
#if LJ_64
	  "\t.byte 0xe\n\t.byte 16\n"		/* def_cfa_offset */
	  "\t.byte 0x86\n\t.byte 0x2\n"		/* offset rbp */
	  "\t.byte 0xd\n\t.uleb128 0x6\n"	/* def_cfa_register rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset rbx */
#else
	  "\t.byte 0xe\n\t.byte 8\n"		/* def_cfa_offset */
	  "\t.byte 0x84\n\t.byte 0x2\n"		/* offset ebp (4 for MACH-O)*/
	  "\t.byte 0xd\n\t.uleb128 0x4\n"	/* def_cfa_register ebp */
	  "\t.byte 0x83\n\t.byte 0x3\n"		/* offset ebx */
#endif
	  "\t.align " BSZPTR "\n"
	  "LEFDEY:\n\n", fcsize);
    }
#endif
#if LJ_64
    fprintf(ctx->fp, "\t.subsections_via_symbols\n");
#else
    fprintf(ctx->fp,
      "\t.non_lazy_symbol_pointer\n"
      "L_lj_err_unwind_dwarf$non_lazy_ptr:\n"
      ".indirect_symbol _lj_err_unwind_dwarf\n"
      ".long 0\n");
#endif
    }
    break;
  default:  /* Difficult for other modes. */
    break;
  }
}


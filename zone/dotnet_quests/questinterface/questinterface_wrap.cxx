/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_questinterface(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_questinterface(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_questinterface(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif



#include <string>
#include <list>
#include <any>
#include <set>
#include <vector>
#include <memory>
#include <iostream>

// init default values in constructors
#define GLM_FORCE_CTOR_INIT

// these included in math/ofVectorMath.h
// we declare some things manually, so some includes are commented out
#include "glm/vec2.hpp"
#include "glm/vec3.hpp"
#include "glm/vec4.hpp"

#include "../../../common/ruletypes.h"
#include "../../../common/eq_packet.h"
#include "../../../common/expedition_lockout_timer.h"
#include "../../../common/eqemu_logsys_log_aliases.h"
#include "../../../common/linked_list.h"


#include "../../common.h"
#include "../../entity.h"
#include "../../mob.h"
#include "../../merc.h"
#include "../../event_codes.h"
#include "../../npc.h"
#include "../../encounter.h"
#include "../../beacon.h"
#include "../../zone.h"
#include "../../client.h"
#include "../../corpse.h"
#include "../../doors.h"
#include "../../groups.h"
#include "../../object.h"
#include "../../raids.h"
#include "../../trap.h"
#include "../../spawn2.h"
#include "../../spawngroup.h"
#include "../../zonedb.h"
#include "../../worldserver.h"
#include "../../questmgr.h"


#include "../../../common/item_instance.h"
#include "../../../common/item_data.h"

#include "../../../common/eqemu_logsys.h"

void FreeVec4(glm::vec4* ptr) {
    delete ptr;
}

void FreeVec3(glm::vec3* ptr) {
    delete ptr;
}

using namespace EQ;
using namespace Logs;
using namespace glm;


#include <typeinfo>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <unordered_map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <string.h>


#include <memory>

SWIGINTERN NewSpawn_Struct *ListElement_Sl_NewSpawn_Struct_Sm__Sg__GetObject(ListElement< NewSpawn_Struct * > *self){
        return self->GetData();
    }
SWIGINTERN Spawn2 *ListElement_Sl_Spawn2_Sm__Sg__GetObject(ListElement< Spawn2 * > *self){
        return self->GetData();
    }
SWIGINTERN std::vector< std::any > *new_std_vector_Sl_std_any_Sg___SWIG_2(int capacity){
        std::vector< std::any >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::any >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::any std_vector_Sl_std_any_Sg__getitemcopy(std::vector< std::any > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::any >::value_type const &std_vector_Sl_std_any_Sg__getitem(std::vector< std::any > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__setitem(std::vector< std::any > *self,int index,std::any const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__AddRange(std::vector< std::any > *self,std::vector< std::any > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::any > *std_vector_Sl_std_any_Sg__GetRange(std::vector< std::any > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::any >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__Insert(std::vector< std::any > *self,int index,std::any const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__InsertRange(std::vector< std::any > *self,int index,std::vector< std::any > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__RemoveAt(std::vector< std::any > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__RemoveRange(std::vector< std::any > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::any > *std_vector_Sl_std_any_Sg__Repeat(std::any const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::any >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__Reverse__SWIG_0(std::vector< std::any > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__Reverse__SWIG_1(std::vector< std::any > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_any_Sg__SetRange(std::vector< std::any > *self,int index,std::vector< std::any > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< EQ::ItemInstance * > *new_std_vector_Sl_EQ_ItemInstance_Sm__Sg___SWIG_2(int capacity){
        std::vector< EQ::ItemInstance * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< EQ::ItemInstance * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN EQ::ItemInstance *std_vector_Sl_EQ_ItemInstance_Sm__Sg__getitemcopy(std::vector< EQ::ItemInstance * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< EQ::ItemInstance * >::value_type const &std_vector_Sl_EQ_ItemInstance_Sm__Sg__getitem(std::vector< EQ::ItemInstance * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__setitem(std::vector< EQ::ItemInstance * > *self,int index,EQ::ItemInstance *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__AddRange(std::vector< EQ::ItemInstance * > *self,std::vector< EQ::ItemInstance * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< EQ::ItemInstance * > *std_vector_Sl_EQ_ItemInstance_Sm__Sg__GetRange(std::vector< EQ::ItemInstance * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< EQ::ItemInstance * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__Insert(std::vector< EQ::ItemInstance * > *self,int index,EQ::ItemInstance *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__InsertRange(std::vector< EQ::ItemInstance * > *self,int index,std::vector< EQ::ItemInstance * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__RemoveAt(std::vector< EQ::ItemInstance * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__RemoveRange(std::vector< EQ::ItemInstance * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< EQ::ItemInstance * > *std_vector_Sl_EQ_ItemInstance_Sm__Sg__Repeat(EQ::ItemInstance *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< EQ::ItemInstance * >(count, value);
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__Reverse__SWIG_0(std::vector< EQ::ItemInstance * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__Reverse__SWIG_1(std::vector< EQ::ItemInstance * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_EQ_ItemInstance_Sm__Sg__SetRange(std::vector< EQ::ItemInstance * > *self,int index,std::vector< EQ::ItemInstance * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_EQ_ItemInstance_Sm__Sg__Contains(std::vector< EQ::ItemInstance * > *self,EQ::ItemInstance *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_EQ_ItemInstance_Sm__Sg__IndexOf(std::vector< EQ::ItemInstance * > *self,EQ::ItemInstance *const &value){
        int index = -1;
        std::vector< EQ::ItemInstance * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_EQ_ItemInstance_Sm__Sg__LastIndexOf(std::vector< EQ::ItemInstance * > *self,EQ::ItemInstance *const &value){
        int index = -1;
        std::vector< EQ::ItemInstance * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_EQ_ItemInstance_Sm__Sg__Remove(std::vector< EQ::ItemInstance * > *self,EQ::ItemInstance *const &value){
        std::vector< EQ::ItemInstance * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< Mob * > *new_std_vector_Sl_Mob_Sm__Sg___SWIG_2(int capacity){
        std::vector< Mob * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Mob * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Mob *std_vector_Sl_Mob_Sm__Sg__getitemcopy(std::vector< Mob * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< Mob * >::value_type const &std_vector_Sl_Mob_Sm__Sg__getitem(std::vector< Mob * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__setitem(std::vector< Mob * > *self,int index,Mob *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__AddRange(std::vector< Mob * > *self,std::vector< Mob * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Mob * > *std_vector_Sl_Mob_Sm__Sg__GetRange(std::vector< Mob * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Mob * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__Insert(std::vector< Mob * > *self,int index,Mob *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__InsertRange(std::vector< Mob * > *self,int index,std::vector< Mob * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__RemoveAt(std::vector< Mob * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__RemoveRange(std::vector< Mob * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Mob * > *std_vector_Sl_Mob_Sm__Sg__Repeat(Mob *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Mob * >(count, value);
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__Reverse__SWIG_0(std::vector< Mob * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__Reverse__SWIG_1(std::vector< Mob * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Mob_Sm__Sg__SetRange(std::vector< Mob * > *self,int index,std::vector< Mob * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_Mob_Sm__Sg__Contains(std::vector< Mob * > *self,Mob *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_Mob_Sm__Sg__IndexOf(std::vector< Mob * > *self,Mob *const &value){
        int index = -1;
        std::vector< Mob * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_Mob_Sm__Sg__LastIndexOf(std::vector< Mob * > *self,Mob *const &value){
        int index = -1;
        std::vector< Mob * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_Mob_Sm__Sg__Remove(std::vector< Mob * > *self,Mob *const &value){
        std::vector< Mob * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< EQApplicationPacket * > *new_std_vector_Sl_EQApplicationPacket_Sm__Sg___SWIG_2(int capacity){
        std::vector< EQApplicationPacket * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< EQApplicationPacket * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN EQApplicationPacket *std_vector_Sl_EQApplicationPacket_Sm__Sg__getitemcopy(std::vector< EQApplicationPacket * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< EQApplicationPacket * >::value_type const &std_vector_Sl_EQApplicationPacket_Sm__Sg__getitem(std::vector< EQApplicationPacket * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__setitem(std::vector< EQApplicationPacket * > *self,int index,EQApplicationPacket *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__AddRange(std::vector< EQApplicationPacket * > *self,std::vector< EQApplicationPacket * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< EQApplicationPacket * > *std_vector_Sl_EQApplicationPacket_Sm__Sg__GetRange(std::vector< EQApplicationPacket * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< EQApplicationPacket * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__Insert(std::vector< EQApplicationPacket * > *self,int index,EQApplicationPacket *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__InsertRange(std::vector< EQApplicationPacket * > *self,int index,std::vector< EQApplicationPacket * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__RemoveAt(std::vector< EQApplicationPacket * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__RemoveRange(std::vector< EQApplicationPacket * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< EQApplicationPacket * > *std_vector_Sl_EQApplicationPacket_Sm__Sg__Repeat(EQApplicationPacket *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< EQApplicationPacket * >(count, value);
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__Reverse__SWIG_0(std::vector< EQApplicationPacket * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__Reverse__SWIG_1(std::vector< EQApplicationPacket * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_EQApplicationPacket_Sm__Sg__SetRange(std::vector< EQApplicationPacket * > *self,int index,std::vector< EQApplicationPacket * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_EQApplicationPacket_Sm__Sg__Contains(std::vector< EQApplicationPacket * > *self,EQApplicationPacket *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_EQApplicationPacket_Sm__Sg__IndexOf(std::vector< EQApplicationPacket * > *self,EQApplicationPacket *const &value){
        int index = -1;
        std::vector< EQApplicationPacket * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_EQApplicationPacket_Sm__Sg__LastIndexOf(std::vector< EQApplicationPacket * > *self,EQApplicationPacket *const &value){
        int index = -1;
        std::vector< EQApplicationPacket * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_EQApplicationPacket_Sm__Sg__Remove(std::vector< EQApplicationPacket * > *self,EQApplicationPacket *const &value){
        std::vector< EQApplicationPacket * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::list< AltCurrencyDefinition_Struct >::const_reference std_list_Sl_AltCurrencyDefinition_Struct_Sg__getItem(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter){
      return **iter;
    }
SWIGINTERN void std_list_Sl_AltCurrencyDefinition_Struct_Sg__setItem(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter,AltCurrencyDefinition_Struct const &val){
      *(*iter) = val;
    }
SWIGINTERN std::list< AltCurrencyDefinition_Struct >::iterator *std_list_Sl_AltCurrencyDefinition_Struct_Sg__getFirstIter(std::list< AltCurrencyDefinition_Struct > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< AltCurrencyDefinition_Struct >::iterator(self->begin());
    }
SWIGINTERN std::list< AltCurrencyDefinition_Struct >::iterator *std_list_Sl_AltCurrencyDefinition_Struct_Sg__getLastIter(std::list< AltCurrencyDefinition_Struct > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< AltCurrencyDefinition_Struct >::iterator(--self->end());
    }
SWIGINTERN std::list< AltCurrencyDefinition_Struct >::iterator *std_list_Sl_AltCurrencyDefinition_Struct_Sg__getNextIter(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter){
      std::list< AltCurrencyDefinition_Struct >::iterator it = *iter;
      if (std::distance(it, --self->end()) != 0) {
        std::list< AltCurrencyDefinition_Struct >::iterator* itnext = new std::list< AltCurrencyDefinition_Struct >::iterator(++it);
        return itnext;
      }
      return NULL;
    }
SWIGINTERN std::list< AltCurrencyDefinition_Struct >::iterator *std_list_Sl_AltCurrencyDefinition_Struct_Sg__getPrevIter(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter){
      std::list< AltCurrencyDefinition_Struct >::iterator it = *iter;
      if (std::distance(self->begin(), it) != 0) {
        std::list< AltCurrencyDefinition_Struct >::iterator* itprev = new std::list< AltCurrencyDefinition_Struct >::iterator(--it);
        return itprev;
      }
      return NULL;
    }
SWIGINTERN std::list< AltCurrencyDefinition_Struct >::iterator *std_list_Sl_AltCurrencyDefinition_Struct_Sg__insertNode(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter,AltCurrencyDefinition_Struct const &value){
      std::list< AltCurrencyDefinition_Struct >::iterator it = self->insert(*iter, value);
      return new std::list< AltCurrencyDefinition_Struct >::iterator(it);
    }
SWIGINTERN void std_list_Sl_AltCurrencyDefinition_Struct_Sg__eraseIter(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter){
      std::list< AltCurrencyDefinition_Struct >::iterator it = *iter;
      self->erase(it);
    }
SWIGINTERN void std_list_Sl_AltCurrencyDefinition_Struct_Sg__deleteIter(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter){
      delete iter;
    }
SWIGINTERN bool std_list_Sl_AltCurrencyDefinition_Struct_Sg__equals(std::list< AltCurrencyDefinition_Struct > *self,std::list< AltCurrencyDefinition_Struct >::iterator *iter1,std::list< AltCurrencyDefinition_Struct >::iterator *iter2){
      if (iter1 == NULL && iter2 == NULL)
        return true;
      std::list< AltCurrencyDefinition_Struct >::iterator it1 = *iter1;
      std::list< AltCurrencyDefinition_Struct >::iterator it2 = *iter2;
      return it1 == it2;
    }
SWIGINTERN std::list< InternalVeteranReward >::const_reference std_list_Sl_InternalVeteranReward_Sg__getItem(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter){
      return **iter;
    }
SWIGINTERN void std_list_Sl_InternalVeteranReward_Sg__setItem(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter,InternalVeteranReward const &val){
      *(*iter) = val;
    }
SWIGINTERN std::list< InternalVeteranReward >::iterator *std_list_Sl_InternalVeteranReward_Sg__getFirstIter(std::list< InternalVeteranReward > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< InternalVeteranReward >::iterator(self->begin());
    }
SWIGINTERN std::list< InternalVeteranReward >::iterator *std_list_Sl_InternalVeteranReward_Sg__getLastIter(std::list< InternalVeteranReward > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< InternalVeteranReward >::iterator(--self->end());
    }
SWIGINTERN std::list< InternalVeteranReward >::iterator *std_list_Sl_InternalVeteranReward_Sg__getNextIter(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter){
      std::list< InternalVeteranReward >::iterator it = *iter;
      if (std::distance(it, --self->end()) != 0) {
        std::list< InternalVeteranReward >::iterator* itnext = new std::list< InternalVeteranReward >::iterator(++it);
        return itnext;
      }
      return NULL;
    }
SWIGINTERN std::list< InternalVeteranReward >::iterator *std_list_Sl_InternalVeteranReward_Sg__getPrevIter(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter){
      std::list< InternalVeteranReward >::iterator it = *iter;
      if (std::distance(self->begin(), it) != 0) {
        std::list< InternalVeteranReward >::iterator* itprev = new std::list< InternalVeteranReward >::iterator(--it);
        return itprev;
      }
      return NULL;
    }
SWIGINTERN std::list< InternalVeteranReward >::iterator *std_list_Sl_InternalVeteranReward_Sg__insertNode(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter,InternalVeteranReward const &value){
      std::list< InternalVeteranReward >::iterator it = self->insert(*iter, value);
      return new std::list< InternalVeteranReward >::iterator(it);
    }
SWIGINTERN void std_list_Sl_InternalVeteranReward_Sg__eraseIter(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter){
      std::list< InternalVeteranReward >::iterator it = *iter;
      self->erase(it);
    }
SWIGINTERN void std_list_Sl_InternalVeteranReward_Sg__deleteIter(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter){
      delete iter;
    }
SWIGINTERN bool std_list_Sl_InternalVeteranReward_Sg__equals(std::list< InternalVeteranReward > *self,std::list< InternalVeteranReward >::iterator *iter1,std::list< InternalVeteranReward >::iterator *iter2){
      if (iter1 == NULL && iter2 == NULL)
        return true;
      std::list< InternalVeteranReward >::iterator it1 = *iter1;
      std::list< InternalVeteranReward >::iterator it2 = *iter2;
      return it1 == it2;
    }
SWIGINTERN std::unordered_map< int,std::string >::mapped_type const &std_unordered_map_Sl_int_Sc_std_string_Sg__getitem(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string >::key_type const &key){
        std::unordered_map< int, std::string, std::hash< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_int_Sc_std_string_Sg__setitem(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string >::key_type const &key,std::unordered_map< int,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_int_Sc_std_string_Sg__ContainsKey(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string >::key_type const &key){
        std::unordered_map< int, std::string, std::hash< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_int_Sc_std_string_Sg__Add(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string >::key_type const &key,std::unordered_map< int,std::string >::mapped_type const &value){
        std::unordered_map< int, std::string, std::hash< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, std::string >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_int_Sc_std_string_Sg__Remove(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string >::key_type const &key){
        std::unordered_map< int, std::string, std::hash< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< int,std::string,std::hash< int > >::iterator *std_unordered_map_Sl_int_Sc_std_string_Sg__create_iterator_begin(std::unordered_map< int,std::string > *self){
        return new std::unordered_map< int, std::string, std::hash< int > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< int,std::string >::key_type const &std_unordered_map_Sl_int_Sc_std_string_Sg__get_next_key(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string,std::hash< int > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< int, std::string, std::hash< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_int_Sc_std_string_Sg__destroy_iterator(std::unordered_map< int,std::string > *self,std::unordered_map< int,std::string,std::hash< int > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< int,double >::mapped_type const &std_unordered_map_Sl_int_Sc_double_Sg__getitem(std::unordered_map< int,double > *self,std::unordered_map< int,double >::key_type const &key){
        std::unordered_map< int, double, std::hash< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_int_Sc_double_Sg__setitem(std::unordered_map< int,double > *self,std::unordered_map< int,double >::key_type const &key,std::unordered_map< int,double >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_int_Sc_double_Sg__ContainsKey(std::unordered_map< int,double > *self,std::unordered_map< int,double >::key_type const &key){
        std::unordered_map< int, double, std::hash< int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_int_Sc_double_Sg__Add(std::unordered_map< int,double > *self,std::unordered_map< int,double >::key_type const &key,std::unordered_map< int,double >::mapped_type const &value){
        std::unordered_map< int, double, std::hash< int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< int, double >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_int_Sc_double_Sg__Remove(std::unordered_map< int,double > *self,std::unordered_map< int,double >::key_type const &key){
        std::unordered_map< int, double, std::hash< int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< int,double,std::hash< int > >::iterator *std_unordered_map_Sl_int_Sc_double_Sg__create_iterator_begin(std::unordered_map< int,double > *self){
        return new std::unordered_map< int, double, std::hash< int > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< int,double >::key_type const &std_unordered_map_Sl_int_Sc_double_Sg__get_next_key(std::unordered_map< int,double > *self,std::unordered_map< int,double,std::hash< int > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< int, double, std::hash< int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_int_Sc_double_Sg__destroy_iterator(std::unordered_map< int,double > *self,std::unordered_map< int,double,std::hash< int > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned int,EXPModifier >::mapped_type const &std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__getitem(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier >::key_type const &key){
        std::unordered_map< unsigned int, EXPModifier, std::hash< unsigned int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__setitem(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier >::key_type const &key,std::unordered_map< unsigned int,EXPModifier >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__ContainsKey(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier >::key_type const &key){
        std::unordered_map< unsigned int, EXPModifier, std::hash< unsigned int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__Add(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier >::key_type const &key,std::unordered_map< unsigned int,EXPModifier >::mapped_type const &value){
        std::unordered_map< unsigned int, EXPModifier, std::hash< unsigned int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned int, EXPModifier >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__Remove(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier >::key_type const &key){
        std::unordered_map< unsigned int, EXPModifier, std::hash< unsigned int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__create_iterator_begin(std::unordered_map< unsigned int,EXPModifier > *self){
        return new std::unordered_map< unsigned int, EXPModifier, std::hash< unsigned int > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned int,EXPModifier >::key_type const &std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__get_next_key(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned int, EXPModifier, std::hash< unsigned int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__destroy_iterator(std::unordered_map< unsigned int,EXPModifier > *self,std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned int,NPCType * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__getitem(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType * >::key_type const &key){
        std::unordered_map< unsigned int, NPCType *, std::hash< unsigned int > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__setitem(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType * >::key_type const &key,std::unordered_map< unsigned int,NPCType * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__ContainsKey(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType * >::key_type const &key){
        std::unordered_map< unsigned int, NPCType *, std::hash< unsigned int > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__Add(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType * >::key_type const &key,std::unordered_map< unsigned int,NPCType * >::mapped_type const &value){
        std::unordered_map< unsigned int, NPCType *, std::hash< unsigned int > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned int, NPCType * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__Remove(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType * >::key_type const &key){
        std::unordered_map< unsigned int, NPCType *, std::hash< unsigned int > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned int,NPCType * > *self){
        return new std::unordered_map< unsigned int, NPCType *, std::hash< unsigned int > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned int,NPCType * >::key_type const &std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__get_next_key(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned int, NPCType *, std::hash< unsigned int > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__destroy_iterator(std::unordered_map< unsigned int,NPCType * > *self,std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Client * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__getitem(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client * >::key_type const &key){
        std::unordered_map< unsigned short, Client *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__setitem(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client * >::key_type const &key,std::unordered_map< unsigned short,Client * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client * >::key_type const &key){
        std::unordered_map< unsigned short, Client *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__Add(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client * >::key_type const &key,std::unordered_map< unsigned short,Client * >::mapped_type const &value){
        std::unordered_map< unsigned short, Client *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Client * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__Remove(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client * >::key_type const &key){
        std::unordered_map< unsigned short, Client *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Client * > *self){
        return new std::unordered_map< unsigned short, Client *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Client * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Client *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Client * > *self,std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Mob * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__getitem(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob * >::key_type const &key){
        std::unordered_map< unsigned short, Mob *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__setitem(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob * >::key_type const &key,std::unordered_map< unsigned short,Mob * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob * >::key_type const &key){
        std::unordered_map< unsigned short, Mob *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__Add(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob * >::key_type const &key,std::unordered_map< unsigned short,Mob * >::mapped_type const &value){
        std::unordered_map< unsigned short, Mob *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Mob * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__Remove(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob * >::key_type const &key){
        std::unordered_map< unsigned short, Mob *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Mob * > *self){
        return new std::unordered_map< unsigned short, Mob *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Mob * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Mob *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Mob * > *self,std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,NPC * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__getitem(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC * >::key_type const &key){
        std::unordered_map< unsigned short, NPC *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__setitem(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC * >::key_type const &key,std::unordered_map< unsigned short,NPC * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC * >::key_type const &key){
        std::unordered_map< unsigned short, NPC *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__Add(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC * >::key_type const &key,std::unordered_map< unsigned short,NPC * >::mapped_type const &value){
        std::unordered_map< unsigned short, NPC *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, NPC * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__Remove(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC * >::key_type const &key){
        std::unordered_map< unsigned short, NPC *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,NPC * > *self){
        return new std::unordered_map< unsigned short, NPC *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,NPC * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__get_next_key(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, NPC *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,NPC * > *self,std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Merc * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__getitem(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc * >::key_type const &key){
        std::unordered_map< unsigned short, Merc *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__setitem(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc * >::key_type const &key,std::unordered_map< unsigned short,Merc * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc * >::key_type const &key){
        std::unordered_map< unsigned short, Merc *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__Add(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc * >::key_type const &key,std::unordered_map< unsigned short,Merc * >::mapped_type const &value){
        std::unordered_map< unsigned short, Merc *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Merc * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__Remove(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc * >::key_type const &key){
        std::unordered_map< unsigned short, Merc *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Merc * > *self){
        return new std::unordered_map< unsigned short, Merc *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Merc * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Merc *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Merc * > *self,std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Corpse * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__getitem(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse * >::key_type const &key){
        std::unordered_map< unsigned short, Corpse *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__setitem(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse * >::key_type const &key,std::unordered_map< unsigned short,Corpse * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse * >::key_type const &key){
        std::unordered_map< unsigned short, Corpse *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__Add(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse * >::key_type const &key,std::unordered_map< unsigned short,Corpse * >::mapped_type const &value){
        std::unordered_map< unsigned short, Corpse *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Corpse * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__Remove(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse * >::key_type const &key){
        std::unordered_map< unsigned short, Corpse *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Corpse * > *self){
        return new std::unordered_map< unsigned short, Corpse *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Corpse * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Corpse *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Corpse * > *self,std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Object * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__getitem(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object * >::key_type const &key){
        std::unordered_map< unsigned short, Object *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__setitem(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object * >::key_type const &key,std::unordered_map< unsigned short,Object * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object * >::key_type const &key){
        std::unordered_map< unsigned short, Object *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__Add(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object * >::key_type const &key,std::unordered_map< unsigned short,Object * >::mapped_type const &value){
        std::unordered_map< unsigned short, Object *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Object * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__Remove(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object * >::key_type const &key){
        std::unordered_map< unsigned short, Object *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Object * > *self){
        return new std::unordered_map< unsigned short, Object *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Object * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Object *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Object * > *self,std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Doors * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__getitem(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors * >::key_type const &key){
        std::unordered_map< unsigned short, Doors *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__setitem(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors * >::key_type const &key,std::unordered_map< unsigned short,Doors * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors * >::key_type const &key){
        std::unordered_map< unsigned short, Doors *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__Add(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors * >::key_type const &key,std::unordered_map< unsigned short,Doors * >::mapped_type const &value){
        std::unordered_map< unsigned short, Doors *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Doors * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__Remove(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors * >::key_type const &key){
        std::unordered_map< unsigned short, Doors *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Doors * > *self){
        return new std::unordered_map< unsigned short, Doors *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Doors * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Doors *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Doors * > *self,std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Trap * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__getitem(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap * >::key_type const &key){
        std::unordered_map< unsigned short, Trap *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__setitem(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap * >::key_type const &key,std::unordered_map< unsigned short,Trap * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap * >::key_type const &key){
        std::unordered_map< unsigned short, Trap *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__Add(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap * >::key_type const &key,std::unordered_map< unsigned short,Trap * >::mapped_type const &value){
        std::unordered_map< unsigned short, Trap *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Trap * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__Remove(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap * >::key_type const &key){
        std::unordered_map< unsigned short, Trap *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Trap * > *self){
        return new std::unordered_map< unsigned short, Trap *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Trap * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Trap *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Trap * > *self,std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Beacon * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__getitem(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon * >::key_type const &key){
        std::unordered_map< unsigned short, Beacon *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__setitem(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon * >::key_type const &key,std::unordered_map< unsigned short,Beacon * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon * >::key_type const &key){
        std::unordered_map< unsigned short, Beacon *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__Add(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon * >::key_type const &key,std::unordered_map< unsigned short,Beacon * >::mapped_type const &value){
        std::unordered_map< unsigned short, Beacon *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Beacon * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__Remove(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon * >::key_type const &key){
        std::unordered_map< unsigned short, Beacon *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Beacon * > *self){
        return new std::unordered_map< unsigned short, Beacon *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Beacon * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Beacon *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Beacon * > *self,std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::unordered_map< unsigned short,Encounter * >::mapped_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__getitem(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter * >::key_type const &key){
        std::unordered_map< unsigned short, Encounter *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__setitem(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter * >::key_type const &key,std::unordered_map< unsigned short,Encounter * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__ContainsKey(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter * >::key_type const &key){
        std::unordered_map< unsigned short, Encounter *, std::hash< unsigned short > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__Add(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter * >::key_type const &key,std::unordered_map< unsigned short,Encounter * >::mapped_type const &value){
        std::unordered_map< unsigned short, Encounter *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< unsigned short, Encounter * >(key, value));
      }
SWIGINTERN bool std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__Remove(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter * >::key_type const &key){
        std::unordered_map< unsigned short, Encounter *, std::hash< unsigned short > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__create_iterator_begin(std::unordered_map< unsigned short,Encounter * > *self){
        return new std::unordered_map< unsigned short, Encounter *, std::hash< unsigned short > >::iterator(self->begin());
      }
SWIGINTERN std::unordered_map< unsigned short,Encounter * >::key_type const &std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__get_next_key(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        std::unordered_map< unsigned short, Encounter *, std::hash< unsigned short > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__destroy_iterator(std::unordered_map< unsigned short,Encounter * > *self,std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *swigiterator){
        (void)self;
        delete swigiterator;
      }
SWIGINTERN std::list< NPC * >::const_reference std_list_Sl_NPC_Sm__Sg__getItem(std::list< NPC * > *self,std::list< NPC * >::iterator *iter){
      return **iter;
    }
SWIGINTERN void std_list_Sl_NPC_Sm__Sg__setItem(std::list< NPC * > *self,std::list< NPC * >::iterator *iter,NPC *const &val){
      *(*iter) = val;
    }
SWIGINTERN std::list< NPC * >::iterator *std_list_Sl_NPC_Sm__Sg__getFirstIter(std::list< NPC * > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< NPC * >::iterator(self->begin());
    }
SWIGINTERN std::list< NPC * >::iterator *std_list_Sl_NPC_Sm__Sg__getLastIter(std::list< NPC * > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< NPC * >::iterator(--self->end());
    }
SWIGINTERN std::list< NPC * >::iterator *std_list_Sl_NPC_Sm__Sg__getNextIter(std::list< NPC * > *self,std::list< NPC * >::iterator *iter){
      std::list< NPC * >::iterator it = *iter;
      if (std::distance(it, --self->end()) != 0) {
        std::list< NPC * >::iterator* itnext = new std::list< NPC * >::iterator(++it);
        return itnext;
      }
      return NULL;
    }
SWIGINTERN std::list< NPC * >::iterator *std_list_Sl_NPC_Sm__Sg__getPrevIter(std::list< NPC * > *self,std::list< NPC * >::iterator *iter){
      std::list< NPC * >::iterator it = *iter;
      if (std::distance(self->begin(), it) != 0) {
        std::list< NPC * >::iterator* itprev = new std::list< NPC * >::iterator(--it);
        return itprev;
      }
      return NULL;
    }
SWIGINTERN std::list< NPC * >::iterator *std_list_Sl_NPC_Sm__Sg__insertNode(std::list< NPC * > *self,std::list< NPC * >::iterator *iter,NPC *const &value){
      std::list< NPC * >::iterator it = self->insert(*iter, value);
      return new std::list< NPC * >::iterator(it);
    }
SWIGINTERN void std_list_Sl_NPC_Sm__Sg__eraseIter(std::list< NPC * > *self,std::list< NPC * >::iterator *iter){
      std::list< NPC * >::iterator it = *iter;
      self->erase(it);
    }
SWIGINTERN void std_list_Sl_NPC_Sm__Sg__deleteIter(std::list< NPC * > *self,std::list< NPC * >::iterator *iter){
      delete iter;
    }
SWIGINTERN bool std_list_Sl_NPC_Sm__Sg__equals(std::list< NPC * > *self,std::list< NPC * >::iterator *iter1,std::list< NPC * >::iterator *iter2){
      if (iter1 == NULL && iter2 == NULL)
        return true;
      std::list< NPC * >::iterator it1 = *iter1;
      std::list< NPC * >::iterator it2 = *iter2;
      return it1 == it2;
    }
SWIGINTERN bool std_list_Sl_NPC_Sm__Sg__Contains(std::list< NPC * > *self,NPC *const &value){
      return std::find(self->begin(), self->end(), value) != self->end();
    }
SWIGINTERN bool std_list_Sl_NPC_Sm__Sg__Remove(std::list< NPC * > *self,NPC *const &value){
      std::list< NPC * >::iterator it = std::find(self->begin(), self->end(), value);
      if (it != self->end()) {
        self->erase(it);
        return true;
      }
      return false;
    }
SWIGINTERN std::list< NPC * >::iterator *std_list_Sl_NPC_Sm__Sg__find(std::list< NPC * > *self,NPC *const &value){
      if (std::find(self->begin(), self->end(), value) != self->end()) {
        return new std::list< NPC * >::iterator(std::find(self->begin(), self->end(), value));
      }
      return NULL;
    }
SWIGINTERN std::list< Group * >::const_reference std_list_Sl_Group_Sm__Sg__getItem(std::list< Group * > *self,std::list< Group * >::iterator *iter){
      return **iter;
    }
SWIGINTERN void std_list_Sl_Group_Sm__Sg__setItem(std::list< Group * > *self,std::list< Group * >::iterator *iter,Group *const &val){
      *(*iter) = val;
    }
SWIGINTERN std::list< Group * >::iterator *std_list_Sl_Group_Sm__Sg__getFirstIter(std::list< Group * > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< Group * >::iterator(self->begin());
    }
SWIGINTERN std::list< Group * >::iterator *std_list_Sl_Group_Sm__Sg__getLastIter(std::list< Group * > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< Group * >::iterator(--self->end());
    }
SWIGINTERN std::list< Group * >::iterator *std_list_Sl_Group_Sm__Sg__getNextIter(std::list< Group * > *self,std::list< Group * >::iterator *iter){
      std::list< Group * >::iterator it = *iter;
      if (std::distance(it, --self->end()) != 0) {
        std::list< Group * >::iterator* itnext = new std::list< Group * >::iterator(++it);
        return itnext;
      }
      return NULL;
    }
SWIGINTERN std::list< Group * >::iterator *std_list_Sl_Group_Sm__Sg__getPrevIter(std::list< Group * > *self,std::list< Group * >::iterator *iter){
      std::list< Group * >::iterator it = *iter;
      if (std::distance(self->begin(), it) != 0) {
        std::list< Group * >::iterator* itprev = new std::list< Group * >::iterator(--it);
        return itprev;
      }
      return NULL;
    }
SWIGINTERN std::list< Group * >::iterator *std_list_Sl_Group_Sm__Sg__insertNode(std::list< Group * > *self,std::list< Group * >::iterator *iter,Group *const &value){
      std::list< Group * >::iterator it = self->insert(*iter, value);
      return new std::list< Group * >::iterator(it);
    }
SWIGINTERN void std_list_Sl_Group_Sm__Sg__eraseIter(std::list< Group * > *self,std::list< Group * >::iterator *iter){
      std::list< Group * >::iterator it = *iter;
      self->erase(it);
    }
SWIGINTERN void std_list_Sl_Group_Sm__Sg__deleteIter(std::list< Group * > *self,std::list< Group * >::iterator *iter){
      delete iter;
    }
SWIGINTERN bool std_list_Sl_Group_Sm__Sg__equals(std::list< Group * > *self,std::list< Group * >::iterator *iter1,std::list< Group * >::iterator *iter2){
      if (iter1 == NULL && iter2 == NULL)
        return true;
      std::list< Group * >::iterator it1 = *iter1;
      std::list< Group * >::iterator it2 = *iter2;
      return it1 == it2;
    }
SWIGINTERN bool std_list_Sl_Group_Sm__Sg__Contains(std::list< Group * > *self,Group *const &value){
      return std::find(self->begin(), self->end(), value) != self->end();
    }
SWIGINTERN bool std_list_Sl_Group_Sm__Sg__Remove(std::list< Group * > *self,Group *const &value){
      std::list< Group * >::iterator it = std::find(self->begin(), self->end(), value);
      if (it != self->end()) {
        self->erase(it);
        return true;
      }
      return false;
    }
SWIGINTERN std::list< Group * >::iterator *std_list_Sl_Group_Sm__Sg__find(std::list< Group * > *self,Group *const &value){
      if (std::find(self->begin(), self->end(), value) != self->end()) {
        return new std::list< Group * >::iterator(std::find(self->begin(), self->end(), value));
      }
      return NULL;
    }
SWIGINTERN std::list< Raid * >::const_reference std_list_Sl_Raid_Sm__Sg__getItem(std::list< Raid * > *self,std::list< Raid * >::iterator *iter){
      return **iter;
    }
SWIGINTERN void std_list_Sl_Raid_Sm__Sg__setItem(std::list< Raid * > *self,std::list< Raid * >::iterator *iter,Raid *const &val){
      *(*iter) = val;
    }
SWIGINTERN std::list< Raid * >::iterator *std_list_Sl_Raid_Sm__Sg__getFirstIter(std::list< Raid * > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< Raid * >::iterator(self->begin());
    }
SWIGINTERN std::list< Raid * >::iterator *std_list_Sl_Raid_Sm__Sg__getLastIter(std::list< Raid * > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< Raid * >::iterator(--self->end());
    }
SWIGINTERN std::list< Raid * >::iterator *std_list_Sl_Raid_Sm__Sg__getNextIter(std::list< Raid * > *self,std::list< Raid * >::iterator *iter){
      std::list< Raid * >::iterator it = *iter;
      if (std::distance(it, --self->end()) != 0) {
        std::list< Raid * >::iterator* itnext = new std::list< Raid * >::iterator(++it);
        return itnext;
      }
      return NULL;
    }
SWIGINTERN std::list< Raid * >::iterator *std_list_Sl_Raid_Sm__Sg__getPrevIter(std::list< Raid * > *self,std::list< Raid * >::iterator *iter){
      std::list< Raid * >::iterator it = *iter;
      if (std::distance(self->begin(), it) != 0) {
        std::list< Raid * >::iterator* itprev = new std::list< Raid * >::iterator(--it);
        return itprev;
      }
      return NULL;
    }
SWIGINTERN std::list< Raid * >::iterator *std_list_Sl_Raid_Sm__Sg__insertNode(std::list< Raid * > *self,std::list< Raid * >::iterator *iter,Raid *const &value){
      std::list< Raid * >::iterator it = self->insert(*iter, value);
      return new std::list< Raid * >::iterator(it);
    }
SWIGINTERN void std_list_Sl_Raid_Sm__Sg__eraseIter(std::list< Raid * > *self,std::list< Raid * >::iterator *iter){
      std::list< Raid * >::iterator it = *iter;
      self->erase(it);
    }
SWIGINTERN void std_list_Sl_Raid_Sm__Sg__deleteIter(std::list< Raid * > *self,std::list< Raid * >::iterator *iter){
      delete iter;
    }
SWIGINTERN bool std_list_Sl_Raid_Sm__Sg__equals(std::list< Raid * > *self,std::list< Raid * >::iterator *iter1,std::list< Raid * >::iterator *iter2){
      if (iter1 == NULL && iter2 == NULL)
        return true;
      std::list< Raid * >::iterator it1 = *iter1;
      std::list< Raid * >::iterator it2 = *iter2;
      return it1 == it2;
    }
SWIGINTERN bool std_list_Sl_Raid_Sm__Sg__Contains(std::list< Raid * > *self,Raid *const &value){
      return std::find(self->begin(), self->end(), value) != self->end();
    }
SWIGINTERN bool std_list_Sl_Raid_Sm__Sg__Remove(std::list< Raid * > *self,Raid *const &value){
      std::list< Raid * >::iterator it = std::find(self->begin(), self->end(), value);
      if (it != self->end()) {
        self->erase(it);
        return true;
      }
      return false;
    }
SWIGINTERN std::list< Raid * >::iterator *std_list_Sl_Raid_Sm__Sg__find(std::list< Raid * > *self,Raid *const &value){
      if (std::find(self->begin(), self->end(), value) != self->end()) {
        return new std::list< Raid * >::iterator(std::find(self->begin(), self->end(), value));
      }
      return NULL;
    }
SWIGINTERN std::list< Area >::const_reference std_list_Sl_Area_Sg__getItem(std::list< Area > *self,std::list< Area >::iterator *iter){
      return **iter;
    }
SWIGINTERN void std_list_Sl_Area_Sg__setItem(std::list< Area > *self,std::list< Area >::iterator *iter,Area const &val){
      *(*iter) = val;
    }
SWIGINTERN std::list< Area >::iterator *std_list_Sl_Area_Sg__getFirstIter(std::list< Area > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< Area >::iterator(self->begin());
    }
SWIGINTERN std::list< Area >::iterator *std_list_Sl_Area_Sg__getLastIter(std::list< Area > *self){
      if (self->size() == 0)
        return NULL;
      return new std::list< Area >::iterator(--self->end());
    }
SWIGINTERN std::list< Area >::iterator *std_list_Sl_Area_Sg__getNextIter(std::list< Area > *self,std::list< Area >::iterator *iter){
      std::list< Area >::iterator it = *iter;
      if (std::distance(it, --self->end()) != 0) {
        std::list< Area >::iterator* itnext = new std::list< Area >::iterator(++it);
        return itnext;
      }
      return NULL;
    }
SWIGINTERN std::list< Area >::iterator *std_list_Sl_Area_Sg__getPrevIter(std::list< Area > *self,std::list< Area >::iterator *iter){
      std::list< Area >::iterator it = *iter;
      if (std::distance(self->begin(), it) != 0) {
        std::list< Area >::iterator* itprev = new std::list< Area >::iterator(--it);
        return itprev;
      }
      return NULL;
    }
SWIGINTERN std::list< Area >::iterator *std_list_Sl_Area_Sg__insertNode(std::list< Area > *self,std::list< Area >::iterator *iter,Area const &value){
      std::list< Area >::iterator it = self->insert(*iter, value);
      return new std::list< Area >::iterator(it);
    }
SWIGINTERN void std_list_Sl_Area_Sg__eraseIter(std::list< Area > *self,std::list< Area >::iterator *iter){
      std::list< Area >::iterator it = *iter;
      self->erase(it);
    }
SWIGINTERN void std_list_Sl_Area_Sg__deleteIter(std::list< Area > *self,std::list< Area >::iterator *iter){
      delete iter;
    }
SWIGINTERN bool std_list_Sl_Area_Sg__equals(std::list< Area > *self,std::list< Area >::iterator *iter1,std::list< Area >::iterator *iter2){
      if (iter1 == NULL && iter2 == NULL)
        return true;
      std::list< Area >::iterator it1 = *iter1;
      std::list< Area >::iterator it2 = *iter2;
      return it1 == it2;
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_FreeVec4(void * jarg1) {
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  
  arg1 = (glm::vec4 *)jarg1; 
  FreeVec4(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeVec3(void * jarg1) {
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  
  arg1 = (glm::vec3 *)jarg1; 
  FreeVec3(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec2_x_set(void * jarg1, float jarg2) {
  glm::vec2 *arg1 = (glm::vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec2_x_get(void * jarg1) {
  float jresult ;
  glm::vec2 *arg1 = (glm::vec2 *) 0 ;
  float result;
  
  arg1 = (glm::vec2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec2_y_set(void * jarg1, float jarg2) {
  glm::vec2 *arg1 = (glm::vec2 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec2_y_get(void * jarg1) {
  float jresult ;
  glm::vec2 *arg1 = (glm::vec2 *) 0 ;
  float result;
  
  arg1 = (glm::vec2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vec2_length() {
  int jresult ;
  glm::length_t result;
  
  result = (glm::length_t)glm::vec2::length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2__SWIG_0() {
  void * jresult ;
  glm::vec2 *result = 0 ;
  
  result = (glm::vec2 *)new glm::vec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2__SWIG_1(void * jarg1) {
  void * jresult ;
  glm::vec2 *arg1 = 0 ;
  glm::vec2 *result = 0 ;
  
  arg1 = (glm::vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  result = (glm::vec2 *)new glm::vec2((glm::vec2 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  glm::vec2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (glm::vec2 *)new glm::vec2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2__SWIG_3(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  glm::vec2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (glm::vec2 *)new glm::vec2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2__SWIG_4(void * jarg1) {
  void * jresult ;
  glm::vec3 *arg1 = 0 ;
  glm::vec2 *result = 0 ;
  
  arg1 = (glm::vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (glm::vec2 *)new glm::vec2((glm::vec3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec2__SWIG_5(void * jarg1) {
  void * jresult ;
  glm::vec4 *arg1 = 0 ;
  glm::vec2 *result = 0 ;
  
  arg1 = (glm::vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (glm::vec2 *)new glm::vec2((glm::vec4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vec2(void * jarg1) {
  glm::vec2 *arg1 = (glm::vec2 *) 0 ;
  
  arg1 = (glm::vec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec3_x_set(void * jarg1, float jarg2) {
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec3_x_get(void * jarg1) {
  float jresult ;
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  float result;
  
  arg1 = (glm::vec3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec3_y_set(void * jarg1, float jarg2) {
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec3_y_get(void * jarg1) {
  float jresult ;
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  float result;
  
  arg1 = (glm::vec3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec3_z_set(void * jarg1, float jarg2) {
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec3_z_get(void * jarg1) {
  float jresult ;
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  float result;
  
  arg1 = (glm::vec3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vec3_length() {
  int jresult ;
  glm::length_t result;
  
  result = (glm::length_t)glm::vec3::length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_0() {
  void * jresult ;
  glm::vec3 *result = 0 ;
  
  result = (glm::vec3 *)new glm::vec3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_1(void * jarg1) {
  void * jresult ;
  glm::vec3 *arg1 = 0 ;
  glm::vec3 *result = 0 ;
  
  arg1 = (glm::vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (glm::vec3 *)new glm::vec3((glm::vec3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  glm::vec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (glm::vec3 *)new glm::vec3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  glm::vec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (glm::vec3 *)new glm::vec3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_4(void * jarg1, float jarg2) {
  void * jresult ;
  glm::vec2 *arg1 = 0 ;
  float arg2 ;
  glm::vec3 *result = 0 ;
  
  arg1 = (glm::vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (glm::vec3 *)new glm::vec3((glm::vec2 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_5(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  glm::vec2 *arg2 = 0 ;
  glm::vec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (glm::vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  result = (glm::vec3 *)new glm::vec3(arg1,(glm::vec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec3__SWIG_6(void * jarg1) {
  void * jresult ;
  glm::vec4 *arg1 = 0 ;
  glm::vec3 *result = 0 ;
  
  arg1 = (glm::vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (glm::vec3 *)new glm::vec3((glm::vec4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vec3(void * jarg1) {
  glm::vec3 *arg1 = (glm::vec3 *) 0 ;
  
  arg1 = (glm::vec3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_x_set(void * jarg1, float jarg2) {
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_x_get(void * jarg1) {
  float jresult ;
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float result;
  
  arg1 = (glm::vec4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_y_set(void * jarg1, float jarg2) {
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_y_get(void * jarg1) {
  float jresult ;
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float result;
  
  arg1 = (glm::vec4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_z_set(void * jarg1, float jarg2) {
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_z_get(void * jarg1) {
  float jresult ;
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float result;
  
  arg1 = (glm::vec4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_vec4_w_set(void * jarg1, float jarg2) {
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float arg2 ;
  
  arg1 = (glm::vec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_vec4_w_get(void * jarg1) {
  float jresult ;
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  float result;
  
  arg1 = (glm::vec4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_vec4_length() {
  int jresult ;
  glm::length_t result;
  
  result = (glm::length_t)glm::vec4::length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_0() {
  void * jresult ;
  glm::vec4 *result = 0 ;
  
  result = (glm::vec4 *)new glm::vec4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_1(void * jarg1) {
  void * jresult ;
  glm::vec4 *arg1 = 0 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (glm::vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (glm::vec4 *)new glm::vec4((glm::vec4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (glm::vec4 *)new glm::vec4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (glm::vec4 *)new glm::vec4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  glm::vec2 *arg1 = 0 ;
  glm::vec2 *arg2 = 0 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (glm::vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  arg2 = (glm::vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  result = (glm::vec4 *)new glm::vec4((glm::vec2 const &)*arg1,(glm::vec2 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_5(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  glm::vec2 *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (glm::vec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (glm::vec4 *)new glm::vec4((glm::vec2 const &)*arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_6(float jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  glm::vec2 *arg2 = 0 ;
  float arg3 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (glm::vec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (glm::vec4 *)new glm::vec4(arg1,(glm::vec2 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_7(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  glm::vec2 *arg3 = 0 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (glm::vec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec2 const & is null", 0);
    return 0;
  } 
  result = (glm::vec4 *)new glm::vec4(arg1,arg2,(glm::vec2 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_8(void * jarg1, float jarg2) {
  void * jresult ;
  glm::vec3 *arg1 = 0 ;
  float arg2 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (glm::vec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (glm::vec4 *)new glm::vec4((glm::vec3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_vec4__SWIG_9(float jarg1, void * jarg2) {
  void * jresult ;
  float arg1 ;
  glm::vec3 *arg2 = 0 ;
  glm::vec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (glm::vec4 *)new glm::vec4(arg1,(glm::vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_vec4(void * jarg1) {
  glm::vec4 *arg1 = (glm::vec4 *) 0 ;
  
  arg1 = (glm::vec4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQPacket(void * jarg1) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQPacket_Size(void * jarg1) {
  unsigned int jresult ;
  EQPacket *arg1 = (EQPacket *) 0 ;
  uint32 result;
  
  arg1 = (EQPacket *)jarg1; 
  result = (uint32)((EQPacket const *)arg1)->Size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_build_raw_header_dump__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16)jarg3; 
  ((EQPacket const *)arg1)->build_raw_header_dump(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_build_raw_header_dump__SWIG_1(void * jarg1, char * jarg2) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQPacket const *)arg1)->build_raw_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_build_header_dump(void * jarg1, char * jarg2) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQPacket const *)arg1)->build_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_DumpRawHeader__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQPacket const *)arg1)->DumpRawHeader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_DumpRawHeader__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQPacket const *)arg1)->DumpRawHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_DumpRawHeader__SWIG_2(void * jarg1) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  ((EQPacket const *)arg1)->DumpRawHeader();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_DumpRawHeaderNoTime__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQPacket const *)arg1)->DumpRawHeaderNoTime(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_DumpRawHeaderNoTime__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQPacket const *)arg1)->DumpRawHeaderNoTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_DumpRawHeaderNoTime__SWIG_2(void * jarg1) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  
  arg1 = (EQPacket *)jarg1; 
  ((EQPacket const *)arg1)->DumpRawHeaderNoTime();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPacket_SetOpcode(void * jarg1, void * jarg2) {
  EQPacket *arg1 = (EQPacket *) 0 ;
  EmuOpcode arg2 ;
  EmuOpcode *argp2 ;
  
  arg1 = (EQPacket *)jarg1; 
  argp2 = (EmuOpcode *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuOpcode", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetOpcode(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPacket_GetOpcode(void * jarg1) {
  void * jresult ;
  EQPacket *arg1 = (EQPacket *) 0 ;
  EmuOpcode result;
  
  arg1 = (EQPacket *)jarg1; 
  result = ((EQPacket const *)arg1)->GetOpcode();
  jresult = new EmuOpcode(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQProtocolPacket(unsigned short jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  uint16 arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  uint32 arg3 ;
  EQProtocolPacket *result = 0 ;
  
  arg1 = (uint16)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (EQProtocolPacket *)new EQProtocolPacket(arg1,(unsigned char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQProtocolPacket_combine(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  EQProtocolPacket *arg2 = (EQProtocolPacket *) 0 ;
  bool result;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (EQProtocolPacket *)jarg2; 
  result = (bool)(arg1)->combine((EQProtocolPacket const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQProtocolPacket_serialize(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  uint32 result;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  result = (uint32)((EQProtocolPacket const *)arg1)->serialize(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQProtocolPacket_Copy(void * jarg1) {
  void * jresult ;
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  EQProtocolPacket *result = 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  result = (EQProtocolPacket *)(arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQProtocolPacket_MakeAppPacket(void * jarg1) {
  void * jresult ;
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  EQRawApplicationPacket *result = 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  result = (EQRawApplicationPacket *)((EQProtocolPacket const *)arg1)->MakeAppPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_acked_set(void * jarg1, unsigned int jarg2) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  bool arg2 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->acked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQProtocolPacket_acked_get(void * jarg1) {
  unsigned int jresult ;
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  bool result;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  result = (bool) ((arg1)->acked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_sent_time_set(void * jarg1, unsigned int jarg2) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->sent_time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQProtocolPacket_sent_time_get(void * jarg1) {
  unsigned int jresult ;
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  uint32 result;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  result = (uint32) ((arg1)->sent_time);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_build_raw_header_dump__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16)jarg3; 
  ((EQProtocolPacket const *)arg1)->build_raw_header_dump(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_build_raw_header_dump__SWIG_1(void * jarg1, char * jarg2) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQProtocolPacket const *)arg1)->build_raw_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_build_header_dump(void * jarg1, char * jarg2) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQProtocolPacket const *)arg1)->build_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_DumpRawHeader__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQProtocolPacket const *)arg1)->DumpRawHeader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_DumpRawHeader__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQProtocolPacket const *)arg1)->DumpRawHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_DumpRawHeader__SWIG_2(void * jarg1) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  ((EQProtocolPacket const *)arg1)->DumpRawHeader();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_DumpRawHeaderNoTime__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQProtocolPacket const *)arg1)->DumpRawHeaderNoTime(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_DumpRawHeaderNoTime__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQProtocolPacket const *)arg1)->DumpRawHeaderNoTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQProtocolPacket_DumpRawHeaderNoTime__SWIG_2(void * jarg1) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  ((EQProtocolPacket const *)arg1)->DumpRawHeaderNoTime();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQProtocolPacket(void * jarg1) {
  EQProtocolPacket *arg1 = (EQProtocolPacket *) 0 ;
  
  arg1 = (EQProtocolPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQApplicationPacket__SWIG_0() {
  void * jresult ;
  EQApplicationPacket *result = 0 ;
  
  result = (EQApplicationPacket *)new EQApplicationPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQApplicationPacket__SWIG_1(void * jarg1) {
  void * jresult ;
  EmuOpcode arg1 ;
  EmuOpcode const *argp1 ;
  EQApplicationPacket *result = 0 ;
  
  argp1 = (EmuOpcode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuOpcode const", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (EQApplicationPacket *)new EQApplicationPacket(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQApplicationPacket__SWIG_2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EmuOpcode arg1 ;
  uint32 arg2 ;
  EmuOpcode const *argp1 ;
  EQApplicationPacket *result = 0 ;
  
  argp1 = (EmuOpcode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuOpcode const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (uint32)jarg2; 
  result = (EQApplicationPacket *)new EQApplicationPacket(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQApplicationPacket__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  EmuOpcode arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  uint32 arg3 ;
  EmuOpcode const *argp1 ;
  EQApplicationPacket *result = 0 ;
  
  argp1 = (EmuOpcode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuOpcode const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (EQApplicationPacket *)new EQApplicationPacket(arg1,(unsigned char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQApplicationPacket__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  EmuOpcode arg1 ;
  SerializeBuffer *arg2 = 0 ;
  EmuOpcode const *argp1 ;
  EQApplicationPacket *result = 0 ;
  
  argp1 = (EmuOpcode *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuOpcode const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (SerializeBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SerializeBuffer & is null", 0);
    return 0;
  } 
  result = (EQApplicationPacket *)new EQApplicationPacket(arg1,*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQApplicationPacket_serialize(void * jarg1, unsigned short jarg2, void * jarg3) {
  unsigned int jresult ;
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  uint32 result;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (unsigned char *)jarg3; 
  result = (uint32)((EQApplicationPacket const *)arg1)->serialize(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQApplicationPacket_Size(void * jarg1) {
  unsigned int jresult ;
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint32 result;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  result = (uint32)((EQApplicationPacket const *)arg1)->Size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQApplicationPacket_Copy(void * jarg1) {
  void * jresult ;
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  EQApplicationPacket *result = 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  result = (EQApplicationPacket *)((EQApplicationPacket const *)arg1)->Copy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_build_raw_header_dump__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16)jarg3; 
  ((EQApplicationPacket const *)arg1)->build_raw_header_dump(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_build_raw_header_dump__SWIG_1(void * jarg1, char * jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQApplicationPacket const *)arg1)->build_raw_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_build_header_dump(void * jarg1, char * jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQApplicationPacket const *)arg1)->build_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_DumpRawHeader__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQApplicationPacket const *)arg1)->DumpRawHeader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_DumpRawHeader__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQApplicationPacket const *)arg1)->DumpRawHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_DumpRawHeader__SWIG_2(void * jarg1) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  ((EQApplicationPacket const *)arg1)->DumpRawHeader();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_DumpRawHeaderNoTime__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQApplicationPacket const *)arg1)->DumpRawHeaderNoTime(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_DumpRawHeaderNoTime__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQApplicationPacket const *)arg1)->DumpRawHeaderNoTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_DumpRawHeaderNoTime__SWIG_2(void * jarg1) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  ((EQApplicationPacket const *)arg1)->DumpRawHeaderNoTime();
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQApplicationPacket_GetOpcodeBypass(void * jarg1) {
  unsigned short jresult ;
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 result;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  result = (uint16)((EQApplicationPacket const *)arg1)->GetOpcodeBypass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_SetOpcodeBypass(void * jarg1, unsigned short jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetOpcodeBypass(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQApplicationPacket_GetProtocolOpcode(void * jarg1) {
  unsigned short jresult ;
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 result;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  result = (uint16)((EQApplicationPacket const *)arg1)->GetProtocolOpcode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQApplicationPacket_SetProtocolOpcode(void * jarg1, unsigned short jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetProtocolOpcode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQApplicationPacket(void * jarg1) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQRawApplicationPacket(unsigned short jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  uint16 arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  uint32 arg3 ;
  EQRawApplicationPacket *result = 0 ;
  
  arg1 = (uint16)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (EQRawApplicationPacket *)new EQRawApplicationPacket(arg1,(unsigned char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQRawApplicationPacket_GetRawOpcode(void * jarg1) {
  unsigned short jresult ;
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  uint16 result;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  result = (uint16)((EQRawApplicationPacket const *)arg1)->GetRawOpcode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_build_raw_header_dump__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16)jarg3; 
  ((EQRawApplicationPacket const *)arg1)->build_raw_header_dump(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_build_raw_header_dump__SWIG_1(void * jarg1, char * jarg2) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQRawApplicationPacket const *)arg1)->build_raw_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_build_header_dump(void * jarg1, char * jarg2) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (char *)jarg2; 
  ((EQRawApplicationPacket const *)arg1)->build_header_dump(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_DumpRawHeader__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQRawApplicationPacket const *)arg1)->DumpRawHeader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_DumpRawHeader__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQRawApplicationPacket const *)arg1)->DumpRawHeader(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_DumpRawHeader__SWIG_2(void * jarg1) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  ((EQRawApplicationPacket const *)arg1)->DumpRawHeader();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_DumpRawHeaderNoTime__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  uint16 arg2 ;
  FILE *arg3 = (FILE *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (FILE *)jarg3; 
  ((EQRawApplicationPacket const *)arg1)->DumpRawHeaderNoTime(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_DumpRawHeaderNoTime__SWIG_1(void * jarg1, unsigned short jarg2) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  arg2 = (uint16)jarg2; 
  ((EQRawApplicationPacket const *)arg1)->DumpRawHeaderNoTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQRawApplicationPacket_DumpRawHeaderNoTime__SWIG_2(void * jarg1) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  ((EQRawApplicationPacket const *)arg1)->DumpRawHeaderNoTime();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQRawApplicationPacket(void * jarg1) {
  EQRawApplicationPacket *arg1 = (EQRawApplicationPacket *) 0 ;
  
  arg1 = (EQRawApplicationPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DumpPacket__SWIG_0(void * jarg1, unsigned int jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  bool arg2 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  DumpPacket((EQApplicationPacket const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DumpPacket__SWIG_1(void * jarg1) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  DumpPacket((EQApplicationPacket const *)arg1);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DumpPacketToString(void * jarg1) {
  const char * jresult ;
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  std::string result;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  result = DumpPacketToString((EQApplicationPacket const *)arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DZ_REPLAY_TIMER_NAME_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)DZ_REPLAY_TIMER_NAME;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExpeditionLockoutTimer__SWIG_0() {
  void * jresult ;
  ExpeditionLockoutTimer *result = 0 ;
  
  result = (ExpeditionLockoutTimer *)new ExpeditionLockoutTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExpeditionLockoutTimer__SWIG_1(const char * jarg1, const char * jarg2, const char * jarg3, unsigned long long jarg4, unsigned int jarg5) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  uint64_t arg4 ;
  uint32_t arg5 ;
  ExpeditionLockoutTimer *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  result = (ExpeditionLockoutTimer *)new ExpeditionLockoutTimer(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_CreateLockout__SWIG_0(const char * jarg1, const char * jarg2, unsigned int jarg3, const char * jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  std::string arg4 ;
  ExpeditionLockoutTimer result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = ExpeditionLockoutTimer::CreateLockout((std::string const &)*arg1,(std::string const &)*arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = new ExpeditionLockoutTimer(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_CreateLockout__SWIG_1(const char * jarg1, const char * jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  ExpeditionLockoutTimer result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32_t)jarg3; 
  result = ExpeditionLockoutTimer::CreateLockout((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = new ExpeditionLockoutTimer(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_days_set(void * jarg1, const char * jarg2) {
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->days = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_days_get(void * jarg1) {
  const char * jresult ;
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  result = (std::string *) & ((arg1)->days);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_hours_set(void * jarg1, const char * jarg2) {
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hours = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_hours_get(void * jarg1) {
  const char * jresult ;
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  result = (std::string *) & ((arg1)->hours);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_mins_set(void * jarg1, const char * jarg2) {
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->mins = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_DaysHoursMinutes_mins_get(void * jarg1) {
  const char * jresult ;
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  result = (std::string *) & ((arg1)->mins);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExpeditionLockoutTimer_DaysHoursMinutes() {
  void * jresult ;
  ExpeditionLockoutTimer::DaysHoursMinutes *result = 0 ;
  
  result = (ExpeditionLockoutTimer::DaysHoursMinutes *)new ExpeditionLockoutTimer::DaysHoursMinutes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExpeditionLockoutTimer_DaysHoursMinutes(void * jarg1) {
  ExpeditionLockoutTimer::DaysHoursMinutes *arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *) 0 ;
  
  arg1 = (ExpeditionLockoutTimer::DaysHoursMinutes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_AddLockoutTime(void * jarg1, int jarg2) {
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  int arg2 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddLockoutTime(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetDuration(void * jarg1) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  uint32_t result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (uint32_t)((ExpeditionLockoutTimer const *)arg1)->GetDuration();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetExpireTime(void * jarg1) {
  unsigned long long jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  uint64_t result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (uint64_t)((ExpeditionLockoutTimer const *)arg1)->GetExpireTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetStartTime(void * jarg1) {
  unsigned long long jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  uint64_t result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (uint64_t)((ExpeditionLockoutTimer const *)arg1)->GetStartTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetSecondsRemaining(void * jarg1) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  uint32_t result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (uint32_t)((ExpeditionLockoutTimer const *)arg1)->GetSecondsRemaining();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetDaysHoursMinutesRemaining(void * jarg1) {
  void * jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  ExpeditionLockoutTimer::DaysHoursMinutes result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = ((ExpeditionLockoutTimer const *)arg1)->GetDaysHoursMinutesRemaining();
  jresult = new ExpeditionLockoutTimer::DaysHoursMinutes(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetExpeditionName(void * jarg1) {
  const char * jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (std::string *) &((ExpeditionLockoutTimer const *)arg1)->GetExpeditionName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetExpeditionUUID(void * jarg1) {
  const char * jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (std::string *) &((ExpeditionLockoutTimer const *)arg1)->GetExpeditionUUID();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionLockoutTimer_GetEventName(void * jarg1) {
  const char * jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (std::string *) &((ExpeditionLockoutTimer const *)arg1)->GetEventName();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_IsExpired(void * jarg1) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  bool result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (bool)((ExpeditionLockoutTimer const *)arg1)->IsExpired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_IsFromExpedition(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)((ExpeditionLockoutTimer const *)arg1)->IsFromExpedition((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_IsReplayTimer(void * jarg1) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  bool result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  result = (bool)((ExpeditionLockoutTimer const *)arg1)->IsReplayTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_IsSameLockout__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  ExpeditionLockoutTimer *arg2 = 0 ;
  bool result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  arg2 = (ExpeditionLockoutTimer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ExpeditionLockoutTimer const & is null", 0);
    return 0;
  } 
  result = (bool)((ExpeditionLockoutTimer const *)arg1)->IsSameLockout((ExpeditionLockoutTimer const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionLockoutTimer_IsSameLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)((ExpeditionLockoutTimer const *)arg1)->IsSameLockout((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_Reset(void * jarg1) {
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_SetDuration(void * jarg1, unsigned int jarg2) {
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetDuration(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_SetExpireTime(void * jarg1, unsigned long long jarg2) {
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  (arg1)->SetExpireTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionLockoutTimer_SetUUID(void * jarg1, const char * jarg2) {
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetUUID((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExpeditionLockoutTimer(void * jarg1) {
  ExpeditionLockoutTimer *arg1 = (ExpeditionLockoutTimer *) 0 ;
  
  arg1 = (ExpeditionLockoutTimer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HIGHEST_RESIST_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SPELL_PROJECTILE_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_HEAD_POSITION_get() {
  float jresult ;
  float result;
  
  result = (float)(0.9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SEE_POSITION_get() {
  float jresult ;
  float result;
  
  result = (float)(0.5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ARCHETYPE_HYBRID_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ARCHETYPE_CASTER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ARCHETYPE_MELEE_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_GREEN_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_LIGHTBLUE_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_BLUE_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_WHITE_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_WHITE_TITANIUM_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_YELLOW_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_RED_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CON_GRAY_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DMG_BLOCKED_get() {
  int jresult ;
  int result;
  
  result = (int)(-1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DMG_PARRIED_get() {
  int jresult ;
  int result;
  
  result = (int)(-2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DMG_RIPOSTED_get() {
  int jresult ;
  int result;
  
  result = (int)(-3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DMG_DODGED_get() {
  int jresult ;
  int result;
  
  result = (int)(-4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DMG_INVULNERABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(-5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DMG_RUNE_get() {
  int jresult ;
  int result;
  
  result = (int)(-6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPECIALIZE_FIZZLE_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZONEPOINT_NOZONE_RANGE_get() {
  float jresult ;
  float result;
  
  result = (float)(40000.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZONEPOINT_ZONE_RANGE_get() {
  float jresult ;
  float result;
  
  result = (float)(40000.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_HEALTHREPORT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_LEADER_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_ATTACK_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_QATTACK_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_FOLLOWME_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_GUARDHERE_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_SIT_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_SITDOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_STANDUP_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_STOP_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_STOP_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_STOP_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_TAUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_TAUNT_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_TAUNT_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_HOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_HOLD_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_HOLD_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_GHOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_GHOLD_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(19);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_GHOLD_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_SPELLHOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_SPELLHOLD_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_SPELLHOLD_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_FOCUS_get() {
  int jresult ;
  int result;
  
  result = (int)(24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_FOCUS_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_FOCUS_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(26);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_FEIGN_get() {
  int jresult ;
  int result;
  
  result = (int)(27);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BACKOFF_get() {
  int jresult ;
  int result;
  
  result = (int)(28);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_GETLOST_get() {
  int jresult ;
  int result;
  
  result = (int)(29);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_GUARDME_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_REGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_REGROUP_ON_get() {
  int jresult ;
  int result;
  
  result = (int)(32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_REGROUP_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_MAXCOMMANDS_get() {
  int jresult ;
  int result;
  
  result = (int)(33+1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_SIT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_STOP_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_REGROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_FOLLOW_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_GUARD_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_TAUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_HOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_GHOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_FOCUS_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PET_BUTTON_SPELLHOLD_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AURA_HARDCAP_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WEAPON_STANCE_TYPE_MAX_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SHIELD_ABILITY_RECAST_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(180);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_speak_mode_set(void * jarg1, int jarg2) {
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  Journal::SpeakMode arg2 ;
  
  arg1 = (Journal::Options *)jarg1; 
  arg2 = (Journal::SpeakMode)jarg2; 
  if (arg1) (arg1)->speak_mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_speak_mode_get(void * jarg1) {
  int jresult ;
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  Journal::SpeakMode result;
  
  arg1 = (Journal::Options *)jarg1; 
  result = (Journal::SpeakMode) ((arg1)->speak_mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_journal_mode_set(void * jarg1, int jarg2) {
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  Journal::Mode arg2 ;
  
  arg1 = (Journal::Options *)jarg1; 
  arg2 = (Journal::Mode)jarg2; 
  if (arg1) (arg1)->journal_mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Options_journal_mode_get(void * jarg1) {
  int jresult ;
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  Journal::Mode result;
  
  arg1 = (Journal::Options *)jarg1; 
  result = (Journal::Mode) ((arg1)->journal_mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_language_set(void * jarg1, signed char jarg2) {
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  int8 arg2 ;
  
  arg1 = (Journal::Options *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->language = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_Options_language_get(void * jarg1) {
  signed char jresult ;
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  int8 result;
  
  arg1 = (Journal::Options *)jarg1; 
  result = (int8) ((arg1)->language);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_message_type_set(void * jarg1, unsigned int jarg2) {
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Journal::Options *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->message_type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_message_type_get(void * jarg1) {
  unsigned int jresult ;
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  uint32 result;
  
  arg1 = (Journal::Options *)jarg1; 
  result = (uint32) ((arg1)->message_type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Options_target_spawn_id_set(void * jarg1, unsigned int jarg2) {
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Journal::Options *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->target_spawn_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Options_target_spawn_id_get(void * jarg1) {
  unsigned int jresult ;
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  uint32 result;
  
  arg1 = (Journal::Options *)jarg1; 
  result = (uint32) ((arg1)->target_spawn_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Options() {
  void * jresult ;
  Journal::Options *result = 0 ;
  
  result = (Journal::Options *)new Journal::Options();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Options(void * jarg1) {
  Journal::Options *arg1 = (Journal::Options *) 0 ;
  
  arg1 = (Journal::Options *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_spellid_set(void * jarg1, unsigned short jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Buffs_Struct_spellid_get(void * jarg1) {
  unsigned short jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint16 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_casterlevel_set(void * jarg1, unsigned char jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->casterlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Buffs_Struct_casterlevel_get(void * jarg1) {
  unsigned char jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint8 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint8) ((arg1)->casterlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_casterid_set(void * jarg1, unsigned short jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->casterid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Buffs_Struct_casterid_get(void * jarg1) {
  unsigned short jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint16 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint16) ((arg1)->casterid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_caster_name_set(void * jarg1, char * jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->caster_name, (const char *)arg2, 64-1);
      arg1->caster_name[64-1] = 0;
    } else {
      arg1->caster_name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Buffs_Struct_caster_name_get(void * jarg1) {
  char * jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  char *result = 0 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (char *)(char *) ((arg1)->caster_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_ticsremaining_set(void * jarg1, int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ticsremaining = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buffs_Struct_ticsremaining_get(void * jarg1) {
  int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int32) ((arg1)->ticsremaining);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_counters_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->counters = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_counters_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint32) ((arg1)->counters);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_hit_number_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->hit_number = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_hit_number_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint32) ((arg1)->hit_number);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_melee_rune_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->melee_rune = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_melee_rune_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint32) ((arg1)->melee_rune);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_magic_rune_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->magic_rune = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_magic_rune_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint32) ((arg1)->magic_rune);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_dot_rune_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->dot_rune = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_dot_rune_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint32) ((arg1)->dot_rune);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_caston_x_set(void * jarg1, int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->caston_x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buffs_Struct_caston_x_get(void * jarg1) {
  int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int32) ((arg1)->caston_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_caston_y_set(void * jarg1, int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->caston_y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buffs_Struct_caston_y_get(void * jarg1) {
  int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int32) ((arg1)->caston_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_caston_z_set(void * jarg1, int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->caston_z = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buffs_Struct_caston_z_get(void * jarg1) {
  int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int32) ((arg1)->caston_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_ExtraDIChance_set(void * jarg1, int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ExtraDIChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buffs_Struct_ExtraDIChance_get(void * jarg1) {
  int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int32) ((arg1)->ExtraDIChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_RootBreakChance_set(void * jarg1, short jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->RootBreakChance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Buffs_Struct_RootBreakChance_get(void * jarg1) {
  short jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int16 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int16) ((arg1)->RootBreakChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_instrument_mod_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->instrument_mod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_instrument_mod_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  uint32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (uint32) ((arg1)->instrument_mod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_virus_spread_time_set(void * jarg1, int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->virus_spread_time = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Buffs_Struct_virus_spread_time_get(void * jarg1) {
  int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  int32 result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (int32) ((arg1)->virus_spread_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_persistant_buff_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->persistant_buff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_persistant_buff_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  bool result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (bool) ((arg1)->persistant_buff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_client_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->client = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_client_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  bool result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (bool) ((arg1)->client);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Buffs_Struct_UpdateClient_set(void * jarg1, unsigned int jarg2) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UpdateClient = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Buffs_Struct_UpdateClient_get(void * jarg1) {
  unsigned int jresult ;
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  bool result;
  
  arg1 = (Buffs_Struct *)jarg1; 
  result = (bool) ((arg1)->UpdateClient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Buffs_Struct() {
  void * jresult ;
  Buffs_Struct *result = 0 ;
  
  result = (Buffs_Struct *)new Buffs_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Buffs_Struct(void * jarg1) {
  Buffs_Struct *arg1 = (Buffs_Struct *) 0 ;
  
  arg1 = (Buffs_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AC_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AC_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HP_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->HP = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_HP_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->HP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HPRegen_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->HPRegen = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_HPRegen_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->HPRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MaxHP_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->MaxHP = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_MaxHP_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->MaxHP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ManaRegen_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->ManaRegen = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_ManaRegen_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->ManaRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_EnduranceRegen_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->EnduranceRegen = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_EnduranceRegen_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->EnduranceRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Mana_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->Mana = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_Mana_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->Mana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Endurance_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->Endurance = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_Endurance_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->Endurance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ATK_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ATK = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ATK_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ATK);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_STR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->STR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_STR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->STR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_STRCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->STRCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_STRCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->STRCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicSTR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicSTR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicSTR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicSTR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_STA_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->STA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_STA_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->STA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_STACapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->STACapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_STACapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->STACapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicSTA_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicSTA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicSTA_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicSTA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DEX_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DEX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DEX_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DEX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DEXCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DEXCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DEXCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DEXCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicDEX_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicDEX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicDEX_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicDEX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AGI_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AGI = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AGI_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AGI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AGICapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AGICapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AGICapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AGICapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicAGI_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicAGI = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicAGI_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicAGI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_INT_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->INT = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_INT_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->INT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_INTCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->INTCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_INTCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->INTCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicINT_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicINT = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicINT_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicINT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_WIS_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->WIS = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_WIS_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->WIS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_WISCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->WISCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_WISCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->WISCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicWIS_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicWIS = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicWIS_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicWIS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CHA_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CHA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CHA_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CHA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CHACapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CHACapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CHACapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CHACapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicCHA_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicCHA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicCHA_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicCHA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MRCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MRCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MRCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MRCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicMR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicMR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicMR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicMR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_FR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->FR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FRCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FRCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_FRCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->FRCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicFR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicFR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicFR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicFR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CRCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CRCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CRCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CRCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicCR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicCR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicCR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicCR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PRCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PRCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PRCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PRCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicPR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicPR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicPR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicPR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DRCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DRCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DRCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DRCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicDR_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicDR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicDR_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicDR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Corrup_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Corrup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Corrup_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Corrup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CorrupCapMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CorrupCapMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CorrupCapMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CorrupCapMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeroicCorrup_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicCorrup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HeroicCorrup_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HeroicCorrup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DamageShieldSpellID_set(void * jarg1, unsigned short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->DamageShieldSpellID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_StatBonuses_DamageShieldSpellID_get(void * jarg1) {
  unsigned short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint16) ((arg1)->DamageShieldSpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DamageShield_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DamageShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DamageShield_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->DamageShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DamageShieldType_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  DmgShieldType arg2 ;
  DmgShieldType *argp2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  argp2 = (DmgShieldType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null DmgShieldType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DamageShieldType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DamageShieldType_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  DmgShieldType result;
  
  arg1 = (StatBonuses *)jarg1; 
  result =  ((arg1)->DamageShieldType);
  jresult = new DmgShieldType(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellDamageShield_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellDamageShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SpellDamageShield_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->SpellDamageShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellShield_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SpellShield_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->SpellShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ReverseDamageShield_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ReverseDamageShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ReverseDamageShield_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->ReverseDamageShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ReverseDamageShieldSpellID_set(void * jarg1, unsigned short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->ReverseDamageShieldSpellID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_StatBonuses_ReverseDamageShieldSpellID_get(void * jarg1) {
  unsigned short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint16) ((arg1)->ReverseDamageShieldSpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ReverseDamageShieldType_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  DmgShieldType arg2 ;
  DmgShieldType *argp2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  argp2 = (DmgShieldType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null DmgShieldType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ReverseDamageShieldType = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ReverseDamageShieldType_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  DmgShieldType result;
  
  arg1 = (StatBonuses *)jarg1; 
  result =  ((arg1)->ReverseDamageShieldType);
  jresult = new DmgShieldType(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_movementspeed_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->movementspeed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_movementspeed_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->movementspeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_haste_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->haste = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_haste_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->haste);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_hastetype2_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->hastetype2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_hastetype2_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->hastetype2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_hastetype3_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->hastetype3 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_hastetype3_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->hastetype3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_inhibitmelee_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->inhibitmelee = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_inhibitmelee_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->inhibitmelee);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AggroRange_set(void * jarg1, float jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  float arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AggroRange = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StatBonuses_AggroRange_get(void * jarg1) {
  float jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  float result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (float) ((arg1)->AggroRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AssistRange_set(void * jarg1, float jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  float arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AssistRange = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StatBonuses_AssistRange_get(void * jarg1) {
  float jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  float result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (float) ((arg1)->AssistRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_skillmod_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->skillmod;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+1; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_skillmod_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->skillmod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_skillmodmax_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->skillmodmax;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+1; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_skillmodmax_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->skillmodmax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_effective_casting_level_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->effective_casting_level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_effective_casting_level_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->effective_casting_level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_adjusted_casting_skill_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->adjusted_casting_skill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_adjusted_casting_skill_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->adjusted_casting_skill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_reflect_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->reflect;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_reflect_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int *)(int *) ((arg1)->reflect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_singingMod_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->singingMod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_singingMod_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->singingMod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Amplification_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Amplification = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_Amplification_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->Amplification);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_brassMod_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->brassMod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_brassMod_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->brassMod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_percussionMod_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->percussionMod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_percussionMod_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->percussionMod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_windMod_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->windMod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_windMod_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->windMod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_stringedMod_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->stringedMod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_stringedMod_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->stringedMod);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_songModCap_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->songModCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_songModCap_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->songModCap);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_hatemod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->hatemod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_hatemod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->hatemod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_EnduranceReduction_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->EnduranceReduction = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_EnduranceReduction_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->EnduranceReduction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_StrikeThrough_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->StrikeThrough = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_StrikeThrough_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->StrikeThrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeMitigation_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MeleeMitigation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MeleeMitigation_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MeleeMitigation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeMitigationEffect_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MeleeMitigationEffect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MeleeMitigationEffect_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MeleeMitigationEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalHitChance_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->CriticalHitChance;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_CriticalHitChance_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->CriticalHitChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalSpellChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CriticalSpellChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CriticalSpellChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CriticalSpellChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellCritDmgIncrease_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SpellCritDmgIncrease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SpellCritDmgIncrease_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->SpellCritDmgIncrease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellCritDmgIncNoStack_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SpellCritDmgIncNoStack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SpellCritDmgIncNoStack_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->SpellCritDmgIncNoStack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DotCritDmgIncrease_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DotCritDmgIncrease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DotCritDmgIncrease_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DotCritDmgIncrease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalHealChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CriticalHealChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CriticalHealChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CriticalHealChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalHealOverTime_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CriticalHealOverTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CriticalHealOverTime_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CriticalHealOverTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalDoTChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CriticalDoTChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CriticalDoTChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CriticalDoTChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CrippBlowChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CrippBlowChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CrippBlowChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CrippBlowChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AvoidMeleeChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AvoidMeleeChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AvoidMeleeChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AvoidMeleeChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AvoidMeleeChanceEffect_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AvoidMeleeChanceEffect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AvoidMeleeChanceEffect_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AvoidMeleeChanceEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_RiposteChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->RiposteChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_RiposteChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->RiposteChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DodgeChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DodgeChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DodgeChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DodgeChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ParryChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ParryChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ParryChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ParryChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DualWieldChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DualWieldChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DualWieldChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DualWieldChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DoubleAttackChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DoubleAttackChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DoubleAttackChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DoubleAttackChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TripleAttackChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->TripleAttackChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_TripleAttackChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->TripleAttackChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DoubleRangedAttack_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DoubleRangedAttack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DoubleRangedAttack_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DoubleRangedAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ResistSpellChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ResistSpellChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ResistSpellChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ResistSpellChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ResistFearChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ResistFearChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ResistFearChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ResistFearChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Fearless_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Fearless = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_Fearless_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->Fearless);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_IsFeared_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsFeared = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_IsFeared_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->IsFeared);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_IsBlind_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsBlind = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_IsBlind_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->IsBlind);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_StunResist_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->StunResist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_StunResist_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->StunResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeSkillCheck_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MeleeSkillCheck = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MeleeSkillCheck_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MeleeSkillCheck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeSkillCheckSkill_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->MeleeSkillCheckSkill = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_MeleeSkillCheckSkill_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->MeleeSkillCheckSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HitChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HitChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HitChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HitChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HitChanceEffect_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->HitChanceEffect;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_HitChanceEffect_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->HitChanceEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DamageModifier_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DamageModifier;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DamageModifier_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DamageModifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DamageModifier2_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DamageModifier2;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DamageModifier2_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DamageModifier2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DamageModifier3_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DamageModifier3;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DamageModifier3_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DamageModifier3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MinDamageModifier_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->MinDamageModifier;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_MinDamageModifier_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->MinDamageModifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ProcChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ProcChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ProcChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ProcChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ProcChanceSPA_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ProcChanceSPA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ProcChanceSPA_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ProcChanceSPA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ExtraAttackChance_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->ExtraAttackChance;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ExtraAttackChance_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->ExtraAttackChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ExtraAttackChancePrimary_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->ExtraAttackChancePrimary;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ExtraAttackChancePrimary_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->ExtraAttackChancePrimary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ExtraAttackChanceSecondary_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->ExtraAttackChanceSecondary;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ExtraAttackChanceSecondary_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->ExtraAttackChanceSecondary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DoubleMeleeRound_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DoubleMeleeRound;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DoubleMeleeRound_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DoubleMeleeRound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DoTShielding_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DoTShielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DoTShielding_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DoTShielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DivineSaveChance_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DivineSaveChance;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DivineSaveChance_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DivineSaveChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DeathSave_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->DeathSave;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DeathSave_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->DeathSave);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FlurryChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FlurryChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_FlurryChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->FlurryChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Accuracy_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->Accuracy;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Accuracy_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->Accuracy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HundredHands_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HundredHands = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HundredHands_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HundredHands);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeLifetap_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MeleeLifetap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MeleeLifetap_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MeleeLifetap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Vampirism_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Vampirism = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Vampirism_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Vampirism);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HealRate_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HealRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HealRate_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HealRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MaxHPChange_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MaxHPChange = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MaxHPChange_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MaxHPChange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillDmgTaken_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 *arg2 = (int16 *) (int16 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int16 *)jarg2; 
  {
    size_t ii;
    int16 *b = (int16 *) arg1->SkillDmgTaken;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int16 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillDmgTaken_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int16 *)(int16 *) ((arg1)->SkillDmgTaken);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HealAmt_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HealAmt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_HealAmt_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->HealAmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellDmg_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SpellDmg = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SpellDmg_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->SpellDmg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Clairvoyance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Clairvoyance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Clairvoyance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Clairvoyance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DSMitigation_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DSMitigation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DSMitigation_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DSMitigation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DSMitigationOffHand_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DSMitigationOffHand = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DSMitigationOffHand_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DSMitigationOffHand);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellTriggers_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->SpellTriggers;
    for (ii = 0; ii < (size_t)MAX_SPELL_TRIGGER; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SpellTriggers_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->SpellTriggers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellOnKill_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->SpellOnKill;
    for (ii = 0; ii < (size_t)MAX_SPELL_TRIGGER*3; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SpellOnKill_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->SpellOnKill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellOnDeath_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->SpellOnDeath;
    for (ii = 0; ii < (size_t)MAX_SPELL_TRIGGER*2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SpellOnDeath_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->SpellOnDeath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CritDmgMod_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->CritDmgMod;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_CritDmgMod_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->CritDmgMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CritDmgModNoStack_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->CritDmgModNoStack;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_CritDmgModNoStack_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->CritDmgModNoStack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillReuseTime_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SkillReuseTime;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+1; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillReuseTime_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SkillReuseTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillDamageAmount_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SkillDamageAmount;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillDamageAmount_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SkillDamageAmount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TwoHandBluntBlock_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->TwoHandBluntBlock = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_TwoHandBluntBlock_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->TwoHandBluntBlock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ItemManaRegenCap_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ItemManaRegenCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_ItemManaRegenCap_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->ItemManaRegenCap);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_GravityEffect_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->GravityEffect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_GravityEffect_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->GravityEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AntiGate_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AntiGate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_AntiGate_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->AntiGate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MagicWeapon_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MagicWeapon = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_MagicWeapon_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->MagicWeapon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_IncreaseBlockChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->IncreaseBlockChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_IncreaseBlockChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->IncreaseBlockChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PersistantCasting_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->PersistantCasting = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_PersistantCasting_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->PersistantCasting);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_XPRateMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->XPRateMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_XPRateMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->XPRateMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HPPercCap_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->HPPercCap;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_HPPercCap_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int *)(int *) ((arg1)->HPPercCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ManaPercCap_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ManaPercCap;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ManaPercCap_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int *)(int *) ((arg1)->ManaPercCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_EndPercCap_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->EndPercCap;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_EndPercCap_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int *)(int *) ((arg1)->EndPercCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ImmuneToFlee_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ImmuneToFlee = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_ImmuneToFlee_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->ImmuneToFlee);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_VoiceGraft_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->VoiceGraft = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_VoiceGraft_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->VoiceGraft);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellProcChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SpellProcChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SpellProcChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->SpellProcChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CharmBreakChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CharmBreakChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CharmBreakChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CharmBreakChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SongRange_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SongRange = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_SongRange_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->SongRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HPToManaConvert_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->HPToManaConvert = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_HPToManaConvert_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->HPToManaConvert);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FocusEffects_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->FocusEffects;
    for (ii = 0; ii < (size_t)focusFcHealAmtCrit+1; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_FocusEffects_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->FocusEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FocusEffectsWorn_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 *arg2 = (int16 *) (int16 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int16 *)jarg2; 
  {
    size_t ii;
    int16 *b = (int16 *) arg1->FocusEffectsWorn;
    for (ii = 0; ii < (size_t)focusFcHealAmtCrit+1; ii++) b[ii] = *((int16 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_FocusEffectsWorn_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int16 *)(int16 *) ((arg1)->FocusEffectsWorn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_NegateEffects_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NegateEffects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_NegateEffects_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->NegateEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillDamageAmount2_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SkillDamageAmount2;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillDamageAmount2_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SkillDamageAmount2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_NegateAttacks_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->NegateAttacks;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_NegateAttacks_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->NegateAttacks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MitigateMeleeRune_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->MitigateMeleeRune;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_MitigateMeleeRune_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->MitigateMeleeRune);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeThresholdGuard_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->MeleeThresholdGuard;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_MeleeThresholdGuard_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->MeleeThresholdGuard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellThresholdGuard_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->SpellThresholdGuard;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SpellThresholdGuard_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->SpellThresholdGuard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MitigateSpellRune_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->MitigateSpellRune;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_MitigateSpellRune_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->MitigateSpellRune);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MitigateDotRune_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->MitigateDotRune;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_MitigateDotRune_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->MitigateDotRune);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TriggerMeleeThreshold_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TriggerMeleeThreshold = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_TriggerMeleeThreshold_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->TriggerMeleeThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TriggerSpellThreshold_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TriggerSpellThreshold = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_TriggerSpellThreshold_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->TriggerSpellThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ManaAbsorbPercentDamage_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ManaAbsorbPercentDamage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_ManaAbsorbPercentDamage_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->ManaAbsorbPercentDamage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_EnduranceAbsorbPercentDamage_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->EnduranceAbsorbPercentDamage;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_EnduranceAbsorbPercentDamage_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->EnduranceAbsorbPercentDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ShieldBlock_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ShieldBlock = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ShieldBlock_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ShieldBlock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_BlockBehind_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->BlockBehind = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_BlockBehind_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->BlockBehind);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalRegenDecay_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CriticalRegenDecay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_CriticalRegenDecay_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->CriticalRegenDecay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalHealDecay_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CriticalHealDecay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_CriticalHealDecay_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->CriticalHealDecay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalDotDecay_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CriticalDotDecay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_CriticalDotDecay_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->CriticalDotDecay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DivineAura_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DivineAura = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_DivineAura_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->DivineAura);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DistanceRemoval_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DistanceRemoval = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_DistanceRemoval_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->DistanceRemoval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ImprovedTaunt_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->ImprovedTaunt;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ImprovedTaunt_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->ImprovedTaunt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Root_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 *arg2 = (int8 *) (int8 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8 *)jarg2; 
  {
    size_t ii;
    int8 *b = (int8 *) arg1->Root;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Root_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8 *)(int8 *) ((arg1)->Root);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FrenziedDevastation_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FrenziedDevastation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_FrenziedDevastation_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->FrenziedDevastation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AbsorbMagicAtt_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->AbsorbMagicAtt;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_AbsorbMagicAtt_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->AbsorbMagicAtt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MeleeRune_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->MeleeRune;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_MeleeRune_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->MeleeRune);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_NegateIfCombat_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NegateIfCombat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_NegateIfCombat_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->NegateIfCombat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Screech_set(void * jarg1, signed char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->Screech = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_StatBonuses_Screech_get(void * jarg1) {
  signed char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8) ((arg1)->Screech);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AlterNPCLevel_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AlterNPCLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AlterNPCLevel_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AlterNPCLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AStacker_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->AStacker;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_AStacker_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->AStacker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_BStacker_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->BStacker;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_BStacker_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->BStacker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CStacker_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->CStacker;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_CStacker_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->CStacker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DStacker_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DStacker;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DStacker_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DStacker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_BerserkSPA_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BerserkSPA = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_BerserkSPA_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->BerserkSPA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Metabolism_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Metabolism = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Metabolism_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Metabolism);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Sanctuary_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Sanctuary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_Sanctuary_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->Sanctuary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FactionModPct_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionModPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_FactionModPct_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->FactionModPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_LimitToSkill_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->LimitToSkill;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+3; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_LimitToSkill_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool *)(bool *) ((arg1)->LimitToSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillProc_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SkillProc;
    for (ii = 0; ii < (size_t)MAX_SKILL_PROCS; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillProc_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SkillProc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillProcSuccess_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SkillProcSuccess;
    for (ii = 0; ii < (size_t)MAX_SKILL_PROCS; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillProcSuccess_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SkillProcSuccess);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SpellProc_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SpellProc;
    for (ii = 0; ii < (size_t)MAX_AA_PROCS; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SpellProc_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SpellProc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_RangedProc_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->RangedProc;
    for (ii = 0; ii < (size_t)MAX_AA_PROCS; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_RangedProc_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->RangedProc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DefensiveProc_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->DefensiveProc;
    for (ii = 0; ii < (size_t)MAX_AA_PROCS; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_DefensiveProc_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->DefensiveProc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Proc_Timer_Modifier_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Proc_Timer_Modifier = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_Proc_Timer_Modifier_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->Proc_Timer_Modifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PC_Pet_Rampage_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->PC_Pet_Rampage;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_PC_Pet_Rampage_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->PC_Pet_Rampage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PC_Pet_AE_Rampage_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->PC_Pet_AE_Rampage;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_PC_Pet_AE_Rampage_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->PC_Pet_AE_Rampage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PC_Pet_Flurry_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->PC_Pet_Flurry = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_PC_Pet_Flurry_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->PC_Pet_Flurry);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Attack_Accuracy_Max_Percent_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Attack_Accuracy_Max_Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Attack_Accuracy_Max_Percent_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Attack_Accuracy_Max_Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AC_Mitigation_Max_Percent_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AC_Mitigation_Max_Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AC_Mitigation_Max_Percent_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AC_Mitigation_Max_Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AC_Avoidance_Max_Percent_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AC_Avoidance_Max_Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_AC_Avoidance_Max_Percent_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->AC_Avoidance_Max_Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Damage_Taken_Position_Mod_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->Damage_Taken_Position_Mod;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Damage_Taken_Position_Mod_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->Damage_Taken_Position_Mod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Melee_Damage_Position_Mod_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->Melee_Damage_Position_Mod;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Melee_Damage_Position_Mod_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->Melee_Damage_Position_Mod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Damage_Taken_Position_Amt_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->Damage_Taken_Position_Amt;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Damage_Taken_Position_Amt_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->Damage_Taken_Position_Amt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Melee_Damage_Position_Amt_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->Melee_Damage_Position_Amt;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Melee_Damage_Position_Amt_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->Melee_Damage_Position_Amt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Double_Backstab_Front_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Double_Backstab_Front = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Double_Backstab_Front_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Double_Backstab_Front);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DS_Mitigation_Amount_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DS_Mitigation_Amount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DS_Mitigation_Amount_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DS_Mitigation_Amount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DS_Mitigation_Percentage_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DS_Mitigation_Percentage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DS_Mitigation_Percentage_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DS_Mitigation_Percentage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Pet_Crit_Melee_Damage_Pct_Owner = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Pet_Crit_Melee_Damage_Pct_Owner_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Pet_Crit_Melee_Damage_Pct_Owner);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Pet_Add_Atk_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Pet_Add_Atk = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Pet_Add_Atk_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Pet_Add_Atk);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ItemEnduranceRegenCap_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ItemEnduranceRegenCap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ItemEnduranceRegenCap_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ItemEnduranceRegenCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_WeaponStance_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->WeaponStance;
    for (ii = 0; ii < (size_t)2+1; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_WeaponStance_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->WeaponStance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ZoneSuspendMinion_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZoneSuspendMinion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_ZoneSuspendMinion_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->ZoneSuspendMinion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CompleteHealBuffBlocker_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CompleteHealBuffBlocker = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_CompleteHealBuffBlocker_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->CompleteHealBuffBlocker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Illusion_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Illusion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Illusion_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Illusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_invisibility_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->invisibility = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_invisibility_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->invisibility);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_invisibility_verse_undead_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->invisibility_verse_undead = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_invisibility_verse_undead_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->invisibility_verse_undead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_invisibility_verse_animal_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->invisibility_verse_animal = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_invisibility_verse_animal_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->invisibility_verse_animal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TrapCircumvention_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->TrapCircumvention = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_TrapCircumvention_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->TrapCircumvention);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SecondaryForte_set(void * jarg1, unsigned short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->SecondaryForte = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_StatBonuses_SecondaryForte_get(void * jarg1) {
  unsigned short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint16) ((arg1)->SecondaryForte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ShieldDuration_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ShieldDuration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ShieldDuration_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ShieldDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ExtendedShielding_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ExtendedShielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ExtendedShielding_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ExtendedShielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Packrat_set(void * jarg1, signed char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->Packrat = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_StatBonuses_Packrat_get(void * jarg1) {
  signed char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8) ((arg1)->Packrat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_BuffSlotIncrease_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->BuffSlotIncrease = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_BuffSlotIncrease_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->BuffSlotIncrease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DelayDeath_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->DelayDeath = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_DelayDeath_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->DelayDeath);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_BaseMovementSpeed_set(void * jarg1, signed char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->BaseMovementSpeed = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_StatBonuses_BaseMovementSpeed_get(void * jarg1) {
  signed char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8) ((arg1)->BaseMovementSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_IncreaseRunSpeedCap_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->IncreaseRunSpeedCap = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_IncreaseRunSpeedCap_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->IncreaseRunSpeedCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DoubleSpecialAttack_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DoubleSpecialAttack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DoubleSpecialAttack_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DoubleSpecialAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SkillAttackProc_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SkillAttackProc;
    for (ii = 0; ii < (size_t)MAX_CAST_ON_SKILL_USE; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SkillAttackProc_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SkillAttackProc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HasSkillAttackProc_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->HasSkillAttackProc;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+1; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_HasSkillAttackProc_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool *)(bool *) ((arg1)->HasSkillAttackProc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FrontalStunResist_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->FrontalStunResist = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_FrontalStunResist_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->FrontalStunResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_BindWound_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->BindWound = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_BindWound_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->BindWound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MaxBindWound_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->MaxBindWound = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_MaxBindWound_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->MaxBindWound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ChannelChanceSpells_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ChannelChanceSpells = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ChannelChanceSpells_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ChannelChanceSpells);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ChannelChanceItems_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ChannelChanceItems = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ChannelChanceItems_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ChannelChanceItems);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SeeInvis_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->SeeInvis = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_SeeInvis_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->SeeInvis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TripleBackstab_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->TripleBackstab = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_TripleBackstab_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->TripleBackstab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FrontalBackstabMinDmg_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FrontalBackstabMinDmg = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_FrontalBackstabMinDmg_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->FrontalBackstabMinDmg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FrontalBackstabChance_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->FrontalBackstabChance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_FrontalBackstabChance_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->FrontalBackstabChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ConsumeProjectile_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ConsumeProjectile = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_ConsumeProjectile_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->ConsumeProjectile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ForageAdditionalItems_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ForageAdditionalItems = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_ForageAdditionalItems_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->ForageAdditionalItems);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SalvageChance_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->SalvageChance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_SalvageChance_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->SalvageChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ArcheryDamageModifier_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ArcheryDamageModifier = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_ArcheryDamageModifier_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->ArcheryDamageModifier);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SecondaryDmgInc_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SecondaryDmgInc = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_SecondaryDmgInc_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->SecondaryDmgInc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_GiveDoubleAttack_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->GiveDoubleAttack = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_GiveDoubleAttack_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32) ((arg1)->GiveDoubleAttack);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SlayUndead_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SlayUndead;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SlayUndead_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SlayUndead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PetCriticalHit_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PetCriticalHit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PetCriticalHit_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PetCriticalHit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PetAvoidance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PetAvoidance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PetAvoidance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PetAvoidance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CombatStability_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CombatStability = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_CombatStability_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->CombatStability);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_DoubleRiposte_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DoubleRiposte = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_DoubleRiposte_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->DoubleRiposte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_GiveDoubleRiposte_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->GiveDoubleRiposte;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_GiveDoubleRiposte_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->GiveDoubleRiposte);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_RaiseSkillCap_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->RaiseSkillCap;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+1; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_RaiseSkillCap_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->RaiseSkillCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Ambidexterity_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Ambidexterity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_Ambidexterity_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->Ambidexterity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PetMaxHP_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PetMaxHP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PetMaxHP_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PetMaxHP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PetFlurry_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PetFlurry = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PetFlurry_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PetFlurry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_MasteryofPast_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->MasteryofPast = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_MasteryofPast_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->MasteryofPast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_GivePetGroupTarget_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GivePetGroupTarget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_GivePetGroupTarget_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->GivePetGroupTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_RootBreakChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->RootBreakChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_RootBreakChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->RootBreakChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_UnfailingDivinity_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->UnfailingDivinity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_UnfailingDivinity_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->UnfailingDivinity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ItemHPRegenCap_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ItemHPRegenCap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ItemHPRegenCap_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ItemHPRegenCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_SEResist_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SEResist;
    for (ii = 0; ii < (size_t)MAX_RESISTABLE_EFFECTS*2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_SEResist_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SEResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_OffhandRiposteFail_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->OffhandRiposteFail = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_OffhandRiposteFail_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->OffhandRiposteFail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ItemATKCap_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ItemATKCap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ItemATKCap_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ItemATKCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FinishingBlow_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->FinishingBlow;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_FinishingBlow_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->FinishingBlow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FinishingBlowLvl_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->FinishingBlowLvl;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_FinishingBlowLvl_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->FinishingBlowLvl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ShieldEquipDmgMod_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ShieldEquipDmgMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ShieldEquipDmgMod_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ShieldEquipDmgMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TriggerOnCastRequirement_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TriggerOnCastRequirement = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_TriggerOnCastRequirement_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->TriggerOnCastRequirement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_StunBashChance_set(void * jarg1, signed char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->StunBashChance = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_StatBonuses_StunBashChance_get(void * jarg1) {
  signed char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8) ((arg1)->StunBashChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_IncreaseChanceMemwipe_set(void * jarg1, signed char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->IncreaseChanceMemwipe = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_StatBonuses_IncreaseChanceMemwipe_get(void * jarg1) {
  signed char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8) ((arg1)->IncreaseChanceMemwipe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_CriticalMend_set(void * jarg1, signed char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->CriticalMend = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_StatBonuses_CriticalMend_get(void * jarg1) {
  signed char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int8) ((arg1)->CriticalMend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ImprovedReclaimEnergy_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ImprovedReclaimEnergy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_ImprovedReclaimEnergy_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->ImprovedReclaimEnergy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HeadShot_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->HeadShot;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_HeadShot_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->HeadShot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_HSLevel_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 *arg2 = (uint8 *) (uint8 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->HSLevel;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_HSLevel_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->HSLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_Assassinate_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->Assassinate;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_Assassinate_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->Assassinate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_AssassinateLevel_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 *arg2 = (uint8 *) (uint8 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->AssassinateLevel;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_AssassinateLevel_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->AssassinateLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PetMeleeMitigation_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->PetMeleeMitigation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_PetMeleeMitigation_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->PetMeleeMitigation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_IllusionPersistence_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IllusionPersistence = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_IllusionPersistence_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->IllusionPersistence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_extra_xtargets_set(void * jarg1, unsigned short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->extra_xtargets = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_StatBonuses_extra_xtargets_get(void * jarg1) {
  unsigned short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint16) ((arg1)->extra_xtargets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ShroudofStealth_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ShroudofStealth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_ShroudofStealth_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->ShroudofStealth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ReduceFallDamage_set(void * jarg1, unsigned short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->ReduceFallDamage = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_StatBonuses_ReduceFallDamage_get(void * jarg1) {
  unsigned short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint16) ((arg1)->ReduceFallDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_ReduceTradeskillFail_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->ReduceTradeskillFail;
    for (ii = 0; ii < (size_t)EQ::skills::HIGHEST_SKILL+1; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_ReduceTradeskillFail_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->ReduceTradeskillFail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_TradeSkillMastery_set(void * jarg1, unsigned char jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->TradeSkillMastery = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_StatBonuses_TradeSkillMastery_get(void * jarg1) {
  unsigned char jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  uint8 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (uint8) ((arg1)->TradeSkillMastery);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_NoBreakAESneak_set(void * jarg1, short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->NoBreakAESneak = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_StatBonuses_NoBreakAESneak_get(void * jarg1) {
  short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int16) ((arg1)->NoBreakAESneak);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FeignedCastOnChance_set(void * jarg1, short jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->FeignedCastOnChance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_StatBonuses_FeignedCastOnChance_get(void * jarg1) {
  short jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int16 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int16) ((arg1)->FeignedCastOnChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_PetCommands_set(void * jarg1, void * jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->PetCommands;
    for (ii = 0; ii < (size_t)33+1; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StatBonuses_PetCommands_get(void * jarg1) {
  void * jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool *result = 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool *)(bool *) ((arg1)->PetCommands);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_FeignedMinionChance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FeignedMinionChance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_FeignedMinionChance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->FeignedMinionChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_GrantForage_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GrantForage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_GrantForage_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->GrantForage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_aura_slots_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->aura_slots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_aura_slots_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->aura_slots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_trap_slots_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trap_slots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_trap_slots_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int) ((arg1)->trap_slots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_hunger_set(void * jarg1, unsigned int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hunger = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatBonuses_hunger_get(void * jarg1) {
  unsigned int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  bool result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (bool) ((arg1)->hunger);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_max_hp_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->heroic_max_hp = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_heroic_max_hp_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->heroic_max_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_max_mana_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->heroic_max_mana = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_heroic_max_mana_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->heroic_max_mana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_max_end_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->heroic_max_end = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_heroic_max_end_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->heroic_max_end);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_hp_regen_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->heroic_hp_regen = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_heroic_hp_regen_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->heroic_hp_regen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_mana_regen_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->heroic_mana_regen = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_heroic_mana_regen_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->heroic_mana_regen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_end_regen_set(void * jarg1, long long jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->heroic_end_regen = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_StatBonuses_heroic_end_regen_get(void * jarg1) {
  long long jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int64 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int64) ((arg1)->heroic_end_regen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_str_shield_ac_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->heroic_str_shield_ac = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_heroic_str_shield_ac_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->heroic_str_shield_ac);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_str_melee_damage_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->heroic_str_melee_damage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_heroic_str_melee_damage_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->heroic_str_melee_damage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_agi_avoidance_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->heroic_agi_avoidance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_heroic_agi_avoidance_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->heroic_agi_avoidance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatBonuses_heroic_dex_ranged_damage_set(void * jarg1, int jarg2) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 arg2 ;
  
  arg1 = (StatBonuses *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->heroic_dex_ranged_damage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StatBonuses_heroic_dex_ranged_damage_get(void * jarg1) {
  int jresult ;
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  int32 result;
  
  arg1 = (StatBonuses *)jarg1; 
  result = (int32) ((arg1)->heroic_dex_ranged_damage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StatBonuses() {
  void * jresult ;
  StatBonuses *result = 0 ;
  
  result = (StatBonuses *)new StatBonuses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StatBonuses(void * jarg1) {
  StatBonuses *arg1 = (StatBonuses *) 0 ;
  
  arg1 = (StatBonuses *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_BUFFSTACKER_EXISTS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::BUFFSTACKER_EXISTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_BUFFSTACKER_VALUE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::BUFFSTACKER_VALUE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EXTRA_ATTACK_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::EXTRA_ATTACK_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EXTRA_ATTACK_NUM_ATKS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::EXTRA_ATTACK_NUM_ATKS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DIVINE_SAVE_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DIVINE_SAVE_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DIVINE_SAVE_SPELL_TRIGGER_ID_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DIVINE_SAVE_SPELL_TRIGGER_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DEATH_SAVE_TYPE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DEATH_SAVE_TYPE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DEATH_SAVE_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DEATH_SAVE_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DEATH_SAVE_MIN_LEVEL_FOR_HEAL_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DEATH_SAVE_MIN_LEVEL_FOR_HEAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DEATH_SAVE_HEAL_AMT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DEATH_SAVE_HEAL_AMT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_RESOURCE_PERCENT_CAP_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::RESOURCE_PERCENT_CAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_RESOURCE_AMOUNT_CAP_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::RESOURCE_AMOUNT_CAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NEGATE_ATK_EXISTS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::NEGATE_ATK_EXISTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NEGATE_ATK_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::NEGATE_ATK_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NEGATE_ATK_MAX_DMG_ABSORB_PER_HIT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::NEGATE_ATK_MAX_DMG_ABSORB_PER_HIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MITIGATION_RUNE_PERCENT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::MITIGATION_RUNE_PERCENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MITIGATION_RUNE_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::MITIGATION_RUNE_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MITIGATION_RUNE_MAX_DMG_ABSORB_PER_HIT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::MITIGATION_RUNE_MAX_DMG_ABSORB_PER_HIT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MITIGATION_RUNE_MAX_HP_AMT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::MITIGATION_RUNE_MAX_HP_AMT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_THRESHOLDGUARD_MITIGATION_PERCENT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::THRESHOLDGUARD_MITIGATION_PERCENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_THRESHOLDGUARD_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::THRESHOLDGUARD_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_THRESHOLDGUARD_MIN_DMG_TO_TRIGGER_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::THRESHOLDGUARD_MIN_DMG_TO_TRIGGER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ENDURANCE_ABSORD_MITIGIATION_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::ENDURANCE_ABSORD_MITIGIATION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ENDURANCE_ABSORD_DRAIN_PER_HP_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::ENDURANCE_ABSORD_DRAIN_PER_HP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IMPROVED_TAUNT_MAX_LVL_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::IMPROVED_TAUNT_MAX_LVL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IMPROVED_TAUNT_AGGRO_MOD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::IMPROVED_TAUNT_AGGRO_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IMPROVED_TAUNT_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::IMPROVED_TAUNT_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ROOT_EXISTS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::ROOT_EXISTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ROOT_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::ROOT_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_RUNE_AMOUNT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::RUNE_AMOUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_RUNE_BUFFSLOT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::RUNE_BUFFSLOT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_POSITION_BACK_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::POSITION_BACK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_POSITION_FRONT_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::POSITION_FRONT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PET_RAMPAGE_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::PET_RAMPAGE_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PET_RAMPAGE_DMG_MOD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::PET_RAMPAGE_DMG_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SKILLATK_PROC_SPELL_ID_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::SKILLATK_PROC_SPELL_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SKILLATK_PROC_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::SKILLATK_PROC_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SKILLATK_PROC_SKILL_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::SKILLATK_PROC_SKILL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SLAYUNDEAD_RATE_MOD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::SLAYUNDEAD_RATE_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SLAYUNDEAD_DMG_MOD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::SLAYUNDEAD_DMG_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DOUBLE_RIPOSTE_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DOUBLE_RIPOSTE_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DOUBLE_RIPOSTE_SKILL_ATK_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DOUBLE_RIPOSTE_SKILL_ATK_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DOUBLE_RIPOSTE_SKILL_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DOUBLE_RIPOSTE_SKILL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FINISHING_EFFECT_PROC_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::FINISHING_EFFECT_PROC_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FINISHING_EFFECT_DMG_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::FINISHING_EFFECT_DMG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FINISHING_EFFECT_LEVEL_MAX_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::FINISHING_EFFECT_LEVEL_MAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FINISHING_EFFECT_LEVEL_CHANCE_BONUS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::FINISHING_EFFECT_LEVEL_CHANCE_BONUS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_FINISHING_BLOW_LEVEL_HP_RATIO_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::FINISHING_BLOW_LEVEL_HP_RATIO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DOUBLE_MELEE_ROUND_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DOUBLE_MELEE_ROUND_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DOUBLE_MELEE_ROUND_DMG_BONUS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::DOUBLE_MELEE_ROUND_DMG_BONUS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_REFLECT_CHANCE_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::REFLECT_CHANCE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_REFLECT_RESISTANCE_MOD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::REFLECT_RESISTANCE_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_REFLECT_DMG_EFFECTIVENESS_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::REFLECT_DMG_EFFECTIVENESS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_COMBAT_PROC_ORIGIN_ID_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::COMBAT_PROC_ORIGIN_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_COMBAT_PROC_SPELL_ID_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::COMBAT_PROC_SPELL_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_COMBAT_PROC_RATE_MOD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::COMBAT_PROC_RATE_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_COMBAT_PROC_REUSE_TIMER_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)SBIndex::COMBAT_PROC_REUSE_TIMER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProc_spellID_set(void * jarg1, int jarg2) {
  tProc *arg1 = (tProc *) 0 ;
  int32 arg2 ;
  
  arg1 = (tProc *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->spellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tProc_spellID_get(void * jarg1) {
  int jresult ;
  tProc *arg1 = (tProc *) 0 ;
  int32 result;
  
  arg1 = (tProc *)jarg1; 
  result = (int32) ((arg1)->spellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProc_chance_set(void * jarg1, unsigned short jarg2) {
  tProc *arg1 = (tProc *) 0 ;
  uint16 arg2 ;
  
  arg1 = (tProc *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->chance = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_tProc_chance_get(void * jarg1) {
  unsigned short jresult ;
  tProc *arg1 = (tProc *) 0 ;
  uint16 result;
  
  arg1 = (tProc *)jarg1; 
  result = (uint16) ((arg1)->chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProc_base_spellID_set(void * jarg1, int jarg2) {
  tProc *arg1 = (tProc *) 0 ;
  int32 arg2 ;
  
  arg1 = (tProc *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->base_spellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tProc_base_spellID_get(void * jarg1) {
  int jresult ;
  tProc *arg1 = (tProc *) 0 ;
  int32 result;
  
  arg1 = (tProc *)jarg1; 
  result = (int32) ((arg1)->base_spellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProc_level_override_set(void * jarg1, int jarg2) {
  tProc *arg1 = (tProc *) 0 ;
  int arg2 ;
  
  arg1 = (tProc *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level_override = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tProc_level_override_get(void * jarg1) {
  int jresult ;
  tProc *arg1 = (tProc *) 0 ;
  int result;
  
  arg1 = (tProc *)jarg1; 
  result = (int) ((arg1)->level_override);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProc_proc_reuse_time_set(void * jarg1, unsigned int jarg2) {
  tProc *arg1 = (tProc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (tProc *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->proc_reuse_time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tProc_proc_reuse_time_get(void * jarg1) {
  unsigned int jresult ;
  tProc *arg1 = (tProc *) 0 ;
  uint32 result;
  
  arg1 = (tProc *)jarg1; 
  result = (uint32) ((arg1)->proc_reuse_time);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_tProc() {
  void * jresult ;
  tProc *result = 0 ;
  
  result = (tProc *)new tProc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_tProc(void * jarg1) {
  tProc *arg1 = (tProc *) 0 ;
  
  arg1 = (tProc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_enabled_set(void * jarg1, unsigned int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponStance_Struct_enabled_get(void * jarg1) {
  unsigned int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_spellbonus_enabled_set(void * jarg1, unsigned int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->spellbonus_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponStance_Struct_spellbonus_enabled_get(void * jarg1) {
  unsigned int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (bool) ((arg1)->spellbonus_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_itembonus_enabled_set(void * jarg1, unsigned int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->itembonus_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponStance_Struct_itembonus_enabled_get(void * jarg1) {
  unsigned int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (bool) ((arg1)->itembonus_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_aabonus_enabled_set(void * jarg1, unsigned int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->aabonus_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponStance_Struct_aabonus_enabled_get(void * jarg1) {
  unsigned int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  bool result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (bool) ((arg1)->aabonus_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_spellbonus_buff_spell_id_set(void * jarg1, int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  int arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spellbonus_buff_spell_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponStance_Struct_spellbonus_buff_spell_id_get(void * jarg1) {
  int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  int result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (int) ((arg1)->spellbonus_buff_spell_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_itembonus_buff_spell_id_set(void * jarg1, int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  int arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->itembonus_buff_spell_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponStance_Struct_itembonus_buff_spell_id_get(void * jarg1) {
  int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  int result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (int) ((arg1)->itembonus_buff_spell_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponStance_Struct_aabonus_buff_spell_id_set(void * jarg1, int jarg2) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  int arg2 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->aabonus_buff_spell_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponStance_Struct_aabonus_buff_spell_id_get(void * jarg1) {
  int jresult ;
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  int result;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  result = (int) ((arg1)->aabonus_buff_spell_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponStance_Struct() {
  void * jresult ;
  WeaponStance_Struct *result = 0 ;
  
  result = (WeaponStance_Struct *)new WeaponStance_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeaponStance_Struct(void * jarg1) {
  WeaponStance_Struct *arg1 = (WeaponStance_Struct *) 0 ;
  
  arg1 = (WeaponStance_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WEAPON_STANCE_TYPE_2H_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)WEAPON_STANCE_TYPE_2H;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WEAPON_STANCE_TYPE_SHIELD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)WEAPON_STANCE_TYPE_SHIELD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WEAPON_STANCE_TYPE_DUAL_WIELD_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)WEAPON_STANCE_TYPE_DUAL_WIELD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_increment_set(void * jarg1, unsigned short jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint16 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->increment = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_tProjatk_increment_get(void * jarg1) {
  unsigned short jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint16 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (uint16) ((arg1)->increment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_hit_increment_set(void * jarg1, unsigned short jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint16 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->hit_increment = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_tProjatk_hit_increment_get(void * jarg1) {
  unsigned short jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint16 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (uint16) ((arg1)->hit_increment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_target_id_set(void * jarg1, unsigned short jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint16 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->target_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_tProjatk_target_id_get(void * jarg1) {
  unsigned short jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint16 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (uint16) ((arg1)->target_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_wpn_dmg_set(void * jarg1, int jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  int32 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->wpn_dmg = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tProjatk_wpn_dmg_get(void * jarg1) {
  int jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  int32 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (int32) ((arg1)->wpn_dmg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_origin_x_set(void * jarg1, float jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  float arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->origin_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tProjatk_origin_x_get(void * jarg1) {
  float jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  float result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (float) ((arg1)->origin_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_origin_y_set(void * jarg1, float jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  float arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->origin_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tProjatk_origin_y_get(void * jarg1) {
  float jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  float result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (float) ((arg1)->origin_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_origin_z_set(void * jarg1, float jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  float arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->origin_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tProjatk_origin_z_get(void * jarg1) {
  float jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  float result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (float) ((arg1)->origin_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_tlast_x_set(void * jarg1, float jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  float arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tlast_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tProjatk_tlast_x_get(void * jarg1) {
  float jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  float result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (float) ((arg1)->tlast_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_tlast_y_set(void * jarg1, float jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  float arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->tlast_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tProjatk_tlast_y_get(void * jarg1) {
  float jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  float result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (float) ((arg1)->tlast_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_ranged_id_set(void * jarg1, unsigned int jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint32 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ranged_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tProjatk_ranged_id_get(void * jarg1) {
  unsigned int jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint32 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (uint32) ((arg1)->ranged_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_ammo_id_set(void * jarg1, unsigned int jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint32 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ammo_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tProjatk_ammo_id_get(void * jarg1) {
  unsigned int jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint32 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (uint32) ((arg1)->ammo_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_ammo_slot_set(void * jarg1, int jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  int arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ammo_slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tProjatk_ammo_slot_get(void * jarg1) {
  int jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  int result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (int) ((arg1)->ammo_slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_skill_set(void * jarg1, unsigned char jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint8 arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->skill = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_tProjatk_skill_get(void * jarg1) {
  unsigned char jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  uint8 result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (uint8) ((arg1)->skill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_speed_mod_set(void * jarg1, float jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  float arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->speed_mod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tProjatk_speed_mod_get(void * jarg1) {
  float jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  float result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (float) ((arg1)->speed_mod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tProjatk_disable_procs_set(void * jarg1, unsigned int jarg2) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  bool arg2 ;
  
  arg1 = (tProjatk *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disable_procs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tProjatk_disable_procs_get(void * jarg1) {
  unsigned int jresult ;
  tProjatk *arg1 = (tProjatk *) 0 ;
  bool result;
  
  arg1 = (tProjatk *)jarg1; 
  result = (bool) ((arg1)->disable_procs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_tProjatk() {
  void * jresult ;
  tProjatk *result = 0 ;
  
  result = (tProjatk *)new tProjatk();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_tProjatk(void * jarg1) {
  tProjatk *arg1 = (tProjatk *) 0 ;
  
  arg1 = (tProjatk *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animKick_get() {
  int jresult ;
  int result;
  
  result = (int)animKick;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_anim1HPiercing_get() {
  int jresult ;
  int result;
  
  result = (int)anim1HPiercing;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_anim2HSlashing_get() {
  int jresult ;
  int result;
  
  result = (int)anim2HSlashing;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_anim2HWeapon_get() {
  int jresult ;
  int result;
  
  result = (int)anim2HWeapon;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_anim1HWeapon_get() {
  int jresult ;
  int result;
  
  result = (int)anim1HWeapon;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animDualWield_get() {
  int jresult ;
  int result;
  
  result = (int)animDualWield;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animTailRake_get() {
  int jresult ;
  int result;
  
  result = (int)animTailRake;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animHand2Hand_get() {
  int jresult ;
  int result;
  
  result = (int)animHand2Hand;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animShootBow_get() {
  int jresult ;
  int result;
  
  result = (int)animShootBow;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animRoundKick_get() {
  int jresult ;
  int result;
  
  result = (int)animRoundKick;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animSwarmAttack_get() {
  int jresult ;
  int result;
  
  result = (int)animSwarmAttack;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animFlyingKick_get() {
  int jresult ;
  int result;
  
  result = (int)animFlyingKick;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animTigerClaw_get() {
  int jresult ;
  int result;
  
  result = (int)animTigerClaw;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_animEagleStrike_get() {
  int jresult ;
  int result;
  
  result = (int)animEagleStrike;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLUP_UNKNOWN_get() {
  int jresult ;
  int result;
  
  result = (int)SKILLUP_UNKNOWN;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLUP_SUCCESS_get() {
  int jresult ;
  int result;
  
  result = (int)SKILLUP_SUCCESS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLUP_FAILURE_get() {
  int jresult ;
  int result;
  
  result = (int)SKILLUP_FAILURE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridCircular_get() {
  int jresult ;
  int result;
  
  result = (int)GridCircular;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridRandom10_get() {
  int jresult ;
  int result;
  
  result = (int)GridRandom10;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridRandom_get() {
  int jresult ;
  int result;
  
  result = (int)GridRandom;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridPatrol_get() {
  int jresult ;
  int result;
  
  result = (int)GridPatrol;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridOneWayRepop_get() {
  int jresult ;
  int result;
  
  result = (int)GridOneWayRepop;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridRand5LoS_get() {
  int jresult ;
  int result;
  
  result = (int)GridRand5LoS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridOneWayDepop_get() {
  int jresult ;
  int result;
  
  result = (int)GridOneWayDepop;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridCenterPoint_get() {
  int jresult ;
  int result;
  
  result = (int)GridCenterPoint;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridRandomCenterPoint_get() {
  int jresult ;
  int result;
  
  result = (int)GridRandomCenterPoint;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GridRandomPath_get() {
  int jresult ;
  int result;
  
  result = (int)GridRandomPath;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercType_Type_set(void * jarg1, unsigned int jarg2) {
  MercType *arg1 = (MercType *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercType *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercType_Type_get(void * jarg1) {
  unsigned int jresult ;
  MercType *arg1 = (MercType *) 0 ;
  uint32 result;
  
  arg1 = (MercType *)jarg1; 
  result = (uint32) ((arg1)->Type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercType_ClientVersion_set(void * jarg1, unsigned int jarg2) {
  MercType *arg1 = (MercType *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercType *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ClientVersion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercType_ClientVersion_get(void * jarg1) {
  unsigned int jresult ;
  MercType *arg1 = (MercType *) 0 ;
  uint32 result;
  
  arg1 = (MercType *)jarg1; 
  result = (uint32) ((arg1)->ClientVersion);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercType() {
  void * jresult ;
  MercType *result = 0 ;
  
  result = (MercType *)new MercType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercType(void * jarg1) {
  MercType *arg1 = (MercType *) 0 ;
  
  arg1 = (MercType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercData_MercTemplateID_set(void * jarg1, unsigned int jarg2) {
  MercData *arg1 = (MercData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercTemplateID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercData_MercTemplateID_get(void * jarg1) {
  unsigned int jresult ;
  MercData *arg1 = (MercData *) 0 ;
  uint32 result;
  
  arg1 = (MercData *)jarg1; 
  result = (uint32) ((arg1)->MercTemplateID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercData_MercType_set(void * jarg1, unsigned int jarg2) {
  MercData *arg1 = (MercData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercData_MercType_get(void * jarg1) {
  unsigned int jresult ;
  MercData *arg1 = (MercData *) 0 ;
  uint32 result;
  
  arg1 = (MercData *)jarg1; 
  result = (uint32) ((arg1)->MercType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercData_MercSubType_set(void * jarg1, unsigned int jarg2) {
  MercData *arg1 = (MercData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercSubType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercData_MercSubType_get(void * jarg1) {
  unsigned int jresult ;
  MercData *arg1 = (MercData *) 0 ;
  uint32 result;
  
  arg1 = (MercData *)jarg1; 
  result = (uint32) ((arg1)->MercSubType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercData_CostFormula_set(void * jarg1, unsigned int jarg2) {
  MercData *arg1 = (MercData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->CostFormula = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercData_CostFormula_get(void * jarg1) {
  unsigned int jresult ;
  MercData *arg1 = (MercData *) 0 ;
  uint32 result;
  
  arg1 = (MercData *)jarg1; 
  result = (uint32) ((arg1)->CostFormula);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercData_ClientVersion_set(void * jarg1, unsigned int jarg2) {
  MercData *arg1 = (MercData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ClientVersion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercData_ClientVersion_get(void * jarg1) {
  unsigned int jresult ;
  MercData *arg1 = (MercData *) 0 ;
  uint32 result;
  
  arg1 = (MercData *)jarg1; 
  result = (uint32) ((arg1)->ClientVersion);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercData_NPCID_set(void * jarg1, unsigned int jarg2) {
  MercData *arg1 = (MercData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->NPCID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercData_NPCID_get(void * jarg1) {
  unsigned int jresult ;
  MercData *arg1 = (MercData *) 0 ;
  uint32 result;
  
  arg1 = (MercData *)jarg1; 
  result = (uint32) ((arg1)->NPCID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercData() {
  void * jresult ;
  MercData *result = 0 ;
  
  result = (MercData *)new MercData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercData(void * jarg1) {
  MercData *arg1 = (MercData *) 0 ;
  
  arg1 = (MercData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Trade(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Trade *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Trade *)new Trade(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Trade(void * jarg1) {
  Trade *arg1 = (Trade *) 0 ;
  
  arg1 = (Trade *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_Reset(void * jarg1) {
  Trade *arg1 = (Trade *) 0 ;
  
  arg1 = (Trade *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_Start__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Trade *arg1 = (Trade *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Start(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_Start__SWIG_1(void * jarg1, unsigned int jarg2) {
  Trade *arg1 = (Trade *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->Start(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Trade_With(void * jarg1) {
  void * jresult ;
  Trade *arg1 = (Trade *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Trade *)jarg1; 
  result = (Mob *)(arg1)->With();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_AddEntity(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  Trade *arg1 = (Trade *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddEntity(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_state_set(void * jarg1, int jarg2) {
  Trade *arg1 = (Trade *) 0 ;
  TradeState arg2 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (TradeState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trade_state_get(void * jarg1) {
  int jresult ;
  Trade *arg1 = (Trade *) 0 ;
  TradeState result;
  
  arg1 = (Trade *)jarg1; 
  result = (TradeState) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_pp_set(void * jarg1, int jarg2) {
  Trade *arg1 = (Trade *) 0 ;
  int32 arg2 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->pp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trade_pp_get(void * jarg1) {
  int jresult ;
  Trade *arg1 = (Trade *) 0 ;
  int32 result;
  
  arg1 = (Trade *)jarg1; 
  result = (int32) ((arg1)->pp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_gp_set(void * jarg1, int jarg2) {
  Trade *arg1 = (Trade *) 0 ;
  int32 arg2 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->gp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trade_gp_get(void * jarg1) {
  int jresult ;
  Trade *arg1 = (Trade *) 0 ;
  int32 result;
  
  arg1 = (Trade *)jarg1; 
  result = (int32) ((arg1)->gp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_sp_set(void * jarg1, int jarg2) {
  Trade *arg1 = (Trade *) 0 ;
  int32 arg2 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->sp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trade_sp_get(void * jarg1) {
  int jresult ;
  Trade *arg1 = (Trade *) 0 ;
  int32 result;
  
  arg1 = (Trade *)jarg1; 
  result = (int32) ((arg1)->sp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trade_cp_set(void * jarg1, int jarg2) {
  Trade *arg1 = (Trade *) 0 ;
  int32 arg2 ;
  
  arg1 = (Trade *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->cp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trade_cp_get(void * jarg1) {
  int jresult ;
  Trade *arg1 = (Trade *) 0 ;
  int32 result;
  
  arg1 = (Trade *)jarg1; 
  result = (int32) ((arg1)->cp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Trade_GetOwner(void * jarg1) {
  void * jresult ;
  Trade *arg1 = (Trade *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Trade *)jarg1; 
  result = (Mob *)((Trade const *)arg1)->GetOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtraAttackOptions() {
  void * jresult ;
  ExtraAttackOptions *result = 0 ;
  
  result = (ExtraAttackOptions *)new ExtraAttackOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_damage_percent_set(void * jarg1, float jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->damage_percent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ExtraAttackOptions_damage_percent_get(void * jarg1) {
  float jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (float) ((arg1)->damage_percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_damage_flat_set(void * jarg1, long long jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int64 arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->damage_flat = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ExtraAttackOptions_damage_flat_get(void * jarg1) {
  long long jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int64 result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int64) ((arg1)->damage_flat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_armor_pen_percent_set(void * jarg1, float jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->armor_pen_percent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ExtraAttackOptions_armor_pen_percent_get(void * jarg1) {
  float jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (float) ((arg1)->armor_pen_percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_armor_pen_flat_set(void * jarg1, int jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->armor_pen_flat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtraAttackOptions_armor_pen_flat_get(void * jarg1) {
  int jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int) ((arg1)->armor_pen_flat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_crit_percent_set(void * jarg1, float jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->crit_percent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ExtraAttackOptions_crit_percent_get(void * jarg1) {
  float jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (float) ((arg1)->crit_percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_crit_flat_set(void * jarg1, float jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->crit_flat = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ExtraAttackOptions_crit_flat_get(void * jarg1) {
  float jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (float) ((arg1)->crit_flat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_hate_percent_set(void * jarg1, float jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->hate_percent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ExtraAttackOptions_hate_percent_get(void * jarg1) {
  float jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  float result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (float) ((arg1)->hate_percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_hate_flat_set(void * jarg1, int jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hate_flat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtraAttackOptions_hate_flat_get(void * jarg1) {
  int jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int) ((arg1)->hate_flat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_hit_chance_set(void * jarg1, int jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hit_chance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtraAttackOptions_hit_chance_get(void * jarg1) {
  int jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int) ((arg1)->hit_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_melee_damage_bonus_flat_set(void * jarg1, int jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->melee_damage_bonus_flat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtraAttackOptions_melee_damage_bonus_flat_get(void * jarg1) {
  int jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int) ((arg1)->melee_damage_bonus_flat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_skilldmgtaken_bonus_flat_set(void * jarg1, int jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->skilldmgtaken_bonus_flat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtraAttackOptions_skilldmgtaken_bonus_flat_get(void * jarg1) {
  int jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int) ((arg1)->skilldmgtaken_bonus_flat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraAttackOptions_range_percent_set(void * jarg1, int jarg2) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int arg2 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->range_percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExtraAttackOptions_range_percent_get(void * jarg1) {
  int jresult ;
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  int result;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  result = (int) ((arg1)->range_percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExtraAttackOptions(void * jarg1) {
  ExtraAttackOptions *arg1 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (ExtraAttackOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTable_max_extra_set(void * jarg1, int jarg2) {
  DamageTable *arg1 = (DamageTable *) 0 ;
  int32 arg2 ;
  
  arg1 = (DamageTable *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->max_extra = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageTable_max_extra_get(void * jarg1) {
  int jresult ;
  DamageTable *arg1 = (DamageTable *) 0 ;
  int32 result;
  
  arg1 = (DamageTable *)jarg1; 
  result = (int32) ((arg1)->max_extra);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTable_chance_set(void * jarg1, int jarg2) {
  DamageTable *arg1 = (DamageTable *) 0 ;
  int32 arg2 ;
  
  arg1 = (DamageTable *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->chance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageTable_chance_get(void * jarg1) {
  int jresult ;
  DamageTable *arg1 = (DamageTable *) 0 ;
  int32 result;
  
  arg1 = (DamageTable *)jarg1; 
  result = (int32) ((arg1)->chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTable_minusfactor_set(void * jarg1, int jarg2) {
  DamageTable *arg1 = (DamageTable *) 0 ;
  int32 arg2 ;
  
  arg1 = (DamageTable *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->minusfactor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageTable_minusfactor_get(void * jarg1) {
  int jresult ;
  DamageTable *arg1 = (DamageTable *) 0 ;
  int32 result;
  
  arg1 = (DamageTable *)jarg1; 
  result = (int32) ((arg1)->minusfactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageTable() {
  void * jresult ;
  DamageTable *result = 0 ;
  
  result = (DamageTable *)new DamageTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DamageTable(void * jarg1) {
  DamageTable *arg1 = (DamageTable *) 0 ;
  
  arg1 = (DamageTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_base_damage_set(void * jarg1, long long jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int64 arg2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->base_damage = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_DamageHitInfo_base_damage_get(void * jarg1) {
  long long jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int64 result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result = (int64) ((arg1)->base_damage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_min_damage_set(void * jarg1, long long jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int64 arg2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->min_damage = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_DamageHitInfo_min_damage_get(void * jarg1) {
  long long jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int64 result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result = (int64) ((arg1)->min_damage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_damage_done_set(void * jarg1, long long jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int64 arg2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  arg2 = (int64)jarg2; 
  if (arg1) (arg1)->damage_done = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_DamageHitInfo_damage_done_get(void * jarg1) {
  long long jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int64 result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result = (int64) ((arg1)->damage_done);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_offense_set(void * jarg1, int jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int arg2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->offense = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageHitInfo_offense_get(void * jarg1) {
  int jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result = (int) ((arg1)->offense);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_tohit_set(void * jarg1, int jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int arg2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tohit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageHitInfo_tohit_get(void * jarg1) {
  int jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result = (int) ((arg1)->tohit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_hand_set(void * jarg1, int jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int arg2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hand = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageHitInfo_hand_get(void * jarg1) {
  int jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  int result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result = (int) ((arg1)->hand);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageHitInfo_skill_set(void * jarg1, void * jarg2) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->skill = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageHitInfo_skill_get(void * jarg1) {
  void * jresult ;
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  EQ::skills::SkillType result;
  
  arg1 = (DamageHitInfo *)jarg1; 
  result =  ((arg1)->skill);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageHitInfo() {
  void * jresult ;
  DamageHitInfo *result = 0 ;
  
  result = (DamageHitInfo *)new DamageHitInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DamageHitInfo(void * jarg1) {
  DamageHitInfo *arg1 = (DamageHitInfo *) 0 ;
  
  arg1 = (DamageHitInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionInvite_expedition_id_set(void * jarg1, unsigned int jarg2) {
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->expedition_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExpeditionInvite_expedition_id_get(void * jarg1) {
  unsigned int jresult ;
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  uint32_t result;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  result = (uint32_t) ((arg1)->expedition_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionInvite_inviter_name_set(void * jarg1, const char * jarg2) {
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->inviter_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionInvite_inviter_name_get(void * jarg1) {
  const char * jresult ;
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  result = (std::string *) & ((arg1)->inviter_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExpeditionInvite_swap_remove_name_set(void * jarg1, const char * jarg2) {
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->swap_remove_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ExpeditionInvite_swap_remove_name_get(void * jarg1) {
  const char * jresult ;
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  result = (std::string *) & ((arg1)->swap_remove_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExpeditionInvite() {
  void * jresult ;
  ExpeditionInvite *result = 0 ;
  
  result = (ExpeditionInvite *)new ExpeditionInvite();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExpeditionInvite(void * jarg1) {
  ExpeditionInvite *arg1 = (ExpeditionInvite *) 0 ;
  
  arg1 = (ExpeditionInvite *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataBucketCache_bucket_id_set(void * jarg1, unsigned long long jarg2) {
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->bucket_id = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_DataBucketCache_bucket_id_get(void * jarg1) {
  unsigned long long jresult ;
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  uint64_t result;
  
  arg1 = (DataBucketCache *)jarg1; 
  result = (uint64_t) ((arg1)->bucket_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataBucketCache_bucket_key_set(void * jarg1, const char * jarg2) {
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bucket_key = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DataBucketCache_bucket_key_get(void * jarg1) {
  const char * jresult ;
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  result = (std::string *) & ((arg1)->bucket_key);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataBucketCache_bucket_value_set(void * jarg1, const char * jarg2) {
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bucket_value = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DataBucketCache_bucket_value_get(void * jarg1) {
  const char * jresult ;
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  result = (std::string *) & ((arg1)->bucket_value);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DataBucketCache_bucket_expires_set(void * jarg1, unsigned int jarg2) {
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bucket_expires = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DataBucketCache_bucket_expires_get(void * jarg1) {
  unsigned int jresult ;
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  uint32_t result;
  
  arg1 = (DataBucketCache *)jarg1; 
  result = (uint32_t) ((arg1)->bucket_expires);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DataBucketCache() {
  void * jresult ;
  DataBucketCache *result = 0 ;
  
  result = (DataBucketCache *)new DataBucketCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DataBucketCache(void * jarg1) {
  DataBucketCache *arg1 = (DataBucketCache *) 0 ;
  
  arg1 = (DataBucketCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_entity_list_set(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  entity_list = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_entity_list_get() {
  void * jresult ;
  EntityList *result = 0 ;
  
  result = (EntityList *)&entity_list;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Entity() {
  void * jresult ;
  Entity *result = 0 ;
  
  result = (Entity *)new Entity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Entity(void * jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  arg1 = (Entity *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsClient(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsClient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsNPC(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsNPC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsMob(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsMob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsMerc(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsMerc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsCorpse(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsPlayerCorpse(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsPlayerCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsNPCCorpse(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsNPCCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsObject(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsDoor(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsDoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsTrap(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsTrap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsBeacon(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsBeacon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsEncounter(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsEncounter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsBot(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsBot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsAura(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsAura();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsOfClientBot(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsOfClientBot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_IsOfClientBotMerc(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)((Entity const *)arg1)->IsOfClientBotMerc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_Process(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Entity_Save(void * jarg1) {
  unsigned int jresult ;
  Entity *arg1 = (Entity *) 0 ;
  bool result;
  
  arg1 = (Entity *)jarg1; 
  result = (bool)(arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Entity_Depop__SWIG_0(void * jarg1, unsigned int jarg2) {
  Entity *arg1 = (Entity *) 0 ;
  bool arg2 ;
  
  arg1 = (Entity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Depop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Entity_Depop__SWIG_1(void * jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  arg1 = (Entity *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToClient__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Client *)(arg1)->CastToClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToNPC__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (NPC *)(arg1)->CastToNPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToMob__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Mob *)(arg1)->CastToMob();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToMerc__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Merc *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Merc *)(arg1)->CastToMerc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToCorpse__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Corpse *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Corpse *)(arg1)->CastToCorpse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToObject__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Object *)(arg1)->CastToObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToDoors__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Doors *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Doors *)(arg1)->CastToDoors();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToTrap__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Trap *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Trap *)(arg1)->CastToTrap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToBeacon__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Beacon *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Beacon *)(arg1)->CastToBeacon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToEncounter__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Encounter *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Encounter *)(arg1)->CastToEncounter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Entity_GetInitialId(void * jarg1) {
  unsigned short jresult ;
  Entity *arg1 = (Entity *) 0 ;
  uint16 *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (uint16 *) &((Entity const *)arg1)->GetInitialId();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Entity_GetID(void * jarg1) {
  unsigned short jresult ;
  Entity *arg1 = (Entity *) 0 ;
  uint16 *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (uint16 *) &((Entity const *)arg1)->GetID();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_GetSpawnTimeStamp(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  time_t *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (time_t *) &((Entity const *)arg1)->GetSpawnTimeStamp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Entity_GetName(void * jarg1) {
  char * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  char *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (char *)(arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Entity_CastToBot__SWIG_0(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Bot *)(arg1)->CastToBot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_id_set(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_id_get(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_type_set(void * jarg1, int jarg2) {
  Area *arg1 = (Area *) 0 ;
  int arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Area_type_get(void * jarg1) {
  int jresult ;
  Area *arg1 = (Area *) 0 ;
  int result;
  
  arg1 = (Area *)jarg1; 
  result = (int) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_min_x_set(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_min_x_get(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float) ((arg1)->min_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_max_x_set(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_max_x_get(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float) ((arg1)->max_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_min_y_set(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_min_y_get(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float) ((arg1)->min_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_max_y_set(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_max_y_get(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float) ((arg1)->max_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_min_z_set(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_min_z_get(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float) ((arg1)->min_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Area_max_z_set(void * jarg1, float jarg2) {
  Area *arg1 = (Area *) 0 ;
  float arg2 ;
  
  arg1 = (Area *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Area_max_z_get(void * jarg1) {
  float jresult ;
  Area *arg1 = (Area *) 0 ;
  float result;
  
  arg1 = (Area *)jarg1; 
  result = (float) ((arg1)->max_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Area() {
  void * jresult ;
  Area *result = 0 ;
  
  result = (Area *)new Area();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Area(void * jarg1) {
  Area *arg1 = (Area *) 0 ;
  
  arg1 = (Area *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntityList() {
  void * jresult ;
  EntityList *result = 0 ;
  
  result = (EntityList *)new EntityList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EntityList(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMob__SWIG_0(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Mob *)(arg1)->GetMob(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMobID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Mob *)(arg1)->GetMobID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMob__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Mob *)(arg1)->GetMob((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMobByNpcTypeID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Mob *)(arg1)->GetMobByNpcTypeID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_IsMobSpawnedByNpcTypeID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsMobSpawnedByNpcTypeID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_IsNPCSpawned(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::vector< uint32 > arg2 ;
  std::vector< uint32 > *argp2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  argp2 = (std::vector< uint32 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< uint32 >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->IsNPCSpawned(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_CountSpawnedNPCs(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::vector< uint32 > arg2 ;
  std::vector< uint32 > *argp2 ;
  uint32 result;
  
  arg1 = (EntityList *)jarg1; 
  argp2 = (std::vector< uint32 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< uint32 >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint32)(arg1)->CountSpawnedNPCs(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetNPCByID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (NPC *)(arg1)->GetNPCByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetNPCByNPCTypeID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (NPC *)(arg1)->GetNPCByNPCTypeID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetNPCBySpawnID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (NPC *)(arg1)->GetNPCBySpawnID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMercByID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Merc *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Merc *)(arg1)->GetMercByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientByName(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Client *)(arg1)->GetClientByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientByAccID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetClientByAccID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientByID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Client *)(arg1)->GetClientByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientByCharID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetClientByCharID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientByWID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetClientByWID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientByLSID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetClientByLSID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomBot__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  Bot *arg4 = (Bot *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Bot *)jarg4; 
  result = (Bot *)(arg1)->GetRandomBot((glm::vec3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomBot__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  Bot *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (Bot *)(arg1)->GetRandomBot((glm::vec3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomBot__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  Bot *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (Bot *)(arg1)->GetRandomBot((glm::vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomBot__SWIG_3(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (Bot *)(arg1)->GetRandomBot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomClient__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  Client *arg4 = (Client *) 0 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Client *)jarg4; 
  result = (Client *)(arg1)->GetRandomClient((glm::vec3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomClient__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (Client *)(arg1)->GetRandomClient((glm::vec3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomClient__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (Client *)(arg1)->GetRandomClient((glm::vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomClient__SWIG_3(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (Client *)(arg1)->GetRandomClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomNPC__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  NPC *arg4 = (NPC *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (NPC *)jarg4; 
  result = (NPC *)(arg1)->GetRandomNPC((glm::vec3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomNPC__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (NPC *)(arg1)->GetRandomNPC((glm::vec3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomNPC__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (NPC *)(arg1)->GetRandomNPC((glm::vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomNPC__SWIG_3(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (NPC *)(arg1)->GetRandomNPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomMob__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (Mob *)jarg4; 
  result = (Mob *)(arg1)->GetRandomMob((glm::vec3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomMob__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float arg3 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = (Mob *)(arg1)->GetRandomMob((glm::vec3 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomMob__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  glm::vec3 *arg2 = 0 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (Mob *)(arg1)->GetRandomMob((glm::vec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRandomMob__SWIG_3(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (Mob *)(arg1)->GetRandomMob();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetGroupByMob(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Group *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (Group *)(arg1)->GetGroupByMob(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetGroupByMobName(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Group *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Group *)(arg1)->GetGroupByMobName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_IsInSameGroupOrRaidGroup(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Client *arg3 = (Client *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (Client *)jarg3; 
  result = (bool)(arg1)->IsInSameGroupOrRaidGroup(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetGroupByClient(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Group *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (Group *)(arg1)->GetGroupByClient(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetGroupByID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Group *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Group *)(arg1)->GetGroupByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetGroupByLeaderName(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Group *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Group *)(arg1)->GetGroupByLeaderName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRaidByClient(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (Raid *)(arg1)->GetRaidByClient(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRaidByID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Raid *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Raid *)(arg1)->GetRaidByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRaidByBotName(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Raid *)(arg1)->GetRaidByBotName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRaidByBot(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Bot *)jarg2; 
  result = (Raid *)(arg1)->GetRaidByBot((Bot const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetRaidByName(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Raid *)(arg1)->GetRaidByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCorpseByOwner(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Corpse *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (Corpse *)(arg1)->GetCorpseByOwner(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCorpseByOwnerWithinRange(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  Corpse *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (Corpse *)(arg1)->GetCorpseByOwnerWithinRange(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCorpseByID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Corpse *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Corpse *)(arg1)->GetCorpseByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCorpseByDBID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Corpse *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Corpse *)(arg1)->GetCorpseByDBID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCorpseByName(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Corpse *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Corpse *)(arg1)->GetCorpseByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetSpawnByID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Spawn2 *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Spawn2 *)(arg1)->GetSpawnByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_FindCorpseDragger(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Client *)(arg1)->FindCorpseDragger(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetObjectByID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Object *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Object *)(arg1)->GetObjectByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetObjectByDBID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Object *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Object *)(arg1)->GetObjectByDBID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetDoorsByID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Doors *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Doors *)(arg1)->GetDoorsByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetDoorsByDoorID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Doors *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Doors *)(arg1)->GetDoorsByDoorID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetDoorsByDBID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Doors *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Doors *)(arg1)->GetDoorsByDBID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllCorpsesByCharID(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveAllCorpsesByCharID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveCorpseByDBID(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveCorpseByDBID(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntityList_RezzAllCorpsesByCharID(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->RezzAllCorpsesByCharID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DespawnGridNodes(void * jarg1, int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  int32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->DespawnGridNodes(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_IsMobInZone(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsMobInZone(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearClientPetitionQueue(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->ClearClientPetitionQueue();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_CanAddHateForMob(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CanAddHateForMob(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMOTD(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildMOTD(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildChannel(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildChannel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildURL(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildURL(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildSpawnAppearance(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildSpawnAppearance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMembers(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildMembers(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMembersList(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildMembersList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberAdd(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, const char * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  std::string arg8 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg8)->assign(jarg8); 
  (arg1)->SendGuildMemberAdd(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberRename(void * jarg1, unsigned int jarg2, const char * jarg3, const char * jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SendGuildMemberRename(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberRemove(void * jarg1, unsigned int jarg2, const char * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendGuildMemberRemove(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberLevel(void * jarg1, unsigned int jarg2, unsigned int jarg3, const char * jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::string arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SendGuildMemberLevel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberRankAltBanker(void * jarg1, unsigned int jarg2, unsigned int jarg3, const char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::string arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->SendGuildMemberRankAltBanker(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberPublicNote(void * jarg1, unsigned int jarg2, const char * jarg3, const char * jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SendGuildMemberPublicNote(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildMemberDetails(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, const char * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  std::string arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg5)->assign(jarg5); 
  (arg1)->SendGuildMemberDetails(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildRenameGuild(void * jarg1, unsigned int jarg2, const char * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendGuildRenameGuild(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RefreshAllGuildInfo(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RefreshAllGuildInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGuildList(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->SendGuildList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GuildSetPreRoFBankerFlag(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->GuildSetPreRoFBankerFlag(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_CheckGroupList(void * jarg1, char * jarg2, int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->CheckGroupList((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GroupProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->GroupProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RaidProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RaidProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DoorProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->DoorProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ObjectProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->ObjectProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_CorpseProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->CorpseProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MobProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->MobProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_TrapProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->TrapProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_BeaconProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->BeaconProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_EncounterProcess(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->EncounterProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ProcessMove__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  glm::vec3 *arg3 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  (arg1)->ProcessMove(arg2,(glm::vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ProcessMove__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->ProcessMove(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddArea(void * jarg1, int jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  EntityList *arg1 = (EntityList *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  (arg1)->AddArea(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveArea(void * jarg1, int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  int arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearAreas(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->ClearAreas();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ReloadMerchants(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->ReloadMerchants();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ProcessProximitySay__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  uint8 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->ProcessProximitySay((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ProcessProximitySay__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->ProcessProximitySay((char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_FindDoor(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint8 arg2 ;
  Doors *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (Doors *)(arg1)->FindDoor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_FindObject(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Object *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Object *)(arg1)->FindObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_FindNearbyObject(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Object *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Object *)(arg1)->FindNearbyObject(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_MakeDoorSpawnPacket(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  Client *arg3 = (Client *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (Client *)jarg3; 
  result = (bool)(arg1)->MakeDoorSpawnPacket(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_MakeTrackPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->MakeTrackPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendTraders(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendTraders(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddClient(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->AddClient(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddNPC__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddNPC(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddNPC__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddNPC(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddNPC__SWIG_2(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->AddNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddMerc__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Merc *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddMerc(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddMerc__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Merc *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddMerc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddMerc__SWIG_2(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Merc *)jarg2; 
  (arg1)->AddMerc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddCorpse__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Corpse *arg2 = (Corpse *) 0 ;
  uint32 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Corpse *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddCorpse(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddCorpse__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Corpse *arg2 = (Corpse *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Corpse *)jarg2; 
  (arg1)->AddCorpse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddObject__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Object *arg2 = (Object *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Object *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddObject(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddObject__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->AddObject(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddGroup__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Group *arg2 = (Group *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Group *)jarg2; 
  (arg1)->AddGroup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddGroup__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Group *arg2 = (Group *) 0 ;
  uint32 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Group *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddGroup(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddRaid__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Raid *)jarg2; 
  (arg1)->AddRaid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddRaid__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  uint32 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Raid *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddRaid(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddDoor(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Doors *arg2 = (Doors *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Doors *)jarg2; 
  (arg1)->AddDoor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddTrap(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Trap *arg2 = (Trap *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Trap *)jarg2; 
  (arg1)->AddTrap(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddBeacon(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Beacon *arg2 = (Beacon *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Beacon *)jarg2; 
  (arg1)->AddBeacon(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddEncounter(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Encounter *arg2 = (Encounter *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Encounter *)jarg2; 
  (arg1)->AddEncounter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddProximity(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->AddProximity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Clear(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveMob(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveMob(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveClient__SWIG_0(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveClient(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveClient__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->RemoveClient(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveNPC(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveNPC(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveMerc(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveMerc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveGroup(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->RemoveGroup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveCorpse(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveCorpse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveDoor(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveDoor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveTrap(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveTrap(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveObject(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveObject(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveProximity(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveProximity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveMobFromCloseLists(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->RemoveMobFromCloseLists(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAuraFromMobs(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveAuraFromMobs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllMobs(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllMobs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllClients(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllClients();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllNPCs(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllNPCs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllBots(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllBots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllMercs(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllMercs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllGroups(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllGroups();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllCorpses(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllCorpses();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllDoors(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllDoors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DespawnAllDoors(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->DespawnAllDoors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RespawnAllDoors(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RespawnAllDoors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllTraps(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllTraps();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllObjects(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllObjects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllLocalities(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllLocalities();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllRaids(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllRaids();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveAllEncounters(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->RemoveAllEncounters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DestroyTempPets(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DestroyTempPets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddTempPetsToHateList__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddTempPetsToHateList(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddTempPetsToHateList__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->AddTempPetsToHateList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddTempPetsToHateListOnOwnerDamage(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int32 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->AddTempPetsToHateListOnOwnerDamage(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityMob__SWIG_0(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityMob(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityMerc(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityMerc(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityDoor(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityDoor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityObject(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityCorpse__SWIG_0(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityCorpse(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityTrap(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityTrap(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityBeacon(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityBeacon(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityEncounter(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Entity *)(arg1)->GetEntityEncounter(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityMob__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Entity *)(arg1)->GetEntityMob((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetEntityCorpse__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Entity *)(arg1)->GetEntityCorpse((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_StopMobAI(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->StopMobAI();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DescribeAggro(void * jarg1, void * jarg2, void * jarg3, float jarg4, unsigned int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  NPC *arg3 = (NPC *) 0 ;
  float arg4 ;
  bool arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (NPC *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->DescribeAggro(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetFilteredEntityList__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  EntityFilterType arg4 ;
  EntityFilterType *argp4 ;
  std::vector< Mob * > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EntityFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->GetFilteredEntityList(arg2,arg3,arg4);
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetFilteredEntityList__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  std::vector< Mob * > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (arg1)->GetFilteredEntityList(arg2,arg3);
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetFilteredEntityList__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  std::vector< Mob * > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (arg1)->GetFilteredEntityList(arg2);
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DamageArea__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint32 arg4 ;
  EntityFilterType arg5 ;
  bool arg6 ;
  EntityFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint32)jarg4; 
  argp5 = (EntityFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->DamageArea(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DamageArea__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned int jarg4, void * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint32 arg4 ;
  EntityFilterType arg5 ;
  EntityFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint32)jarg4; 
  argp5 = (EntityFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->DamageArea(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DamageArea__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint32 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->DamageArea(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DamageArea__SWIG_3(void * jarg1, void * jarg2, long long jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->DamageArea(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Marquee__SWIG_0(void * jarg1, unsigned int jarg2, const char * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  uint32 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (uint32)jarg4; 
  (arg1)->Marquee(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Marquee__SWIG_1(void * jarg1, unsigned int jarg2, const char * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->Marquee(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Marquee__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, const char * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  std::string arg7 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->Marquee(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Message(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->Message(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageStatus(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4, char * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->MessageStatus(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageClose(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, char * jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->MessageClose(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageClose(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, char * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  char *arg7 = (char *) 0 ;
  void *arg8 = 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (char *)jarg7; 
  (arg1)->FilteredMessageClose(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->MessageString(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14, char * jarg15) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  char *arg15 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  arg15 = (char *)jarg15; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14,(char const *)arg15);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7, char * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, char * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  eqFilterType arg5 ;
  uint32 arg6 ;
  eqFilterType *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint32)jarg6; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14, char * jarg15) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  char *arg15 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  arg15 = (char *)jarg15; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14,(char const *)arg15);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8, char * jarg9) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, char * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageCloseString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, unsigned int jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->MessageCloseString(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14, char * jarg15, char * jarg16, char * jarg17) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  char *arg15 = (char *) 0 ;
  char *arg16 = (char *) 0 ;
  char *arg17 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  arg15 = (char *)jarg15; 
  arg16 = (char *)jarg16; 
  arg17 = (char *)jarg17; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14,(char const *)arg15,(char const *)arg16,(char const *)arg17);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14, char * jarg15, char * jarg16) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  char *arg15 = (char *) 0 ;
  char *arg16 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  arg15 = (char *)jarg15; 
  arg16 = (char *)jarg16; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14,(char const *)arg15,(char const *)arg16);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14, char * jarg15) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  char *arg15 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  arg15 = (char *)jarg15; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14,(char const *)arg15);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9, char * jarg10) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8, char * jarg9) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  char *arg9 = (char *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7, void * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (Mob *)jarg8; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_FilteredMessageCloseString__SWIG_10(void * jarg1, void * jarg2, unsigned int jarg3, float jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float arg4 ;
  uint32 arg5 ;
  eqFilterType arg6 ;
  uint32 arg7 ;
  eqFilterType *argp6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  argp6 = (eqFilterType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  (arg1)->FilteredMessageCloseString(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ChannelMessageFromWorld(void * jarg1, char * jarg2, char * jarg3, unsigned char jarg4, unsigned int jarg5, unsigned char jarg6, unsigned char jarg7, char * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint8 arg6 ;
  uint8 arg7 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (uint8)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->ChannelMessageFromWorld((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ChannelMessage__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3, unsigned char jarg4, char * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  uint8 arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->ChannelMessage(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ChannelMessage__SWIG_1(void * jarg1, void * jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5, char * jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->ChannelMessage(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZoneSpawns(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZoneSpawns(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZonePVPUpdates(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZonePVPUpdates(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZoneSpawnsBulk(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZoneSpawnsBulk(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Save(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->Save();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZoneCorpses(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZoneCorpses(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZoneCorpsesBulk(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZoneCorpsesBulk(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZoneObjects(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZoneObjects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendZoneAppearance(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendZoneAppearance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendNimbusEffects(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendNimbusEffects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendUntargetable(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendUntargetable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendAppearanceEffects(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendAppearanceEffects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendIllusionWearChange(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendIllusionWearChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DuelMessage(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DuelMessage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QuestJournalledSayClose(void * jarg1, void * jarg2, float jarg3, char * jarg4, char * jarg5, void * jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  Journal::Options *arg6 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (Journal::Options *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Journal::Options & is null", 0);
    return ;
  } 
  (arg1)->QuestJournalledSayClose(arg2,arg3,(char const *)arg4,(char const *)arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GroupMessage(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->GroupMessage(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ExpeditionWarning(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ExpeditionWarning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateGuildTributes(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->UpdateGuildTributes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromTargets__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveFromTargets(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromTargets__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromTargetsFadingMemories__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  (arg1)->RemoveFromTargetsFadingMemories(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromTargetsFadingMemories__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveFromTargetsFadingMemories(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromTargetsFadingMemories__SWIG_2(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromTargetsFadingMemories(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromXTargets(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromAutoXTargets(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromAutoXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ReplaceWithTarget(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->ReplaceWithTarget(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueCloseClients__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5, void * jarg6, unsigned int jarg7, void * jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  float arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  bool arg7 ;
  eqFilterType arg8 ;
  eqFilterType *argp8 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (Mob *)jarg6; 
  arg7 = jarg7 ? true : false; 
  argp8 = (eqFilterType *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->QueueCloseClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueCloseClients__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5, void * jarg6, unsigned int jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  float arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  bool arg7 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (Mob *)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->QueueCloseClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueCloseClients__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5, void * jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  float arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (Mob *)jarg6; 
  (arg1)->QueueCloseClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueCloseClients__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  float arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  (arg1)->QueueCloseClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueCloseClients__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueCloseClients(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueCloseClients__SWIG_5(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueCloseClients(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClients__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClients__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClients__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsStatus__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned char jarg5, unsigned char jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->QueueClientsStatus(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsStatus__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned char jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  uint8 arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint8)jarg5; 
  (arg1)->QueueClientsStatus(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsStatus__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueClientsStatus(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsStatus__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueClientsStatus(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsGuild__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  uint32 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->QueueClientsGuild((EQApplicationPacket const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsGuild__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->QueueClientsGuild((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsGuildBankItemUpdate(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  GuildBankItemUpdate_Struct *arg2 = (GuildBankItemUpdate_Struct *) 0 ;
  uint32 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (GuildBankItemUpdate_Struct *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->QueueClientsGuildBankItemUpdate((GuildBankItemUpdate_Struct const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  bool arg6 ;
  bool arg7 ;
  uint32 arg8 ;
  bool arg9 ;
  bool arg10 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (uint32)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  bool arg6 ;
  bool arg7 ;
  uint32 arg8 ;
  bool arg9 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (uint32)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  bool arg6 ;
  bool arg7 ;
  uint32 arg8 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (uint32)jarg8; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  bool arg6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_5(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_6(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByTarget__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueClientsByTarget(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByXTarget__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  EQ::versions::ClientVersionBitmask arg5 ;
  EQ::versions::ClientVersionBitmask *argp5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (EQ::versions::ClientVersionBitmask *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::versions::ClientVersionBitmask", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->QueueClientsByXTarget(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByXTarget__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueClientsByXTarget(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueClientsByXTarget__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueClientsByXTarget(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_QueueToGroupsForNPCHealthAA(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueToGroupsForNPCHealthAA(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AEAttack__SWIG_0(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, unsigned int jarg6, int jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  int arg7 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  (arg1)->AEAttack(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AEAttack__SWIG_1(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AEAttack(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AEAttack__SWIG_2(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->AEAttack(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AEAttack__SWIG_3(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->AEAttack(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AEAttack__SWIG_4(void * jarg1, void * jarg2, float jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AEAttack(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AETaunt__SWIG_0(void * jarg1, void * jarg2, float jarg3, int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  float arg3 ;
  int32 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->AETaunt(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AETaunt__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  float arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AETaunt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AETaunt__SWIG_2(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->AETaunt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AESpell__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5, short jarg6, void * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  bool arg5 ;
  int16 arg6 ;
  int *arg7 = (int *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  arg7 = (int *)jarg7; 
  (arg1)->AESpell(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AESpell__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5, short jarg6) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  bool arg5 ;
  int16 arg6 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  (arg1)->AESpell(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AESpell__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  bool arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AESpell(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AESpell__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->AESpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MassGroupBuff__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4, unsigned int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  bool arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->MassGroupBuff(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MassGroupBuff__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->MassGroupBuff(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetTrapTrigger(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Trap *arg2 = (Trap *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Trap *)jarg2; 
  result = (Mob *)(arg1)->GetTrapTrigger(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendAlarm(void * jarg1, void * jarg2, void * jarg3, unsigned char jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Trap *arg2 = (Trap *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint8 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Trap *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->SendAlarm(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_FindNearbyTrap__SWIG_0(void * jarg1, void * jarg2, float jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float *arg4 = 0 ;
  bool arg5 ;
  Trap *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (Trap *)(arg1)->FindNearbyTrap(arg2,arg3,*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_FindNearbyTrap__SWIG_1(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float *arg4 = 0 ;
  Trap *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  result = (Trap *)(arg1)->FindNearbyTrap(arg2,arg3,*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddHealAggro(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->AddHealAggro(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_OpenDoorsNear(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->OpenDoorsNear(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateWho__SWIG_0(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  bool arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UpdateWho(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateWho__SWIG_1(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->UpdateWho();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EntityList_MakeNameUnique(void * jarg1, char * jarg2) {
  char * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->MakeNameUnique(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EntityList_RemoveNumbers(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)EntityList::RemoveNumbers(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SignalMobsByNPCID(void * jarg1, unsigned int jarg2, int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SignalMobsByNPCID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveEntity(void * jarg1, unsigned short jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveEntity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendPetitionToAdmins__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Petition *arg2 = (Petition *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Petition *)jarg2; 
  (arg1)->SendPetitionToAdmins(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendPetitionToAdmins__SWIG_1(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->SendPetitionToAdmins();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddLootToNPCS(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddLootToNPCS(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ListNPCCorpses(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ListNPCCorpses(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ListPlayerCorpses(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ListPlayerCorpses(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_DeleteNPCCorpses(void * jarg1) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 result;
  
  arg1 = (EntityList *)jarg1; 
  result = (uint32)(arg1)->DeleteNPCCorpses();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_DeletePlayerCorpses(void * jarg1) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 result;
  
  arg1 = (EntityList *)jarg1; 
  result = (uint32)(arg1)->DeletePlayerCorpses();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_CorpseFix(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->CorpseFix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_HalveAggro(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->HalveAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DoubleAggro(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoubleAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateHoTT(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->UpdateHoTT(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_Process(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->Process();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearAggro__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ClearAggro(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearAggro__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ClearAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearWaterAggro(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ClearWaterAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearFeignAggro(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ClearFeignAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearZoneFeignAggro(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ClearZoneFeignAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AggroZone__SWIG_0(void * jarg1, void * jarg2, long long jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AggroZone(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AggroZone__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->AggroZone(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_Fighting(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Fighting(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromHateLists__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveFromHateLists(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveFromHateLists__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromHateLists(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RemoveDebuffs(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveDebuffs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_MessageGroup(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->MessageGroup(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_LimitAddNPC(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->LimitAddNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_LimitRemoveNPC(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->LimitRemoveNPC(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_LimitCheckType(void * jarg1, unsigned int jarg2, int jarg3) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->LimitCheckType(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_LimitCheckGroup(void * jarg1, unsigned int jarg2, int jarg3) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->LimitCheckGroup(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_LimitCheckName(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->LimitCheckName((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntityList_GetHatedCount(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool arg4 ;
  int result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->GetHatedCount(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_Merc_AICheckCloseBeneficialSpells(void * jarg1, void * jarg2, unsigned char jarg3, float jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  uint8 arg3 ;
  float arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Merc *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->Merc_AICheckCloseBeneficialSpells(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetTargetForMez(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (Mob *)(arg1)->GetTargetForMez(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_CheckNPCsClose(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (uint32)(arg1)->CheckNPCsClose(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClosestCorpse(void * jarg1, void * jarg2, char * jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  char *arg3 = (char *) 0 ;
  Corpse *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (Corpse *)(arg1)->GetClosestCorpse(arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_TryWakeTheDead(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->TryWakeTheDead(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClosestBanker(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 *arg3 = 0 ;
  NPC *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint32 & is null", 0);
    return 0;
  } 
  result = (NPC *)(arg1)->GetClosestBanker(arg2,*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_CameraEffect(void * jarg1, unsigned int jarg2, float jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->CameraEffect(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClosestMobByBodyType__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bodyType arg3 ;
  bool arg4 ;
  bodyType *argp3 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (bodyType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null bodyType", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (Mob *)(arg1)->GetClosestMobByBodyType(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClosestMobByBodyType__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bodyType arg3 ;
  bodyType *argp3 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (bodyType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null bodyType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (Mob *)(arg1)->GetClosestMobByBodyType(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ForceGroupUpdate(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ForceGroupUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGroupLeave(void * jarg1, unsigned int jarg2, char * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SendGroupLeave(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendGroupJoin(void * jarg1, unsigned int jarg2, char * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SendGroupJoin(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SaveAllClientsTaskState(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->SaveAllClientsTaskState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ReloadAllClientsTaskState__SWIG_0(void * jarg1, int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  int arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ReloadAllClientsTaskState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ReloadAllClientsTaskState__SWIG_1(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->ReloadAllClientsTaskState();
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateGroundObject__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  glm::vec4 *arg3 = 0 ;
  uint32 arg4 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint32)jarg4; 
  result = (uint16)(arg1)->CreateGroundObject(arg2,(glm::vec4 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateGroundObject__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  glm::vec4 *arg3 = 0 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (uint16)(arg1)->CreateGroundObject(arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateGroundObjectFromModel__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4, unsigned int jarg5) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (uint16)(arg1)->CreateGroundObjectFromModel((char const *)arg2,(glm::vec4 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateGroundObjectFromModel__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint8 arg4 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint8)jarg4; 
  result = (uint16)(arg1)->CreateGroundObjectFromModel((char const *)arg2,(glm::vec4 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateGroundObjectFromModel__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (uint16)(arg1)->CreateGroundObjectFromModel((char const *)arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateDoor__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4, unsigned short jarg5) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint8 arg4 ;
  uint16 arg5 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint8)jarg4; 
  arg5 = (uint16)jarg5; 
  result = (uint16)(arg1)->CreateDoor((char const *)arg2,(glm::vec4 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateDoor__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint8 arg4 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint8)jarg4; 
  result = (uint16)(arg1)->CreateDoor((char const *)arg2,(glm::vec4 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_CreateDoor__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (uint16)(arg1)->CreateDoor((char const *)arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ZoneWho(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Who_All_Struct *arg3 = (Who_All_Struct *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (Who_All_Struct *)jarg3; 
  (arg1)->ZoneWho(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UnMarkNPC(void * jarg1, unsigned short jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->UnMarkNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SignalAllClients(void * jarg1, int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  int arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SignalAllClients(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateQGlobal(void * jarg1, unsigned int jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  QGlobal arg3 ;
  QGlobal *argp3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  argp3 = (QGlobal *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null QGlobal", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->UpdateQGlobal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DeleteQGlobal(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (EntityList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->DeleteQGlobal(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendFindableNPCList(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendFindableNPCList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateFindableNPCState(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UpdateFindableNPCState(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_HideCorpses(void * jarg1, void * jarg2, unsigned char jarg3, unsigned char jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint8 arg3 ;
  uint8 arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->HideCorpses(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GateAllClientsToSafeReturn(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->GateAllClientsToSafeReturn();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetMobList__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Mob * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Mob * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Mob * > & is null", 0);
    return ;
  } 
  (arg1)->GetMobList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetNPCList__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< NPC * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< NPC * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< NPC * > & is null", 0);
    return ;
  } 
  (arg1)->GetNPCList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetClientList__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Client * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Client * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Client * > & is null", 0);
    return ;
  } 
  (arg1)->GetClientList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetCorpseList__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Corpse * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Corpse * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Corpse * > & is null", 0);
    return ;
  } 
  (arg1)->GetCorpseList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetObjectList__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Object * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Object * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Object * > & is null", 0);
    return ;
  } 
  (arg1)->GetObjectList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetDoorsList__SWIG_0(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Doors * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Doors * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Doors * > & is null", 0);
    return ;
  } 
  (arg1)->GetDoorsList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetSpawnList(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Spawn2 * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Spawn2 * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Spawn2 * > & is null", 0);
    return ;
  } 
  (arg1)->GetSpawnList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetTargetsForConeArea(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, int jarg6, void * jarg7) {
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  std::list< Mob * > *arg7 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (std::list< Mob * > *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Mob * > & is null", 0);
    return ;
  } 
  (arg1)->GetTargetsForConeArea(arg2,arg3,arg4,arg5,arg6,*arg7);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetTargetsForVirusEffect(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  int32 arg6 ;
  std::vector< Mob * > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int32)jarg6; 
  result = (arg1)->GetTargetsForVirusEffect(arg2,arg3,arg4,arg5,arg6);
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMobList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *) &(arg1)->GetMobList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetNPCList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,NPC *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,NPC *,std::hash< uint16 > > *) &(arg1)->GetNPCList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMercList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Merc *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,Merc *,std::hash< uint16 > > *) &(arg1)->GetMercList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetClientList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Client *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,Client *,std::hash< uint16 > > *) &(arg1)->GetClientList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotList__SWIG_0(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Bot * > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::list< Bot * > *) &(arg1)->GetBotList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotListByCharacterID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (arg1)->GetBotListByCharacterID(arg2,arg3);
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotListByCharacterID__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetBotListByCharacterID(arg2);
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotListByClientName__SWIG_0(void * jarg1, const char * jarg2, unsigned char jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::string arg2 ;
  uint8 arg3 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (EntityList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint8)jarg3; 
  result = (arg1)->GetBotListByClientName(arg2,arg3);
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotListByClientName__SWIG_1(void * jarg1, const char * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (EntityList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetBotListByClientName(arg2);
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SignalAllBotsByOwnerCharacterID(void * jarg1, unsigned int jarg2, int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SignalAllBotsByOwnerCharacterID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SignalAllBotsByOwnerName(void * jarg1, const char * jarg2, int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::string arg2 ;
  int arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  (arg1)->SignalAllBotsByOwnerName(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SignalBotByBotID(void * jarg1, unsigned int jarg2, int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SignalBotByBotID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SignalBotByBotName(void * jarg1, const char * jarg2, int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::string arg2 ;
  int arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  (arg1)->SignalBotByBotName(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCorpseList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Corpse *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,Corpse *,std::hash< uint16 > > *) &(arg1)->GetCorpseList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetObjectList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Object *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,Object *,std::hash< uint16 > > *) &(arg1)->GetObjectList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetDoorsList__SWIG_1(void * jarg1) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Doors *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  result = (std::unordered_map< uint16,Doors *,std::hash< uint16 > > *) &(arg1)->GetDoorsList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCloseMobList__SWIG_0(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  result = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *) &(arg1)->GetCloseMobList(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetCloseMobList__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *) &(arg1)->GetCloseMobList(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DepopAll__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DepopAll(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_DepopAll__SWIG_1(void * jarg1, int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  int arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DepopAll(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EntityList_GetFreeID(void * jarg1) {
  unsigned short jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 result;
  
  arg1 = (EntityList *)jarg1; 
  result = (uint16)(arg1)->GetFreeID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RefreshAutoXTargets(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->RefreshAutoXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_RefreshClientXTargets(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->RefreshClientXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_SendAlternateAdvancementStats(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->SendAlternateAdvancementStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ScanCloseMobs__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16,Mob *,std::hash< uint16 > > & is null", 0);
    return ;
  } 
  arg3 = (Mob *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ScanCloseMobs(*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ScanCloseMobs__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16,Mob *,std::hash< uint16 > > & is null", 0);
    return ;
  } 
  arg3 = (Mob *)jarg3; 
  (arg1)->ScanCloseMobs(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetTrapInfo(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->GetTrapInfo(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_IsTrapGroupSpawned(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (bool)(arg1)->IsTrapGroupSpawned(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateAllTraps__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UpdateAllTraps(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_UpdateAllTraps__SWIG_1(void * jarg1, unsigned int jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  bool arg2 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UpdateAllTraps(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ClearTrapPointers(void * jarg1) {
  EntityList *arg1 = (EntityList *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  (arg1)->ClearTrapPointers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntityList_MovePlayerCorpsesToGraveyard__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->MovePlayerCorpsesToGraveyard(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntityList_MovePlayerCorpsesToGraveyard__SWIG_1(void * jarg1) {
  int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  int result;
  
  arg1 = (EntityList *)jarg1; 
  result = (int)(arg1)->MovePlayerCorpsesToGraveyard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddBot__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddBot(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddBot__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  bool arg3 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddBot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_AddBot__SWIG_2(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Bot *)jarg2; 
  (arg1)->AddBot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_RemoveBot(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveBot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetMobByBotID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Mob *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Mob *)(arg1)->GetMobByBotID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotByBotID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Bot *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Bot *)(arg1)->GetBotByBotID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotByBotName(void * jarg1, void * jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  std::string_view arg2 ;
  std::string_view *argp2 ;
  Bot *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Bot *)(arg1)->GetBotByBotName(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotOwnerByBotEntityID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetBotOwnerByBotEntityID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotOwnerByBotID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetBotOwnerByBotID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EntityList_GetBotsByBotOwnerCharacterID(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::list< Bot * > > result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetBotsByBotOwnerCharacterID(arg2);
  jresult = new std::list< Bot * >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EntityList_Bot_AICheckCloseBeneficialSpells(void * jarg1, void * jarg2, unsigned char jarg3, float jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  EntityList *arg1 = (EntityList *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  uint8 arg3 ;
  float arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->Bot_AICheckCloseBeneficialSpells(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ShowSpawnWindow(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  EntityList *arg1 = (EntityList *) 0 ;
  Client *arg2 = (Client *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ShowSpawnWindow(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_ScanCloseClientMobs(void * jarg1, void * jarg2, void * jarg3) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< uint16,Mob *,std::hash< uint16 > > & is null", 0);
    return ;
  } 
  arg3 = (Mob *)jarg3; 
  (arg1)->ScanCloseClientMobs(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntityList_GetBotList__SWIG_1(void * jarg1, void * jarg2) {
  EntityList *arg1 = (EntityList *) 0 ;
  std::list< Bot * > *arg2 = 0 ;
  
  arg1 = (EntityList *)jarg1; 
  arg2 = (std::list< Bot * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Bot * > & is null", 0);
    return ;
  } 
  (arg1)->GetBotList(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BulkZoneSpawnPacket(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  BulkZoneSpawnPacket *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (BulkZoneSpawnPacket *)new BulkZoneSpawnPacket(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BulkZoneSpawnPacket(void * jarg1) {
  BulkZoneSpawnPacket *arg1 = (BulkZoneSpawnPacket *) 0 ;
  
  arg1 = (BulkZoneSpawnPacket *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BulkZoneSpawnPacket_AddSpawn(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BulkZoneSpawnPacket *arg1 = (BulkZoneSpawnPacket *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  bool result;
  
  arg1 = (BulkZoneSpawnPacket *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  result = (bool)(arg1)->AddSpawn(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulkZoneSpawnPacket_SendBuffer(void * jarg1) {
  BulkZoneSpawnPacket *arg1 = (BulkZoneSpawnPacket *) 0 ;
  
  arg1 = (BulkZoneSpawnPacket *)jarg1; 
  (arg1)->SendBuffer();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_strn0cpy(char * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (char *)strn0cpy(arg1,(char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SPECIAL_ATTACK_PARAMS_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLLISION_BOX_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)COLLISION_BOX_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HP300_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)DeathSave::HP300;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HP8000_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)DeathSave::HP8000;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_aa_title_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->aa_title = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_aa_title_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->aa_title);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_beard_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->beard = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_beard_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->beard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_beard_color_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->beard_color = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_beard_color_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->beard_color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_drakkin_details_set(void * jarg1, unsigned int jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkin_details = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AppearanceStruct_drakkin_details_get(void * jarg1) {
  unsigned int jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint32 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint32) ((arg1)->drakkin_details);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_drakkin_heritage_set(void * jarg1, unsigned int jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkin_heritage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AppearanceStruct_drakkin_heritage_get(void * jarg1) {
  unsigned int jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint32 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint32) ((arg1)->drakkin_heritage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_drakkin_tattoo_set(void * jarg1, unsigned int jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkin_tattoo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AppearanceStruct_drakkin_tattoo_get(void * jarg1) {
  unsigned int jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint32 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint32) ((arg1)->drakkin_tattoo);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_eye_color_one_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->eye_color_one = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_eye_color_one_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->eye_color_one);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_eye_color_two_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->eye_color_two = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_eye_color_two_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->eye_color_two);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_face_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->face = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_face_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->face);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_gender_id_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->gender_id = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_gender_id_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->gender_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_hair_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->hair = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_hair_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->hair);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_hair_color_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->hair_color = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_hair_color_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->hair_color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_helmet_texture_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->helmet_texture = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_helmet_texture_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->helmet_texture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_race_id_set(void * jarg1, unsigned short jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->race_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AppearanceStruct_race_id_get(void * jarg1) {
  unsigned short jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint16 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint16) ((arg1)->race_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_send_effects_set(void * jarg1, unsigned int jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  bool arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->send_effects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AppearanceStruct_send_effects_get(void * jarg1) {
  unsigned int jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  bool result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (bool) ((arg1)->send_effects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_size_set(void * jarg1, float jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  float arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AppearanceStruct_size_get(void * jarg1) {
  float jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  float result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (float) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_target_set(void * jarg1, void * jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (Client *)jarg2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AppearanceStruct_target_get(void * jarg1) {
  void * jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  Client *result = 0 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (Client *) ((arg1)->target);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AppearanceStruct_texture_set(void * jarg1, unsigned char jarg2) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->texture = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AppearanceStruct_texture_get(void * jarg1) {
  unsigned char jresult ;
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  uint8 result;
  
  arg1 = (AppearanceStruct *)jarg1; 
  result = (uint8) ((arg1)->texture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AppearanceStruct() {
  void * jresult ;
  AppearanceStruct *result = 0 ;
  
  result = (AppearanceStruct *)new AppearanceStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AppearanceStruct(void * jarg1) {
  AppearanceStruct *arg1 = (AppearanceStruct *) 0 ;
  
  arg1 = (AppearanceStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mob_SpecialAbility() {
  void * jresult ;
  Mob::SpecialAbility *result = 0 ;
  
  result = (Mob::SpecialAbility *)new Mob::SpecialAbility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mob_SpecialAbility(void * jarg1) {
  Mob::SpecialAbility *arg1 = (Mob::SpecialAbility *) 0 ;
  
  arg1 = (Mob::SpecialAbility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SpecialAbility_level_set(void * jarg1, int jarg2) {
  Mob::SpecialAbility *arg1 = (Mob::SpecialAbility *) 0 ;
  int arg2 ;
  
  arg1 = (Mob::SpecialAbility *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_SpecialAbility_level_get(void * jarg1) {
  int jresult ;
  Mob::SpecialAbility *arg1 = (Mob::SpecialAbility *) 0 ;
  int result;
  
  arg1 = (Mob::SpecialAbility *)jarg1; 
  result = (int) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SpecialAbility_params__set(void * jarg1, void * jarg2) {
  Mob::SpecialAbility *arg1 = (Mob::SpecialAbility *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (Mob::SpecialAbility *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->params;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_SpecialAbility_params__get(void * jarg1) {
  void * jresult ;
  Mob::SpecialAbility *arg1 = (Mob::SpecialAbility *) 0 ;
  int *result = 0 ;
  
  arg1 = (Mob::SpecialAbility *)jarg1; 
  result = (int *)(int *) ((arg1)->params);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AuraInfo_name_set(void * jarg1, char * jarg2) {
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 64-1);
      arg1->name[64-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mob_AuraInfo_name_get(void * jarg1) {
  char * jresult ;
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AuraInfo_spawn_id_set(void * jarg1, int jarg2) {
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spawn_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AuraInfo_spawn_id_get(void * jarg1) {
  int jresult ;
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  int result;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  result = (int) ((arg1)->spawn_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AuraInfo_icon_set(void * jarg1, int jarg2) {
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->icon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AuraInfo_icon_get(void * jarg1) {
  int jresult ;
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  int result;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  result = (int) ((arg1)->icon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mob_AuraInfo() {
  void * jresult ;
  Mob::AuraInfo *result = 0 ;
  
  result = (Mob::AuraInfo *)new Mob::AuraInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mob_AuraInfo(void * jarg1) {
  Mob::AuraInfo *arg1 = (Mob::AuraInfo *) 0 ;
  
  arg1 = (Mob::AuraInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AuraMgr_count_set(void * jarg1, int jarg2) {
  Mob::AuraMgr *arg1 = (Mob::AuraMgr *) 0 ;
  int arg2 ;
  
  arg1 = (Mob::AuraMgr *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AuraMgr_count_get(void * jarg1) {
  int jresult ;
  Mob::AuraMgr *arg1 = (Mob::AuraMgr *) 0 ;
  int result;
  
  arg1 = (Mob::AuraMgr *)jarg1; 
  result = (int) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AuraMgr_auras_set(void * jarg1, void * jarg2) {
  Mob::AuraMgr *arg1 = (Mob::AuraMgr *) 0 ;
  Mob::AuraInfo *arg2 = (Mob::AuraInfo *) (Mob::AuraInfo *)0 ;
  
  arg1 = (Mob::AuraMgr *)jarg1; 
  arg2 = (Mob::AuraInfo *)jarg2; 
  {
    size_t ii;
    Mob::AuraInfo *b = (Mob::AuraInfo *) arg1->auras;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Mob::AuraInfo *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_AuraMgr_auras_get(void * jarg1) {
  void * jresult ;
  Mob::AuraMgr *arg1 = (Mob::AuraMgr *) 0 ;
  Mob::AuraInfo *result = 0 ;
  
  arg1 = (Mob::AuraMgr *)jarg1; 
  result = (Mob::AuraInfo *)(Mob::AuraInfo *) ((arg1)->auras);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mob_AuraMgr() {
  void * jresult ;
  Mob::AuraMgr *result = 0 ;
  
  result = (Mob::AuraMgr *)new Mob::AuraMgr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mob_AuraMgr(void * jarg1) {
  Mob::AuraMgr *arg1 = (Mob::AuraMgr *) 0 ;
  
  arg1 = (Mob::AuraMgr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mob(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsMob(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsMob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_InZone(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->InZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DisplayInfo(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DisplayInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_close_mobs_set(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *arg2 = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *)jarg2; 
  if (arg1) (arg1)->close_mobs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_close_mobs_get(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::unordered_map< uint16,Mob *,std::hash< uint16 > > *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (std::unordered_map< uint16,Mob *,std::hash< uint16 > > *)& ((arg1)->close_mobs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RogueBackstab__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  (arg1)->RogueBackstab(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RogueBackstab__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RogueBackstab(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RogueBackstab__SWIG_2(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RogueBackstab(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RogueAssassinate(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RogueAssassinate(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_MobAngle__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)((Mob const *)arg1)->MobAngle(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_MobAngle__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)((Mob const *)arg1)->MobAngle(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_MobAngle__SWIG_2(void * jarg1, void * jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (float)((Mob const *)arg1)->MobAngle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_MobAngle__SWIG_3(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->MobAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BehindMob__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)((Mob const *)arg1)->BehindMob(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BehindMob__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((Mob const *)arg1)->BehindMob(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BehindMob__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)((Mob const *)arg1)->BehindMob(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BehindMob__SWIG_3(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->BehindMob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_InFrontMob__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)((Mob const *)arg1)->InFrontMob(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_InFrontMob__SWIG_1(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)((Mob const *)arg1)->InFrontMob(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_InFrontMob__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)((Mob const *)arg1)->InFrontMob(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_InFrontMob__SWIG_3(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->InFrontMob();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFacingMob(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsFacingMob(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_HeadingAngleToMob__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (float)(arg1)->HeadingAngleToMob(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_HeadingAngleToMob__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->HeadingAngleToMob(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RangedAttack(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RangedAttack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ThrowingAttack(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ThrowingAttack(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Attack__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ExtraAttackOptions *arg7 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ExtraAttackOptions *)jarg7; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Attack__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Attack__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Attack__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Attack__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Attack__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAttack__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->DoAttack(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAttack__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  (arg1)->DoAttack(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAttack__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->DoAttack(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_MonkSpecialAttack(void * jarg1, void * jarg2, unsigned char jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (int)(arg1)->MonkSpecialAttack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryBackstab__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->TryBackstab(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryBackstab__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->TryBackstab(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AvoidDamage(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AvoidDamage(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_compute_tohit(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->compute_tohit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetTotalToHit(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  EQ::skills::SkillType *argp2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->GetTotalToHit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_compute_defense(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->compute_defense();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetTotalDefense(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetTotalDefense();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckHitChance(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CheckHitChance(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryCriticalHit__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  (arg1)->TryCriticalHit(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryCriticalHit__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->TryCriticalHit(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryPetCriticalHit(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->TryPetCriticalHit(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryFinishingBlow(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 *arg3 = 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int64 & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->TryFinishingBlow(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_TryHeadShot(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::skills::SkillType arg3 ;
  EQ::skills::SkillType *argp3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (EQ::skills::SkillType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->TryHeadShot(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_TryAssassinate(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::skills::SkillType arg3 ;
  EQ::skills::SkillType *argp3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (EQ::skills::SkillType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (int)(arg1)->TryAssassinate(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoRiposte(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoRiposte(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyMeleeDamageMods__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 *arg3 = 0 ;
  Mob *arg4 = (Mob *) 0 ;
  ExtraAttackOptions *arg5 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int64 & is null", 0);
    return ;
  } 
  arg4 = (Mob *)jarg4; 
  arg5 = (ExtraAttackOptions *)jarg5; 
  (arg1)->ApplyMeleeDamageMods(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyMeleeDamageMods__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 *arg3 = 0 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int64 & is null", 0);
    return ;
  } 
  arg4 = (Mob *)jarg4; 
  (arg1)->ApplyMeleeDamageMods(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyMeleeDamageMods__SWIG_2(void * jarg1, unsigned short jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int64 & is null", 0);
    return ;
  } 
  (arg1)->ApplyMeleeDamageMods(arg2,*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_ACSum__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->ACSum(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_ACSum__SWIG_1(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->ACSum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetDisplayAC(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetDisplayAC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_offense(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->offense(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetBestMeleeSkill(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetBestMeleeSkill();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcAC(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CalcAC();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetACSoftcap(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetACSoftcap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Mob_GetSoftcapReturns(void * jarg1) {
  double jresult ;
  Mob *arg1 = (Mob *) 0 ;
  double result;
  
  arg1 = (Mob *)jarg1; 
  result = (double)(arg1)->GetSoftcapReturns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetClassRaceACBonus(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetClassRaceACBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMitigationAC(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetMitigationAC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MeleeMitigation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  (arg1)->MeleeMitigation(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MeleeMitigation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->MeleeMitigation(arg2,*arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Mob_RollD20(void * jarg1, int jarg2, int jarg3) {
  double jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)(arg1)->RollD20(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CombatRange__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, void * jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  bool arg4 ;
  ExtraAttackOptions *arg5 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (ExtraAttackOptions *)jarg5; 
  result = (bool)(arg1)->CombatRange(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CombatRange__SWIG_1(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->CombatRange(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CombatRange__SWIG_2(void * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->CombatRange(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CombatRange__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CombatRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsBerserk(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsBerserk();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RogueEvade(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RogueEvade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CommonOutgoingHitSuccess__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  (arg1)->CommonOutgoingHitSuccess(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CommonOutgoingHitSuccess__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->CommonOutgoingHitSuccess(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasDied(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasDied();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckDualWield(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->CheckDualWield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMainHandAttackRounds__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DoMainHandAttackRounds(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMainHandAttackRounds__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  (arg1)->DoMainHandAttackRounds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMainHandAttackRounds__SWIG_2(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoMainHandAttackRounds(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoOffHandAttackRounds__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DoOffHandAttackRounds(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoOffHandAttackRounds__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  (arg1)->DoOffHandAttackRounds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoOffHandAttackRounds__SWIG_2(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoOffHandAttackRounds(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckDoubleAttack(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->CheckDoubleAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessAttackRounds__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ProcessAttackRounds(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessAttackRounds__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  (arg1)->ProcessAttackRounds(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessAttackRounds__SWIG_2(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ProcessAttackRounds(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasAnInvisibilityEffect(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasAnInvisibilityEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BreakCharmPetIfConditionsMet(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BreakCharmPetIfConditionsMet();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsInvisible__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)((Mob const *)arg1)->IsInvisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsInvisible__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetInvisible__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetInvisible(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetInvisible__SWIG_1(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetInvisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcSeeInvisibleLevel(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CalcSeeInvisibleLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcInvisibleLevel(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CalcInvisibleLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ZeroInvisibleVars(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ZeroInvisibleVars(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BreakInvisibleSpells(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BreakInvisibleSpells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CancelSneakHide(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CancelSneakHide();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CommonBreakInvisible(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CommonBreakInvisible();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CommonBreakInvisibleFromCombat(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CommonBreakInvisibleFromCombat();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetInvisibleLevel(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetInvisibleLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetInvisibleUndeadLevel(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetInvisibleUndeadLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SeeHide(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->SeeHide();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SeeImprovedHide(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->SeeImprovedHide();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_SeeInvisibleUndead(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->SeeInvisibleUndead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_SeeInvisible(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->SeeInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetInnateSeeInvisible(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetInnateSeeInvisible(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSeeInvisibleUndead(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetSeeInvisibleUndead(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_tmHidden_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->tmHidden = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_tmHidden_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32) ((arg1)->tmHidden);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_invisible_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->invisible = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_invisible_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->invisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_nobuff_invisible_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->nobuff_invisible = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_nobuff_invisible_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->nobuff_invisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_invisible_undead_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->invisible_undead = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_invisible_undead_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->invisible_undead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_invisible_animals_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->invisible_animals = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_invisible_animals_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->invisible_animals);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_see_invis_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->see_invis = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_see_invis_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->see_invis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_innate_see_invis_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->innate_see_invis = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_innate_see_invis_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->innate_see_invis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_see_invis_undead_set(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->see_invis_undead = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_see_invis_undead_get(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8) ((arg1)->see_invis_undead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_sneaking_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->sneaking = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_sneaking_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->sneaking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_hidden_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hidden = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_hidden_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->hidden);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_improved_hidden_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->improved_hidden = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_improved_hidden_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->improved_hidden);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_see_hide_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->see_hide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_see_hide_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->see_hide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_see_improved_hide_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->see_improved_hide = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_see_improved_hide_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->see_improved_hide);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_mob_texture_profile_set(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::InternalTextureProfile arg2 ;
  EQ::InternalTextureProfile *argp2 ;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::InternalTextureProfile *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::InternalTextureProfile", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mob_texture_profile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_mob_texture_profile_get(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::InternalTextureProfile result;
  
  arg1 = (Mob *)jarg1; 
  result =  ((arg1)->mob_texture_profile);
  jresult = new EQ::InternalTextureProfile(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_AttackAnimation__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::skills::SkillType arg4 ;
  EQ::skills::SkillType *argp4 ;
  EQ::skills::SkillType result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->AttackAnimation(arg2,(EQ::ItemInstance const *)arg3,arg4);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_AttackAnimation__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::skills::SkillType result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  result = (arg1)->AttackAnimation(arg2,(EQ::ItemInstance const *)arg3);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetTextureProfileMaterial(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetTextureProfileMaterial(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetTextureProfileColor(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetTextureProfileColor(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetTextureProfileHeroForgeModel(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetTextureProfileHeroForgeModel(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendArmorAppearance__SWIG_0(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendArmorAppearance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendArmorAppearance__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SendArmorAppearance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTextureWC__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->SendTextureWC(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTextureWC__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->SendTextureWC(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTextureWC__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SendTextureWC(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTextureWC__SWIG_3(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SendTextureWC(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTextureWC__SWIG_4(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendTextureWC(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendWearChange__SWIG_0(void * jarg1, unsigned char jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendWearChange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendWearChange__SWIG_1(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SendWearChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSlotTint(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->SetSlotTint(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WearChange__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->WearChange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WearChange__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->WearChange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WearChange__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->WearChange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeSize__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ChangeSize(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeSize__SWIG_1(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ChangeSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAnim__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  eqFilterType arg5 ;
  eqFilterType *argp5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->DoAnim(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAnim__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DoAnim(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAnim__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->DoAnim(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoAnim__SWIG_3(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DoAnim(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, float jarg5, float jarg6, float jarg7, float jarg8, char * jarg9, void * jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char *arg9 = (char *) 0 ;
  EQ::skills::SkillType arg10 ;
  EQ::skills::SkillType *argp10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (char *)jarg9; 
  argp10 = (EQ::skills::SkillType *)jarg10; 
  if (!argp10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg10 = *argp10; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, float jarg5, float jarg6, float jarg7, float jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, float jarg5, float jarg6, float jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_4(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, float jarg5, float jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_5(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, float jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  float arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (float)jarg5; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_6(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ProjectileAnimation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAnimation__SWIG_7(void * jarg1, void * jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ProjectileAnimation(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12, unsigned int jarg13, unsigned int jarg14, unsigned int jarg15, unsigned int jarg16, unsigned int jarg17) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  uint32 arg14 ;
  uint32 arg15 ;
  uint32 arg16 ;
  uint32 arg17 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  arg15 = (uint32)jarg15; 
  arg16 = (uint32)jarg16; 
  arg17 = (uint32)jarg17; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12, unsigned int jarg13, unsigned int jarg14, unsigned int jarg15, unsigned int jarg16) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  uint32 arg14 ;
  uint32 arg15 ;
  uint32 arg16 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  arg15 = (uint32)jarg15; 
  arg16 = (uint32)jarg16; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12, unsigned int jarg13, unsigned int jarg14, unsigned int jarg15) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  uint32 arg14 ;
  uint32 arg15 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  arg15 = (uint32)jarg15; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12, unsigned int jarg13, unsigned int jarg14) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  uint32 arg14 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12, unsigned int jarg13) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_5(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_6(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_7(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_8(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_9(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7, unsigned int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  uint32 arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_10(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearanceEffect__SWIG_11(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->SendAppearanceEffect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendLevelAppearance(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SendLevelAppearance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTargetable__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendTargetable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTargetable__SWIG_1(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SendTargetable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMobTextureProfile__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SetMobTextureProfile(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMobTextureProfile__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SetMobTextureProfile(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMobTextureProfile__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetMobTextureProfile(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellEffect__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, void * jarg8, unsigned int jarg9, unsigned int jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool arg5 ;
  uint32 arg6 ;
  bool arg7 ;
  Client *arg8 = (Client *) 0 ;
  uint32 arg9 ;
  uint32 arg10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (Client *)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->SendSpellEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellEffect__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, void * jarg8, unsigned int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool arg5 ;
  uint32 arg6 ;
  bool arg7 ;
  Client *arg8 = (Client *) 0 ;
  uint32 arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (Client *)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->SendSpellEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellEffect__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, void * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool arg5 ;
  uint32 arg6 ;
  bool arg7 ;
  Client *arg8 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint32)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (Client *)jarg8; 
  (arg1)->SendSpellEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellEffect__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool arg5 ;
  uint32 arg6 ;
  bool arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint32)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->SendSpellEffect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellEffect__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool arg5 ;
  uint32 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint32)jarg6; 
  (arg1)->SendSpellEffect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsBeneficialAllowed(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsBeneficialAllowed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCasterLevel(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int)(arg1)->GetCasterLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_0(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned short jarg11, int jarg12, int jarg13, int jarg14) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  int32 arg12 ;
  int32 arg13 ;
  int32 arg14 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  arg12 = (int32)jarg12; 
  arg13 = (int32)jarg13; 
  arg14 = (int32)jarg14; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_1(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned short jarg11, int jarg12, int jarg13) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  int32 arg12 ;
  int32 arg13 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  arg12 = (int32)jarg12; 
  arg13 = (int32)jarg13; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_2(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned short jarg11, int jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  int32 arg12 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  arg12 = (int32)jarg12; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_3(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned short jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_4(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_5(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8, int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  int arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_6(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_7(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_8(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5, unsigned char jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  uint8 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_9(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4, unsigned short jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  uint16 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  arg5 = (uint16)jarg5; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellsBonuses__SWIG_10(void * jarg1, unsigned short jarg2, unsigned char jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  StatBonuses *arg4 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (StatBonuses *)jarg4; 
  (arg1)->ApplySpellsBonuses(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_NegateSpellEffectBonuses(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->NegateSpellEffectBonuses(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_NegateSpellEffect(void * jarg1, unsigned short jarg2, int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->NegateSpellEffect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetActSpellRange(void * jarg1, unsigned short jarg2, float jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->GetActSpellRange(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActSpellDamage__SWIG_0(void * jarg1, unsigned short jarg2, long long jarg3, void * jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (Mob *)jarg4; 
  result = (int64)(arg1)->GetActSpellDamage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActSpellDamage__SWIG_1(void * jarg1, unsigned short jarg2, long long jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int64)(arg1)->GetActSpellDamage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActDoTDamage__SWIG_0(void * jarg1, unsigned short jarg2, long long jarg3, void * jarg4, unsigned int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int64)(arg1)->GetActDoTDamage(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActDoTDamage__SWIG_1(void * jarg1, unsigned short jarg2, long long jarg3, void * jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (Mob *)jarg4; 
  result = (int64)(arg1)->GetActDoTDamage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActSpellHealing__SWIG_0(void * jarg1, unsigned short jarg2, long long jarg3, void * jarg4, unsigned int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int64)(arg1)->GetActSpellHealing(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActSpellHealing__SWIG_1(void * jarg1, unsigned short jarg2, long long jarg3, void * jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (Mob *)jarg4; 
  result = (int64)(arg1)->GetActSpellHealing(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActSpellHealing__SWIG_2(void * jarg1, unsigned short jarg2, long long jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  result = (int64)(arg1)->GetActSpellHealing(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetActSpellCost(void * jarg1, unsigned short jarg2, int jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int32 arg3 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int32)jarg3; 
  result = (int32)(arg1)->GetActSpellCost(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetActSpellDuration(void * jarg1, unsigned short jarg2, int jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int32 arg3 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int32)jarg3; 
  result = (int32)(arg1)->GetActSpellDuration(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetActSpellCasttime(void * jarg1, unsigned short jarg2, int jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int32 arg3 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int32)jarg3; 
  result = (int32)(arg1)->GetActSpellCasttime(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetActReflectedSpellDamage(void * jarg1, unsigned short jarg2, long long jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->GetActReflectedSpellDamage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_0(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5, int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, int jarg10) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  int arg10 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = (int)jarg10; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_1(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5, int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_2(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5, int jarg6, unsigned int jarg7, unsigned int jarg8) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int arg6 ;
  bool arg7 ;
  bool arg8 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_3(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5, int jarg6, unsigned int jarg7) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int arg6 ;
  bool arg7 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_4(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5, int jarg6) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  int arg6 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_5(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4, unsigned int jarg5) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool arg5 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_ResistSpell__SWIG_6(void * jarg1, unsigned char jarg2, unsigned short jarg3, void * jarg4) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (Mob *)jarg4; 
  result = (float)(arg1)->ResistSpell(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetResist(void * jarg1, unsigned char jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int)(arg1)->GetResist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_ResistPhysical(void * jarg1, int jarg2, unsigned char jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  uint8 arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (int)(arg1)->ResistPhysical(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_ResistElementalWeaponDmg(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (int)(arg1)->ResistElementalWeaponDmg((EQ::ItemInstance const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckBaneDamage(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (int)(arg1)->CheckBaneDamage((EQ::ItemInstance const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetSpecializeSkillValue(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint16)((Mob const *)arg1)->GetSpecializeSkillValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellBarDisable(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SendSpellBarDisable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSpellBarEnable(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SendSpellBarEnable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ZeroCastingVars(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ZeroCastingVars();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SpellProcess(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SpellProcess();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, void * jarg11, unsigned int jarg12) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  int16 *arg11 = (int16 *) 0 ;
  uint32 arg12 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (int16 *)jarg11; 
  arg12 = (uint32)jarg12; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_1(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, void * jarg11) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  int16 *arg11 = (int16 *) 0 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (int16 *)jarg11; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_2(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_3(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_4(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_5(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_6(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_7(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_8(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->CastSpell(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CastSpell__SWIG_9(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->CastSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, short jarg11, unsigned int jarg12) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  int16 arg11 ;
  uint32 arg12 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (int16)jarg11; 
  arg12 = (uint32)jarg12; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_1(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, short jarg11) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  int16 arg11 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (int16)jarg11; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_2(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_3(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  uint32 arg9 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_4(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  uint32 arg8 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_5(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  uint32 *arg7 = (uint32 *) 0 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (uint32 *)jarg7; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_6(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_7(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int32 arg5 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int32)jarg5; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_8(void * jarg1, unsigned short jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastSpell__SWIG_9(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->DoCastSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastedSpellFinished__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  EQ::spells::CastingSlot *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  (arg1)->CastedSpellFinished(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastedSpellFinished__SWIG_1(void * jarg1, unsigned short jarg2, unsigned int jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  EQ::spells::CastingSlot *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->CastedSpellFinished(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastedSpellFinished__SWIG_2(void * jarg1, unsigned short jarg2, unsigned int jarg3, void * jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  EQ::spells::CastingSlot *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  (arg1)->CastedSpellFinished(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7, unsigned int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12, unsigned int jarg13) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  bool arg8 ;
  int arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  bool arg12 ;
  uint32 arg13 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = jarg12 ? true : false; 
  arg13 = (uint32)jarg13; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7, unsigned int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  bool arg8 ;
  int arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  bool arg12 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = jarg12 ? true : false; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_2(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7, unsigned int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  bool arg8 ;
  int arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_3(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7, unsigned int jarg8, int jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  bool arg8 ;
  int arg9 ;
  uint32 arg10 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  arg10 = (uint32)jarg10; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_4(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7, unsigned int jarg8, int jarg9) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  bool arg8 ;
  int arg9 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (int)jarg9; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_5(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  bool arg8 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_6(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6, short jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  int16 arg7 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int16)jarg7; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_7(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  uint32 arg6 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_8(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  int arg5 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_9(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellFinished__SWIG_10(void * jarg1, unsigned short jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->SpellFinished(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendBeginCast(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendBeginCast(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, unsigned int jarg5, short jarg6, unsigned int jarg7, int jarg8, int jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool arg5 ;
  int16 arg6 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, unsigned int jarg5, short jarg6, unsigned int jarg7, int jarg8, int jarg9) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool arg5 ;
  int16 arg6 ;
  bool arg7 ;
  int arg8 ;
  int arg9 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_2(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, unsigned int jarg5, short jarg6, unsigned int jarg7, int jarg8) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool arg5 ;
  int16 arg6 ;
  bool arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_3(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, unsigned int jarg5, short jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool arg5 ;
  int16 arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_4(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, unsigned int jarg5, short jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool arg5 ;
  int16 arg6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int16)jarg6; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_5(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_6(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellOnTarget__SWIG_7(void * jarg1, unsigned short jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->SpellOnTarget(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellEffect__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4, int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int32 arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->SpellEffect(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellEffect__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4, int jarg5, int jarg6, int jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int32 arg7 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int32)jarg7; 
  result = (bool)(arg1)->SpellEffect(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellEffect__SWIG_2(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->SpellEffect(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellEffect__SWIG_3(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->SpellEffect(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellEffect__SWIG_4(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->SpellEffect(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SpellEffect__SWIG_5(void * jarg1, void * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->SpellEffect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DetermineSpellTargets__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob **arg3 = 0 ;
  Mob **arg4 = 0 ;
  CastAction_type *arg5 = 0 ;
  EQ::spells::CastingSlot arg6 ;
  bool arg7 ;
  EQ::spells::CastingSlot *argp6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mob *& is null", 0);
    return 0;
  } 
  arg4 = (Mob **)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mob *& is null", 0);
    return 0;
  } 
  arg5 = (CastAction_type *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CastAction_type & is null", 0);
    return 0;
  } 
  argp6 = (EQ::spells::CastingSlot *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->DetermineSpellTargets(arg2,*arg3,*arg4,*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DetermineSpellTargets__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob **arg3 = 0 ;
  Mob **arg4 = 0 ;
  CastAction_type *arg5 = 0 ;
  EQ::spells::CastingSlot arg6 ;
  EQ::spells::CastingSlot *argp6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob **)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mob *& is null", 0);
    return 0;
  } 
  arg4 = (Mob **)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Mob *& is null", 0);
    return 0;
  } 
  arg5 = (CastAction_type *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CastAction_type & is null", 0);
    return 0;
  } 
  argp6 = (EQ::spells::CastingSlot *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->DetermineSpellTargets(arg2,*arg3,*arg4,*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastingChecksOnCaster(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  EQ::spells::CastingSlot arg3 ;
  EQ::spells::CastingSlot *argp3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  argp3 = (EQ::spells::CastingSlot *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->DoCastingChecksOnCaster(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastingChecksZoneRestrictions(void * jarg1, unsigned int jarg2, int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  int32 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int32)jarg3; 
  result = (bool)(arg1)->DoCastingChecksZoneRestrictions(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoCastingChecksOnTarget(void * jarg1, unsigned int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  int32 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int32)jarg3; 
  arg4 = (Mob *)jarg4; 
  result = (bool)(arg1)->DoCastingChecksOnTarget(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckFizzle(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->CheckFizzle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckSpellLevelRestriction(void * jarg1, void * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->CheckSpellLevelRestriction(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsImmuneToSpell(void * jarg1, unsigned short jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->IsImmuneToSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetAOERange(void * jarg1, unsigned short jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (float)(arg1)->GetAOERange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_InterruptSpell__SWIG_0(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->InterruptSpell(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_InterruptSpell__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->InterruptSpell();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_InterruptSpell__SWIG_2(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->InterruptSpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_InterruptSpell__SWIG_3(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->InterruptSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StopCasting(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->StopCasting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StopCastSpell(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->StopCastSpell(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsCasting(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsCasting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_CastingSpellID(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->CastingSpellID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryDispel(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->TryDispel(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TrySpellProjectile__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->TrySpellProjectile(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TrySpellProjectile__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->TrySpellProjectile(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ResourceTap(void * jarg1, long long jarg2, unsigned short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->ResourceTap(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryTriggerThreshHold(void * jarg1, long long jarg2, int jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  int arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->TryTriggerThreshHold(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcDestFromHeading(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, void * jarg7, void * jarg8, void * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float *arg7 = 0 ;
  float *arg8 = 0 ;
  float *arg9 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  arg8 = (float *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  arg9 = (float *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  (arg1)->CalcDestFromHeading(arg2,arg3,arg4,arg5,arg6,*arg7,*arg8,*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BeamDirectional(void * jarg1, unsigned short jarg2, short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->BeamDirectional(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ConeDirectional(void * jarg1, unsigned short jarg2, short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->ConeDirectional(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyHealthTransferDamage(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->ApplyHealthTransferDamage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellEffectIllusion(void * jarg1, int jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->ApplySpellEffectIllusion(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyIllusionToCorpse(void * jarg1, int jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  Corpse *arg3 = (Corpse *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (Corpse *)jarg3; 
  (arg1)->ApplyIllusionToCorpse(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendIllusionWearChange(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendIllusionWearChange(arg2);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetItemSlotToConsumeCharge(void * jarg1, int jarg2, unsigned int jarg3) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int16)(arg1)->GetItemSlotToConsumeCharge(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckItemRaceClassDietyRestrictionsOnCast(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->CheckItemRaceClassDietyRestrictionsOnCast(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFromTriggeredSpell__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg2 ;
  uint32 arg3 ;
  EQ::spells::CastingSlot *argp2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::spells::CastingSlot *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->IsFromTriggeredSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFromTriggeredSpell__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg2 ;
  EQ::spells::CastingSlot *argp2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::spells::CastingSlot *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->IsFromTriggeredSpell(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ApplyBardPulse(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::spells::CastingSlot arg4 ;
  EQ::spells::CastingSlot *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (Mob *)jarg3; 
  argp4 = (EQ::spells::CastingSlot *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->ApplyBardPulse(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsActiveBardSong(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->IsActiveBardSong(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasActiveSong(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasActiveSong();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ZeroBardPulseVars(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ZeroBardPulseVars();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoBardCastingFromItemClick(void * jarg1, unsigned int jarg2, unsigned int jarg3, int jarg4, unsigned short jarg5, void * jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  uint32 arg3 ;
  int32 arg4 ;
  uint16 arg5 ;
  EQ::spells::CastingSlot arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  EQ::spells::CastingSlot *argp6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (uint16)jarg5; 
  argp6 = (EQ::spells::CastingSlot *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::spells::CastingSlot", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->DoBardCastingFromItemClick(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_UseBardSpellLogic__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->UseBardSpellLogic(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_UseBardSpellLogic__SWIG_1(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->UseBardSpellLogic(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_UseBardSpellLogic__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->UseBardSpellLogic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffProcess(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BuffProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoBuffTic__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Buffs_Struct *arg2 = 0 ;
  int arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Buffs_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Buffs_Struct const & is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->DoBuffTic((Buffs_Struct const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoBuffTic__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Buffs_Struct *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Buffs_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Buffs_Struct const & is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->DoBuffTic((Buffs_Struct const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeBySpellID(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->BuffFadeBySpellID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeBySpellIDAndCaster(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->BuffFadeBySpellIDAndCaster(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeByEffect__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->BuffFadeByEffect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeByEffect__SWIG_1(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->BuffFadeByEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeAll(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BuffFadeAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeBeneficial(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BuffFadeBeneficial();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeNonPersistDeath(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BuffFadeNonPersistDeath();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeDetrimental(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BuffFadeDetrimental();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeBySlot__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->BuffFadeBySlot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeBySlot__SWIG_1(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->BuffFadeBySlot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeDetrimentalByCaster(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->BuffFadeDetrimentalByCaster(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffFadeBySitModifier(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->BuffFadeBySitModifier();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffDetachCaster(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->BuffDetachCaster(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsAffectedByBuffByGlobalGroup(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  GlobalGroup arg2 ;
  GlobalGroup *argp2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (GlobalGroup *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GlobalGroup", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->IsAffectedByBuffByGlobalGroup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_BuffModifyDurationBySpellID(void * jarg1, unsigned short jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->BuffModifyDurationBySpellID(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AddBuff__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  int arg4 ;
  int32 arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (int)(arg1)->AddBuff(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AddBuff__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, int jarg4, int jarg5) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  int arg4 ;
  int32 arg5 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int32)jarg5; 
  result = (int)(arg1)->AddBuff(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AddBuff__SWIG_2(void * jarg1, void * jarg2, unsigned short jarg3, int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->AddBuff(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_AddBuff__SWIG_3(void * jarg1, void * jarg2, unsigned short jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (int)(arg1)->AddBuff(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CanBuffStack__SWIG_0(void * jarg1, unsigned short jarg2, unsigned char jarg3, unsigned int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->CanBuffStack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CanBuffStack__SWIG_1(void * jarg1, unsigned short jarg2, unsigned char jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (int)(arg1)->CanBuffStack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CalcBuffDuration__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4, int jarg5) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  int32 arg5 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int32)jarg5; 
  result = (int)(arg1)->CalcBuffDuration(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CalcBuffDuration__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned short jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (int)(arg1)->CalcBuffDuration(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendPetBuffsToClient(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SendPetBuffsToClient();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCurrentBuffSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetCurrentBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCurrentSongSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetCurrentSongSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCurrentDiscSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetCurrentDiscSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxBuffSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetMaxBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxSongSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetMaxSongSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxDiscSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetMaxDiscSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxTotalSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetMaxTotalSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasDiscBuff(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasDiscBuff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetFirstBuffSlot(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (uint32)(arg1)->GetFirstBuffSlot(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetLastBuffSlot(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (uint32)(arg1)->GetLastBuffSlot(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_InitializeBuffSlots(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->InitializeBuffSlots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_UninitializeBuffSlots(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->UninitializeBuffSlots();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_MakeBuffsPacket__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool arg3 ;
  EQApplicationPacket *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (EQApplicationPacket *)(arg1)->MakeBuffsPacket(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_MakeBuffsPacket__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  EQApplicationPacket *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (EQApplicationPacket *)(arg1)->MakeBuffsPacket(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_MakeBuffsPacket__SWIG_2(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (EQApplicationPacket *)(arg1)->MakeBuffsPacket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendBuffsToClient(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendBuffsToClient(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetBuffs(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Buffs_Struct *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Buffs_Struct *)(arg1)->GetBuffs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoGravityEffect(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->DoGravityEffect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageShield__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DamageShield(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageShield__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DamageShield(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_RuneAbsorb(void * jarg1, long long jarg2, unsigned short jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint16 arg3 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (int32)(arg1)->RuneAbsorb(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetBuffSpellIDs(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::vector< uint16 > result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetBuffSpellIDs();
  jresult = new std::vector< uint16 >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_FindBuff__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->FindBuff(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_FindBuff__SWIG_1(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->FindBuff(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_FindBuffBySlot(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16)(arg1)->FindBuffBySlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BuffCount__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (uint32)(arg1)->BuffCount(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BuffCount__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (uint32)(arg1)->BuffCount(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_BuffCount__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->BuffCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_FindType__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3, unsigned short jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  uint16 arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint16)jarg4; 
  result = (bool)(arg1)->FindType(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_FindType__SWIG_1(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->FindType(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_FindType__SWIG_2(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->FindType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetBuffSlotFromType(void * jarg1, unsigned short jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int16)(arg1)->GetBuffSlotFromType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetSpellIDFromSlot(void * jarg1, unsigned char jarg2) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint16)(arg1)->GetSpellIDFromSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CountDispellableBuffs(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->CountDispellableBuffs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CheckNumHitsRemaining__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned short jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  NumHit arg2 ;
  int32 arg3 ;
  uint16 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NumHit)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->CheckNumHitsRemaining(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CheckNumHitsRemaining__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  NumHit arg2 ;
  int32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NumHit)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->CheckNumHitsRemaining(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CheckNumHitsRemaining__SWIG_2(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  NumHit arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NumHit)jarg2; 
  (arg1)->CheckNumHitsRemaining(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasNumhits(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasNumhits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Numhits(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Numhits(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasMGB(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasMGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMGB(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMGB(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasProjectIllusion(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasProjectIllusion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetProjectIllusion(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetProjectIllusion(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsNimbusEffectActive(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsNimbusEffectActive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetNimbusEffect(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetNimbusEffect(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetNimbusEffect1(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetNimbusEffect1();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetNimbusEffect2(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetNimbusEffect2();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetNimbusEffect3(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetNimbusEffect3();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddNimbusEffect(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddNimbusEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveNimbusEffect(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveNimbusEffect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveAllNimbusEffects(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->RemoveAllNimbusEffects();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetTargetRingX(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetTargetRingX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetTargetRingY(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetTargetRingY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetTargetRingZ(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetTargetRingZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasEndurUpkeep(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasEndurUpkeep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetEndurUpkeep(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEndurUpkeep(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasBuffWithSpellGroup(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->HasBuffWithSpellGroup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAppearanceEffects(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->SetAppearanceEffects(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ListAppearanceEffects(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ListAppearanceEffects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ClearAppearanceEffects(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ClearAppearanceEffects();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendSavedAppearanceEffects(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendSavedAppearanceEffects(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBuffDuration__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetBuffDuration(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBuffDuration__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBuffDuration(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBuffDuration__SWIG_2(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBuffDuration(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellBuff__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->ApplySpellBuff(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellBuff__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ApplySpellBuff(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplySpellBuff__SWIG_2(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ApplySpellBuff(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetBuffStatValueBySpell(void * jarg1, int jarg2, char * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->GetBuffStatValueBySpell(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetBuffStatValueBySlot(void * jarg1, unsigned char jarg2, char * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->GetBuffStatValueBySlot(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetLevel__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetLevel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetLevel__SWIG_1(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TempName__SWIG_0(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->TempName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TempName__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->TempName();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTargetable(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTargetable(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsTargetable(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsTargetable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasShieldEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasShieldEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetShieldEquipped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetShieldEquipped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasTwoHandBluntEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasTwoHandBluntEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTwoHandBluntEquipped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTwoHandBluntEquipped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasTwoHanderEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasTwoHanderEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTwoHanderEquipped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTwoHanderEquipped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasDualWeaponsEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasDualWeaponsEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasBowEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasBowEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBowEquipped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBowEquipped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasArrowEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasArrowEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetArrowEquipped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetArrowEquipped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasBowAndArrowEquipped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasBowAndArrowEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDualWeaponsEquipped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDualWeaponsEquipped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanFacestab(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->CanFacestab();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFacestab(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFacestab(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_ConvertItemTypeToSkillID(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint8)(arg1)->ConvertItemTypeToSkillID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetSkill(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16)((Mob const *)arg1)->GetSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetEquippedItemFromTextureSlot(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetEquippedItemFromTextureSlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetEquipmentMaterial(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetEquipmentMaterial(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetEquipmentType(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint8)((Mob const *)arg1)->GetEquipmentType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetHerosForgeModel(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetHerosForgeModel(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetEquipmentColor(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetEquipmentColor(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsEliteMaterialItem(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->IsEliteMaterialItem(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanClassEquipItem(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->CanClassEquipItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanRaceEquipItem(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->CanRaceEquipItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AffectedBySpellExcludingSlot(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->AffectedBySpellExcludingSlot(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  KilledByTypes arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (KilledByTypes)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetHP(void * jarg1, long long jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetHP(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetOOCRegen(void * jarg1, long long jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetOOCRegen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_HealDamage__SWIG_0(void * jarg1, unsigned long long jarg2, void * jarg3, unsigned short jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint64 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  uint16 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->HealDamage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_HealDamage__SWIG_1(void * jarg1, unsigned long long jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint64 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->HealDamage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_HealDamage__SWIG_2(void * jarg1, unsigned long long jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint64 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint64)jarg2; 
  (arg1)->HealDamage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMaxHP(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SetMaxHP();
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetBaseRace(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetBaseRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetBaseGender(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetBaseGender();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetFactionRace(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)(arg1)->GetFactionRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetDeity(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetDeity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetDeityBit(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::deity::DeityTypeBit result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetDeityBit();
  jresult = new EQ::deity::DeityTypeBit(result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetRace(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetModel(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetModel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetGender(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetGender();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetTexture(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetHelmTexture(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetHelmTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetHairColor(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetHairColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetBeardColor(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetBeardColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetEyeColor1(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetEyeColor1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetEyeColor2(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetEyeColor2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetHairStyle(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetHairStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetLuclinFace(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetLuclinFace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetBeard(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetBeard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetDrakkinHeritage(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetDrakkinHeritage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetDrakkinTattoo(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetDrakkinTattoo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetDrakkinDetails(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetDrakkinDetails();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeRace(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->ChangeRace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeGender(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeGender(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeTexture(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeHelmTexture(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeHelmTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeHairColor(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeHairColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeBeardColor(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeBeardColor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeEyeColor1(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeEyeColor1(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeEyeColor2(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeEyeColor2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeHairStyle(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeHairStyle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeLuclinFace(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeLuclinFace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeBeard(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeBeard(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeDrakkinHeritage(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeDrakkinHeritage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeDrakkinTattoo(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeDrakkinTattoo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ChangeDrakkinDetails(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ChangeDrakkinDetails(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetArmorTint(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetArmorTint(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetClass(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetLevel(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetOrigLevel(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetOrigLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mob_GetName(void * jarg1) {
  char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  char *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (char *)((Mob const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mob_GetOrigName(void * jarg1) {
  char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  char *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (char *)((Mob const *)arg1)->GetOrigName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mob_GetLastName(void * jarg1) {
  char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  char *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (char *)((Mob const *)arg1)->GetLastName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Mob_GetCleanName(void * jarg1) {
  char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  char *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (char *)(arg1)->GetCleanName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetName__SWIG_0(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetName__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SetName();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetTarget(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)((Mob const *)arg1)->GetTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetTargetDescription__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3, unsigned short jarg4) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  uint16 arg4 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (arg1)->GetTargetDescription(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetTargetDescription__SWIG_1(void * jarg1, void * jarg2, unsigned char jarg3) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (arg1)->GetTargetDescription(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetTargetDescription__SWIG_2(void * jarg1, void * jarg2) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (arg1)->GetTargetDescription(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTarget(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetTarget(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasTargetReflection(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasTargetReflection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetHPRatio(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetHPRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetIntHPRatio(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetIntHPRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetAC(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetAC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetATK(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetATK();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetATKBonus(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetATKBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSTR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSTA(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetDEX(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetAGI(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetINT(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetWIS(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCHA(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicMR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicFR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicDR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicPR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicCR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetFR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetDR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCorrup(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPhR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetPhR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetItemBonuses(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetItemBonuses();
  jresult = new StatBonuses(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetSpellBonuses(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetSpellBonuses();
  jresult = new StatBonuses(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetAABonuses(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetAABonuses();
  jresult = new StatBonuses(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetItemBonusesPtr(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (StatBonuses *)(arg1)->GetItemBonusesPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetSpellBonusesPtr(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (StatBonuses *)(arg1)->GetSpellBonusesPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetAABonusesPtr(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (StatBonuses *)(arg1)->GetAABonusesPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicSTR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicSTA(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicDEX(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicAGI(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicINT(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicWIS(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicCHA(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxSTR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxSTA(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxDEX(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxAGI(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxINT(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxWIS(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxCHA(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxMR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxPR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxDR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxCR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxFR(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetMaxFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetDelayDeath(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetDelayDeath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetHP(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetMaxHP(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetMaxHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcMaxHP(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->CalcMaxHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcHPRegenCap(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->CalcHPRegenCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetMaxMana(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetMaxMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcManaRegenCap(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->CalcManaRegenCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetMana(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetEndurance(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetMaxEndurance(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetMaxEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcEnduranceRegenCap(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->CalcEnduranceRegenCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetEndurance(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetEndurance(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetItemHPBonuses(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->GetItemHPBonuses();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetSpellHPBonuses(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->GetSpellHPBonuses();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_SetMana(void * jarg1, long long jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  int64 *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64 *) &(arg1)->SetMana(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetManaRatio(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetManaRatio();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcMaxMana(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->CalcMaxMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetNPCTypeID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetNPCTypeID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetNPCTypeID(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetNPCTypeID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetPosition(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetX(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetY(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetZ(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetHeading(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetRelativePosition(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetRelativePosition(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetRelativeX(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetRelativeX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetRelativeY(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetRelativeY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetRelativeZ(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetRelativeZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetRelativeHeading(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetRelativeHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetSize(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetBaseSize(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetBaseSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetFlyMode(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  GravityBehavior result;
  
  arg1 = (Mob *)jarg1; 
  result = (GravityBehavior)((Mob const *)arg1)->GetFlyMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsBoat(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsBoat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetIsBoat(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetIsBoat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetIsBoat(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsBoat(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsControllableBoat(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsControllableBoat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AlwaysAggro(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->AlwaysAggro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHeroicStrikethrough(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHeroicStrikethrough();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetKeepsSoldItems(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetKeepsSoldItems();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetKeepsSoldItems(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetKeepsSoldItems(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHealAmt(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetHealAmt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSpellDmg(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetSpellDmg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessItemCaps(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ProcessItemCaps();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CalcItemATKCap(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)(arg1)->CalcItemATKCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsSitting(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsSitting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CopyHateList(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->CopyHateList(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasRaid(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasGroup(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetRaid(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetGroup(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPrimaryFaction(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetPrimaryFaction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsMoving(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMoving(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMoving(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GoToBind__SWIG_0(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->GoToBind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GoToBind__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->GoToBind();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Gate__SWIG_0(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->Gate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Gate__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->Gate();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetWalkspeed(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetWalkspeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetRunspeed(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetRunspeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetBaseRunspeed(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetBaseRunspeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetBaseWalkspeed(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetBaseWalkspeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetBaseFearSpeed(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetBaseFearSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetMovespeed(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetMovespeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsRunning(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetRunning(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRunning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GMMove__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->GMMove(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GMMove__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->GMMove(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GMMove__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->GMMove(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GMMove__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  glm::vec4 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->GMMove((glm::vec4 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_GMMove__SWIG_4(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->GMMove((glm::vec4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDelta(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->SetDelta((glm::vec4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakeSpawnUpdate(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  PlayerPositionUpdateServer_Struct *arg2 = (PlayerPositionUpdateServer_Struct *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (PlayerPositionUpdateServer_Struct *)jarg2; 
  (arg1)->MakeSpawnUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SentPositionPacket__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  bool arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->SentPositionPacket(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SentPositionPacket__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->SentPositionPacket(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StopMoving__SWIG_0(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->StopMoving();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StopMoving__SWIG_1(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->StopMoving(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpawned(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SetSpawned();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Spawned(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->Spawned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShouldISpawnFor(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->ShouldISpawnFor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFlyMode(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  GravityBehavior arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (GravityBehavior)jarg2; 
  (arg1)->SetFlyMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Teleport__SWIG_0(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  glm::vec3 *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  (arg1)->Teleport((glm::vec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Teleport__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->Teleport((glm::vec4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryMoveAlong__SWIG_0(void * jarg1, float jarg2, float jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->TryMoveAlong(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryMoveAlong__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->TryMoveAlong(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_TryMoveAlong__SWIG_2(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  glm::vec4 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  glm::vec4 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (arg1)->TryMoveAlong((glm::vec4 const &)*arg2,arg3,arg4);
  {
    jresult = new glm::vec4(result);
  }
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessForcedMovement(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ProcessForcedMovement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_IncDeltaX(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->IncDeltaX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_IncDeltaY(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->IncDeltaY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_IncDeltaZ(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->IncDeltaZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetForcedMovement(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetForcedMovement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetHeading(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHeading(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetLevelCon__SWIG_0(unsigned char jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  uint8 arg1 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (uint8)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)Mob::GetLevelCon(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetLevelCon__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetLevelCon(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_0(void * jarg1, void * jarg2, long long jarg3, long long jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned short jarg8, unsigned int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  uint16 arg8 ;
  bool arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (uint16)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->AddToHateList(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_1(void * jarg1, void * jarg2, long long jarg3, long long jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned short jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  uint16 arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (uint16)jarg8; 
  (arg1)->AddToHateList(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_2(void * jarg1, void * jarg2, long long jarg3, long long jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->AddToHateList(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_3(void * jarg1, void * jarg2, long long jarg3, long long jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddToHateList(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_4(void * jarg1, void * jarg2, long long jarg3, long long jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddToHateList(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_5(void * jarg1, void * jarg2, long long jarg3, long long jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->AddToHateList(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_6(void * jarg1, void * jarg2, long long jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->AddToHateList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddToHateList__SWIG_7(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->AddToHateList(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveFromHateList(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->RemoveFromHateList(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetHateAmountOnEnt__SWIG_0(void * jarg1, void * jarg2, long long jarg3, long long jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  int64 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  (arg1)->SetHateAmountOnEnt(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetHateAmountOnEnt__SWIG_1(void * jarg1, void * jarg2, long long jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  (arg1)->SetHateAmountOnEnt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetHateAmountOnEnt__SWIG_2(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetHateAmountOnEnt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_HalveAggro(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->HalveAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoubleAggro(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoubleAggro(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetHateAmount__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int64)(arg1)->GetHateAmount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetHateAmount__SWIG_1(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->GetHateAmount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetDamageAmount(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->GetDamageAmount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHateRatio(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int)(arg1)->GetHateRatio(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateTop(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetHateTop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateTopBot(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Bot *)(arg1)->GetHateTopBot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateTopClient(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Client *)(arg1)->GetHateTopClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateTopNPC(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (NPC *)(arg1)->GetHateTopNPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetSecondaryHate(void * jarg1, void * jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (Mob *)(arg1)->GetSecondaryHate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateDamageTop(void * jarg1, void * jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (Mob *)(arg1)->GetHateDamageTop(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateRandom(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetHateRandom();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateRandomBot(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Bot *)(arg1)->GetHateRandomBot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateRandomClient(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Client *)(arg1)->GetHateRandomClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateRandomNPC(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (NPC *)(arg1)->GetHateRandomNPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateMost(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetHateMost();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosest__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Mob *)(arg1)->GetHateClosest(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosest__SWIG_1(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetHateClosest();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosestBot__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  Bot *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Bot *)(arg1)->GetHateClosestBot(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosestBot__SWIG_1(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Bot *)(arg1)->GetHateClosestBot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosestClient__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  Client *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Client *)(arg1)->GetHateClosestClient(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosestClient__SWIG_1(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Client *)(arg1)->GetHateClosestClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosestNPC__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  NPC *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (NPC *)(arg1)->GetHateClosestNPC(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateClosestNPC__SWIG_1(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (NPC *)(arg1)->GetHateClosestNPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsEngaged(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsEngaged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetHateListCount__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  HateListCountType arg2 ;
  HateListCountType *argp2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (HateListCountType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HateListCountType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint32)(arg1)->GetHateListCount(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetHateListCount__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->GetHateListCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasPrimaryAggro(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasPrimaryAggro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasAssistAggro(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasAssistAggro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPrimaryAggro(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPrimaryAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAssistAggro(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAssistAggro(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HateSummon(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HateSummon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FaceTarget__SWIG_0(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->FaceTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FaceTarget__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->FaceTarget();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WipeHateList__SWIG_0(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->WipeHateList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WipeHateList__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->WipeHateList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddFeignMemory(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->AddFeignMemory(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveFromFeignMemory(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromFeignMemory(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ClearFeignMemory(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ClearFeignMemory();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsOnFeignMemory(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)((Mob const *)arg1)->IsOnFeignMemory(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_PrintHateListToClient(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->PrintHateListToClient(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetHateList(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::list< struct_HateList * > *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (std::list< struct_HateList * > *) &(arg1)->GetHateList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckLosFN__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CheckLosFN(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckLosFN__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->CheckLosFN(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckLosFN__SWIG_2(void * jarg1, float jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  glm::vec3 arg1 ;
  float arg2 ;
  glm::vec3 arg3 ;
  float arg4 ;
  bool result;
  
  
  arg1 = *reinterpret_cast<glm::vec3*>(jarg1);
  
  arg2 = (float)jarg2; 
  
  arg3 = *reinterpret_cast<glm::vec3*>(jarg3);
  
  arg4 = (float)jarg4; 
  result = (bool)Mob::CheckLosFN(SWIG_STD_MOVE(arg1),arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckWaterLoS(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CheckWaterLoS(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetLastLosState(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLastLosState(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckLastLosState(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CheckLastLosState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetMobDescription(void * jarg1) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetMobDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetFilteredHateList__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EntityFilterType arg2 ;
  uint32 arg3 ;
  EntityFilterType *argp2 ;
  SwigValueWrapper< std::list< struct_HateList * > > result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EntityFilterType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint32)jarg3; 
  result = (arg1)->GetFilteredHateList(arg2,arg3);
  jresult = new std::list< struct_HateList * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetFilteredHateList__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EntityFilterType arg2 ;
  EntityFilterType *argp2 ;
  SwigValueWrapper< std::list< struct_HateList * > > result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EntityFilterType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetFilteredHateList(arg2);
  jresult = new std::list< struct_HateList * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetFilteredHateList__SWIG_2(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  SwigValueWrapper< std::list< struct_HateList * > > result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetFilteredHateList();
  jresult = new std::list< struct_HateList * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageHateList__SWIG_0(void * jarg1, long long jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint32 arg3 ;
  EntityFilterType arg4 ;
  bool arg5 ;
  EntityFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EntityFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->DamageHateList(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageHateList__SWIG_1(void * jarg1, long long jarg2, unsigned int jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint32 arg3 ;
  EntityFilterType arg4 ;
  EntityFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EntityFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->DamageHateList(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageHateList__SWIG_2(void * jarg1, long long jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->DamageHateList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageHateList__SWIG_3(void * jarg1, long long jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->DamageHateList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageArea__SWIG_0(void * jarg1, long long jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint32 arg3 ;
  EntityFilterType arg4 ;
  bool arg5 ;
  EntityFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EntityFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->DamageArea(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageArea__SWIG_1(void * jarg1, long long jarg2, unsigned int jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint32 arg3 ;
  EntityFilterType arg4 ;
  EntityFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (EntityFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EntityFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->DamageArea(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageArea__SWIG_2(void * jarg1, long long jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->DamageArea(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DamageArea__SWIG_3(void * jarg1, long long jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->DamageArea(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CameraEffect__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  Client *arg4 = (Client *) 0 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CameraEffect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CameraEffect__SWIG_1(void * jarg1, unsigned int jarg2, float jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  Client *arg4 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Client *)jarg4; 
  (arg1)->CameraEffect(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CameraEffect__SWIG_2(void * jarg1, unsigned int jarg2, float jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->CameraEffect(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetQglobal(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetQglobal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateDespawnPacket(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->CreateDespawnPacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateHorseSpawnPacket__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->CreateHorseSpawnPacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateHorseSpawnPacket__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->CreateHorseSpawnPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateSpawnPacket__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->CreateSpawnPacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateSpawnPacket__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->CreateSpawnPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateSpawnPacket__SWIG_2(void * jarg1, void * jarg2) {
  EQApplicationPacket *arg1 = (EQApplicationPacket *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  
  arg1 = (EQApplicationPacket *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  Mob::CreateSpawnPacket(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FillSpawnStruct(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->FillSpawnStruct(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CreateHPPacket(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->CreateHPPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendHPUpdate__SWIG_0(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SendHPUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendHPUpdate__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SendHPUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ResetHPUpdateTimer(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ResetHPUpdateTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpawnLastNameByClass(void * jarg1) {
  NewSpawn_Struct *arg1 = (NewSpawn_Struct *) 0 ;
  
  arg1 = (NewSpawn_Struct *)jarg1; 
  Mob::SetSpawnLastNameByClass(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RandomTimer(int jarg1, int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  uint32 result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32)Mob::RandomTimer(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetDefaultGender__SWIG_0(unsigned short jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  uint16 arg1 ;
  uint8 arg2 ;
  uint8 result;
  
  arg1 = (uint16)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint8)Mob::GetDefaultGender(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetDefaultGender__SWIG_1(unsigned short jarg1) {
  unsigned char jresult ;
  uint16 arg1 ;
  uint8 result;
  
  arg1 = (uint16)jarg1; 
  result = (uint8)Mob::GetDefaultGender(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetSkillByItemType(void * jarg1, int jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  EQ::skills::SkillType result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetSkillByItemType(arg2);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetItemTypeBySkill(void * jarg1, void * jarg2) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint8)(arg1)->GetItemTypeBySkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakePet__SWIG_0(void * jarg1, unsigned short jarg2, char * jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->MakePet(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakePet__SWIG_1(void * jarg1, unsigned short jarg2, char * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->MakePet(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakePoweredPet__SWIG_0(void * jarg1, unsigned short jarg2, char * jarg3, short jarg4, char * jarg5, float jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  int16 arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->MakePoweredPet(arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakePoweredPet__SWIG_1(void * jarg1, unsigned short jarg2, char * jarg3, short jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  int16 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->MakePoweredPet(arg2,(char const *)arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakePoweredPet__SWIG_2(void * jarg1, unsigned short jarg2, char * jarg3, short jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  char *arg3 = (char *) 0 ;
  int16 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int16)jarg4; 
  (arg1)->MakePoweredPet(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsWarriorClass(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsWarriorClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetArchetype(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetArchetype();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetZone(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetZone(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendStatsWindow(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SendStatsWindow(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ShowStats(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ShowStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ShowBuffs(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ShowBuffs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_PlotPositionAroundTarget__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->PlotPositionAroundTarget(arg2,*arg3,*arg4,*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_PlotPositionAroundTarget__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (float *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PlotPositionAroundTarget(arg2,*arg3,*arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetKillExpMod(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetKillExpMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MakeAura(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->MakeAura(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetAuraSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetAuraSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetTrapSlots(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetTrapSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasFreeAuraSlots(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasFreeAuraSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasFreeTrapSlots(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasFreeTrapSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanSpawnAura(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->CanSpawnAura(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveAura__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->RemoveAura(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveAura__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveAura(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveAura__SWIG_2(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveAura(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveAllAuras(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->RemoveAllAuras();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetAuraMgr(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob::AuraMgr *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob::AuraMgr *) &(arg1)->GetAuraMgr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TriggerDefensiveProcs__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, unsigned int jarg4, long long jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool arg4 ;
  int64 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int64)jarg5; 
  (arg1)->TriggerDefensiveProcs(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TriggerDefensiveProcs__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->TriggerDefensiveProcs(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TriggerDefensiveProcs__SWIG_2(void * jarg1, void * jarg2, unsigned short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->TriggerDefensiveProcs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TriggerDefensiveProcs__SWIG_3(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->TriggerDefensiveProcs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddRangedProc__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->AddRangedProc(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddRangedProc__SWIG_1(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (bool)(arg1)->AddRangedProc(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddRangedProc__SWIG_2(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->AddRangedProc(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddRangedProc__SWIG_3(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->AddRangedProc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveRangedProc__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->RemoveRangedProc(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveRangedProc__SWIG_1(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveRangedProc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasRangedProcs(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasRangedProcs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddDefensiveProc__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->AddDefensiveProc(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddDefensiveProc__SWIG_1(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (bool)(arg1)->AddDefensiveProc(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddDefensiveProc__SWIG_2(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->AddDefensiveProc(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddDefensiveProc__SWIG_3(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->AddDefensiveProc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveDefensiveProc__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->RemoveDefensiveProc(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveDefensiveProc__SWIG_1(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveDefensiveProc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasDefensiveProcs(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasDefensiveProcs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasSkillProcs(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasSkillProcs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasSkillProcSuccess(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasSkillProcSuccess();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddProcToWeapon__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3, unsigned short jarg4, unsigned short jarg5, int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  uint16 arg4 ;
  uint16 arg5 ;
  int arg6 ;
  uint32 arg7 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (bool)(arg1)->AddProcToWeapon(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddProcToWeapon__SWIG_1(void * jarg1, unsigned short jarg2, unsigned int jarg3, unsigned short jarg4, unsigned short jarg5, int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  uint16 arg4 ;
  uint16 arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->AddProcToWeapon(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddProcToWeapon__SWIG_2(void * jarg1, unsigned short jarg2, unsigned int jarg3, unsigned short jarg4, unsigned short jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  uint16 arg4 ;
  uint16 arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint16)jarg5; 
  result = (bool)(arg1)->AddProcToWeapon(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddProcToWeapon__SWIG_3(void * jarg1, unsigned short jarg2, unsigned int jarg3, unsigned short jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  uint16 arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint16)jarg4; 
  result = (bool)(arg1)->AddProcToWeapon(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddProcToWeapon__SWIG_4(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->AddProcToWeapon(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddProcToWeapon__SWIG_5(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->AddProcToWeapon(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveProcFromWeapon__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->RemoveProcFromWeapon(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RemoveProcFromWeapon__SWIG_1(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->RemoveProcFromWeapon(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasProcs(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasProcs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsCombatProc(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->IsCombatProc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsRaidTarget(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsRaidTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsAttackAllowed__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->IsAttackAllowed(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsAttackAllowed__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsAttackAllowed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsTargeted__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsTargeted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_IsTargeted__SWIG_1(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->IsTargeted(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFollowID(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetFollowID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFollowDistance(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetFollowDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFollowCanRun(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFollowCanRun(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetFollowID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetFollowID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetFollowDistance(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetFollowDistance();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetFollowCanRun(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetFollowCanRun();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsRareSpawn(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsRareSpawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetRareSpawn(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRareSpawn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Message(void * jarg1, unsigned int jarg2, char * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Message(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->MessageString(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->MessageString(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, unsigned int jarg13) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  uint32 arg13 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (uint32)jarg13; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_5(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_6(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_7(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_8(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_9(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_10(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MessageString__SWIG_11(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FilteredMessageString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Say(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Say((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->SayString(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->SayString(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_2(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SayString(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_3(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->SayString(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_4(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SayString(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_5(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SayString(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_6(void * jarg1, unsigned int jarg2, char * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SayString(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_7(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SayString(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_8(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_9(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_10(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_11(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_12(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_13(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_14(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_15(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SayString(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_16(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_17(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_18(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_19(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_20(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_21(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_22(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SayString(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_23(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SayString(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_24(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_25(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_26(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_27(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_28(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_29(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_30(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SayString(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SayString__SWIG_31(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SayString(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Shout(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Shout((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Emote(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Emote((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_QuestJournalledSay(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Client *arg2 = (Client *) 0 ;
  char *arg3 = (char *) 0 ;
  Journal::Options *arg4 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (Journal::Options *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Journal::Options & is null", 0);
    return ;
  } 
  (arg1)->QuestJournalledSay(arg2,(char const *)arg3,*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetItemStat(void * jarg1, unsigned int jarg2, const char * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (int)(arg1)->GetItemStat(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcFocusEffect__SWIG_0(void * jarg1, int jarg2, unsigned short jarg3, unsigned short jarg4, unsigned int jarg5, unsigned short jarg6, void * jarg7) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  bool arg5 ;
  uint16 arg6 ;
  Mob *arg7 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint16)jarg6; 
  arg7 = (Mob *)jarg7; 
  result = (int64)(arg1)->CalcFocusEffect(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcFocusEffect__SWIG_1(void * jarg1, int jarg2, unsigned short jarg3, unsigned short jarg4, unsigned int jarg5, unsigned short jarg6) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  bool arg5 ;
  uint16 arg6 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint16)jarg6; 
  result = (int64)(arg1)->CalcFocusEffect(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcFocusEffect__SWIG_2(void * jarg1, int jarg2, unsigned short jarg3, unsigned short jarg4, unsigned int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  bool arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int64)(arg1)->CalcFocusEffect(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcFocusEffect__SWIG_3(void * jarg1, int jarg2, unsigned short jarg3, unsigned short jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (int64)(arg1)->CalcFocusEffect(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_IsFocusEffect__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  result = (uint8)(arg1)->IsFocusEffect(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_IsFocusEffect__SWIG_1(void * jarg1, unsigned short jarg2, int jarg3, unsigned int jarg4) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool arg4 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (uint8)(arg1)->IsFocusEffect(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_IsFocusEffect__SWIG_2(void * jarg1, unsigned short jarg2, int jarg3) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  result = (uint8)(arg1)->IsFocusEffect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendIllusionPacket(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  AppearanceStruct *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (AppearanceStruct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AppearanceStruct const & is null", 0);
    return ;
  } 
  (arg1)->SendIllusionPacket((AppearanceStruct const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CloneAppearance__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->CloneAppearance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CloneAppearance__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->CloneAppearance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFaceAppearance__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  FaceChange_Struct *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (FaceChange_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FaceChange_Struct const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetFaceAppearance((FaceChange_Struct const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFaceAppearance__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  FaceChange_Struct *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (FaceChange_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "FaceChange_Struct const & is null", 0);
    return ;
  } 
  (arg1)->SetFaceAppearance((FaceChange_Struct const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RandomizeFeatures__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->RandomizeFeatures(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RandomizeFeatures__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->RandomizeFeatures(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_RandomizeFeatures__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->RandomizeFeatures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Stun(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Stun(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_UnStun(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->UnStun();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Silence(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Silence(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Amnesia(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Amnesia(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TemporaryPets__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, void * jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  bool arg6 ;
  bool arg7 ;
  uint16 *arg8 = (uint16 *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = (uint16 *)jarg8; 
  (arg1)->TemporaryPets(arg2,arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TemporaryPets__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->TemporaryPets(arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TemporaryPets__SWIG_2(void * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  bool arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->TemporaryPets(arg2,arg3,(char const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TemporaryPets__SWIG_3(void * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->TemporaryPets(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TemporaryPets__SWIG_4(void * jarg1, unsigned short jarg2, void * jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->TemporaryPets(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TemporaryPets__SWIG_5(void * jarg1, unsigned short jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->TemporaryPets(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TypesTemporaryPets__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->TypesTemporaryPets(arg2,arg3,(char const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TypesTemporaryPets__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  bool arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->TypesTemporaryPets(arg2,arg3,(char const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TypesTemporaryPets__SWIG_2(void * jarg1, unsigned int jarg2, void * jarg3, char * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->TypesTemporaryPets(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TypesTemporaryPets__SWIG_3(void * jarg1, unsigned int jarg2, void * jarg3, char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->TypesTemporaryPets(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TypesTemporaryPets__SWIG_4(void * jarg1, unsigned int jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->TypesTemporaryPets(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WakeTheDead(void * jarg1, unsigned short jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Corpse *arg3 = (Corpse *) 0 ;
  Mob *arg4 = (Mob *) 0 ;
  uint32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Corpse *)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->WakeTheDead(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Spin(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->Spin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Kill(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->Kill();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_PassCharismaCheck(void * jarg1, void * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->PassCharismaCheck(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryDeathSave(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->TryDeathSave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryDivineSave(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->TryDivineSave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryTriggerOnCastFocusEffect(void * jarg1, int jarg2, unsigned short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  uint16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->TryTriggerOnCastFocusEffect(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryTriggerOnCastProc(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (bool)(arg1)->TryTriggerOnCastProc(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TrySpellTrigger(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->TrySpellTrigger(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryTriggerOnCastRequirement(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->TryTriggerOnCastRequirement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TryTwincast(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->TryTwincast(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TrySympatheticProc(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->TrySympatheticProc(arg2,arg3);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetSympatheticFocusEffect(void * jarg1, int jarg2, unsigned short jarg3) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  uint16 arg3 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (uint16)(arg1)->GetSympatheticFocusEffect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryFadeEffect(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->TryFadeEffect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DispelMagic(void * jarg1, void * jarg2, unsigned short jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->DispelMagic(arg2,arg3,arg4);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetSpellEffectResistChance(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint16)(arg1)->GetSpellEffectResistChance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetVulnerability__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool arg5 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (int32)(arg1)->GetVulnerability(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetVulnerability__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (int32)(arg1)->GetVulnerability(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetFcDamageAmtIncoming__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  bool arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int64)(arg1)->GetFcDamageAmtIncoming(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetFcDamageAmtIncoming__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  result = (int64)(arg1)->GetFcDamageAmtIncoming(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetFocusIncoming(void * jarg1, int jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  int arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  uint32 arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (int64)(arg1)->GetFocusIncoming(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSkillDmgTaken__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  ExtraAttackOptions *arg3 = (ExtraAttackOptions *) 0 ;
  EQ::skills::SkillType const *argp2 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType const", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (ExtraAttackOptions *)jarg3; 
  result = (int32)(arg1)->GetSkillDmgTaken(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSkillDmgTaken__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType const *argp2 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int32)(arg1)->GetSkillDmgTaken(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPositionalDmgTaken(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int32)(arg1)->GetPositionalDmgTaken(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPositionalDmgTakenAmt(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int32)(arg1)->GetPositionalDmgTakenAmt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoKnockback(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->DoKnockback(arg2,arg3,arg4);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_CalcResistChanceBonus(void * jarg1) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int16)(arg1)->CalcResistChanceBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_CalcFearResistChance(void * jarg1) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int16)(arg1)->CalcFearResistChance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TrySpellOnKill(void * jarg1, unsigned char jarg2, unsigned short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->TrySpellOnKill(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TrySpellOnDeath(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->TrySpellOnDeath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastOnCurer(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->CastOnCurer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastOnCure(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->CastOnCure(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastOnNumHitFade(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->CastOnNumHitFade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SlowMitigation(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SlowMitigation(arg2);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetCritDmgMod__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int16)(arg1)->GetCritDmgMod(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetCritDmgMod__SWIG_1(void * jarg1, unsigned short jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int16)(arg1)->GetCritDmgMod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetMeleeDamageMod_SE(void * jarg1, unsigned short jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int16)(arg1)->GetMeleeDamageMod_SE(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetMeleeMinDamageMod_SE(void * jarg1, unsigned short jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int16)(arg1)->GetMeleeMinDamageMod_SE(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetCrippBlowChance(void * jarg1) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int16)(arg1)->GetCrippBlowChance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetMeleeDmgPositionMod(void * jarg1, void * jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int16)(arg1)->GetMeleeDmgPositionMod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetSkillReuseTime(void * jarg1, unsigned short jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int16)(arg1)->GetSkillReuseTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCriticalChanceBonus(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int)(arg1)->GetCriticalChanceBonus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSkillDmgAmt(void * jarg1, int jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSkillDmgAmt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetPositionalDmgAmt(void * jarg1, void * jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int16)(arg1)->GetPositionalDmgAmt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanBlockSpell(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanBlockSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoHPToManaCovert__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->DoHPToManaCovert(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DoHPToManaCovert__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->DoHPToManaCovert();
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_Mob_GetDecayEffectValue(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  signed char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  int8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (int8)(arg1)->GetDecayEffectValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetExtraSpellAmt(void * jarg1, unsigned short jarg2, long long jarg3, long long jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  result = (int64)(arg1)->GetExtraSpellAmt(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_MeleeLifeTap(void * jarg1, long long jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->MeleeLifeTap(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_PassCastRestriction(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->PassCastRestriction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendCastRestrictionMessage__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SendCastRestrictionMessage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendCastRestrictionMessage__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SendCastRestrictionMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendCastRestrictionMessage__SWIG_2(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SendCastRestrictionMessage(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ImprovedTaunt(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->ImprovedTaunt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryRootFadeByDamage(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->TryRootFadeByDamage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetSlowMitigation(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetSlowMitigation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcSpellPowerDistanceMod__SWIG_0(void * jarg1, unsigned short jarg2, float jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  float arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->CalcSpellPowerDistanceMod(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcSpellPowerDistanceMod__SWIG_1(void * jarg1, unsigned short jarg2, float jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  float arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->CalcSpellPowerDistanceMod(arg2,arg3);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetSpellPowerDistanceMod(void * jarg1) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int16)((Mob const *)arg1)->GetSpellPowerDistanceMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpellPowerDistanceMod(void * jarg1, short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->SetSpellPowerDistanceMod(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSpellStat__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, unsigned char jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  result = (int32)(arg1)->GetSpellStat(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSpellStat__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int32)(arg1)->GetSpellStat(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HarmonySpellLevelCheck__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->HarmonySpellLevelCheck(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HarmonySpellLevelCheck__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->HarmonySpellLevelCheck(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_PassCharmTargetRestriction(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->PassCharmTargetRestriction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanFocusUseRandomEffectivenessByType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  result = (bool)(arg1)->CanFocusUseRandomEffectivenessByType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetFocusRandomEffectivenessValue__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->GetFocusRandomEffectivenessValue(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetFocusRandomEffectivenessValue__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->GetFocusRandomEffectivenessValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHealRate(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetHealRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMemoryBlurChance(void * jarg1, int jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetMemoryBlurChance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasBaseEffectFocus(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasBaseEffectFocus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetDualWieldingSameDelayWeapons(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)((Mob const *)arg1)->GetDualWieldingSameDelayWeapons();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDualWieldingSameDelayWeapons(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetDualWieldingSameDelayWeapons(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsTargetedFocusEffect(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsTargetedFocusEffect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasPersistDeathIllusion(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->HasPersistDeathIllusion(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryDoubleMeleeRoundEffect(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->TryDoubleMeleeRoundEffect();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetUseDoubleMeleeRoundDmgBonus(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetUseDoubleMeleeRoundDmgBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetUseDoubleMeleeRoundDmgBonus(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetUseDoubleMeleeRoundDmgBonus(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CastSpellOnLand(void * jarg1, void * jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->CastSpellOnLand(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFocusProcLimitTimerActive(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->IsFocusProcLimitTimerActive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFocusProcLimitTimer(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetFocusProcLimitTimer(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsProcLimitTimerActive(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->IsProcLimitTimerActive(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetProcLimitTimer(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetProcLimitTimer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_VirusEffectProcess(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->VirusEffectProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SpreadVirusEffect(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  int32 arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->SpreadVirusEffect(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ModSkillDmgTaken(void * jarg1, void * jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  EQ::skills::SkillType *argp2 ;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->ModSkillDmgTaken(arg2,arg3);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetModSkillDmgTaken(void * jarg1, void * jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType const *argp2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int16)(arg1)->GetModSkillDmgTaken(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ModVulnerability(void * jarg1, unsigned char jarg2, short jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  int16 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->ModVulnerability(arg2,arg3);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetModVulnerability(void * jarg1, unsigned char jarg2) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int16)(arg1)->GetModVulnerability(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAllowBeneficial(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAllowBeneficial(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetAllowBeneficial(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->GetAllowBeneficial();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDisableMelee(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisableMelee(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsMeleeDisabled(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsMeleeDisabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsOffHandAtk(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsOffHandAtk();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_OffHandAtk(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->OffHandAtk(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFlurryChance(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetFlurryChance(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetFlurryChance(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetFlurryChance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetAppearanceValue(void * jarg1) {
  unsigned int jresult ;
  EmuAppearance arg1 ;
  EmuAppearance *argp1 ;
  uint32 result;
  
  argp1 = (EmuAppearance *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuAppearance", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (uint32)Mob::GetAppearanceValue(SWIG_STD_MOVE(arg1));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearancePacket__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  Client *arg6 = (Client *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (Client *)jarg6; 
  (arg1)->SendAppearancePacket(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearancePacket__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->SendAppearancePacket(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearancePacket__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SendAppearancePacket(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendAppearancePacket__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendAppearancePacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAppearance__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EmuAppearance arg2 ;
  bool arg3 ;
  EmuAppearance *argp2 ;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EmuAppearance *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuAppearance", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetAppearance(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAppearance__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  EmuAppearance arg2 ;
  EmuAppearance *argp2 ;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EmuAppearance *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuAppearance", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAppearance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetAppearance(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EmuAppearance result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetAppearance();
  jresult = new EmuAppearance(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetAnimation(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetAnimation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAnimation(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAnimation(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetRunAnimSpeed(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)((Mob const *)arg1)->GetRunAnimSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetRunAnimSpeed(void * jarg1, signed char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int8)jarg2; 
  (arg1)->SetRunAnimSpeed(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsDestructibleObject(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsDestructibleObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDestructibleObject(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDestructibleObject(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetInnateLightType(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetInnateLightType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetEquipmentLightType(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetEquipmentLightType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetSpellLightType(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetSpellLightType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_UpdateEquipmentLight(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->UpdateEquipmentLight();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpellLightType(void * jarg1, unsigned char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetSpellLightType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendWearChangeAndLighting(void * jarg1, signed char jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int8 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int8)jarg2; 
  (arg1)->SendWearChangeAndLighting(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetActiveLightType(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetActiveLightType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_UpdateActiveLight(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->UpdateActiveLight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetLightProfile(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::LightSourceProfile *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (EQ::LightSourceProfile *)(arg1)->GetLightProfile();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetPet(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetPet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPet(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetPet(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetOwner(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetOwnerOrSelf(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetOwnerOrSelf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetUltimateOwner(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob *)(arg1)->GetUltimateOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetID(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetPetID(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetPetID(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetPetID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPetType(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  PetType result;
  
  arg1 = (Mob *)jarg1; 
  result = (PetType)((Mob const *)arg1)->GetPetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetType(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  PetType arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (PetType)jarg2; 
  (arg1)->SetPetType(arg2);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetPetPower(void * jarg1) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int16)((Mob const *)arg1)->GetPetPower();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetPower(void * jarg1, short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->SetPetPower(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFamiliar(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsFamiliar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsAnimation(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsAnimation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsCharmed(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsCharmed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsTargetLockPet(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsTargetLockPet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetPetTargetLockID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->GetPetTargetLockID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetTargetLockID(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetPetTargetLockID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetOwnerID(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetOwnerID(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetOwnerID(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetOwnerID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasOwner(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPet(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsPet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasPet(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasPet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasTempPetsActive(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasTempPetsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTempPetsActive(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTempPetsActive(arg2);
}


SWIGEXPORT short SWIGSTDCALL CSharp_Mob_GetTempPetCount(void * jarg1) {
  short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int16)((Mob const *)arg1)->GetTempPetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTempPetCount(void * jarg1, short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->SetTempPetCount(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasPetAffinity(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasPetAffinity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPetOwnerBot(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPetOwnerBot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetOwnerBot(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPetOwnerBot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPetOwnerClient(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPetOwnerClient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetOwnerClient(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPetOwnerClient(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPetOwnerNPC(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPetOwnerNPC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetOwnerNPC(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPetOwnerNPC(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsTempPet(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsTempPet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTempPet(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTempPet(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsHorse(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsHorse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPetAvoidanceBonusFromOwner(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetPetAvoidanceBonusFromOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPetACBonusFromOwner(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetPetACBonusFromOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPetATKBonusFromOwner(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetPetATKBonusFromOwner();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetBodyType(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bodyType result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetBodyType();
  jresult = new bodyType(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetOrigBodyType(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bodyType result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetOrigBodyType();
  jresult = new bodyType(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBodyType(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  bodyType arg2 ;
  bool arg3 ;
  bodyType *argp2 ;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (bodyType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null bodyType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBodyType(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_invulnerable_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->invulnerable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_invulnerable_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->invulnerable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_qglobal_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->qglobal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_qglobal_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->qglobal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetAttackTimer(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SetAttackTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetInvul(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInvul(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetInvul(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->GetInvul();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetExtraHaste(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetExtraHaste(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHaste(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetHaste();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMeleeMitigation(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int32)(arg1)->GetMeleeMitigation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetWeaponDamageBonus__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  bool arg3 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (uint8)(arg1)->GetWeaponDamageBonus((EQ::ItemData const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetWeaponDamageBonus__SWIG_1(void * jarg1, void * jarg2) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  result = (uint8)(arg1)->GetWeaponDamageBonus((EQ::ItemData const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetDamageTable(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  DamageTable *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (DamageTable *) &((Mob const *)arg1)->GetDamageTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyDamageTable(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  DamageHitInfo *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (DamageHitInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->ApplyDamageTable(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHandToHandDamage(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetHandToHandDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassDoubleAttack(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassDoubleAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassTripleAttack(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassTripleAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassDualWield(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassDualWield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassRiposte(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassRiposte();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassDodge(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassDodge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassParry(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassParry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanThisClassBlock(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanThisClassBlock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetHandToHandDelay(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetHandToHandDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetClassLevelFactor(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->GetClassLevelFactor();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Mesmerize(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->Mesmerize();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsMezzed(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsMezzed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsStunned(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsStunned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsSilenced(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsSilenced();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsAmnesiad(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsAmnesiad();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_ReduceDamage(void * jarg1, long long jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)(arg1)->ReduceDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_AffectMagicalDamage(void * jarg1, long long jarg2, unsigned short jarg3, unsigned int jarg4, void * jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (Mob *)jarg5; 
  result = (int64)(arg1)->AffectMagicalDamage(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_ReduceAllDamage(void * jarg1, long long jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)(arg1)->ReduceAllDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoSpecialAttackDamage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::skills::SkillType arg3 ;
  int arg4 ;
  int arg5 ;
  int32 arg6 ;
  int arg7 ;
  EQ::skills::SkillType *argp3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (EQ::skills::SkillType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->DoSpecialAttackDamage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoSpecialAttackDamage__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::skills::SkillType arg3 ;
  int arg4 ;
  int arg5 ;
  int32 arg6 ;
  EQ::skills::SkillType *argp3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (EQ::skills::SkillType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int32)jarg6; 
  (arg1)->DoSpecialAttackDamage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoSpecialAttackDamage__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::skills::SkillType arg3 ;
  int arg4 ;
  int arg5 ;
  EQ::skills::SkillType *argp3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (EQ::skills::SkillType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->DoSpecialAttackDamage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoSpecialAttackDamage__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::skills::SkillType arg3 ;
  int arg4 ;
  EQ::skills::SkillType *argp3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (EQ::skills::SkillType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  (arg1)->DoSpecialAttackDamage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, int jarg10, float jarg11, unsigned int jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  int arg10 ;
  float arg11 ;
  bool arg12 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = jarg12 ? true : false; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, int jarg10, float jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  int arg10 ;
  float arg11 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (float)jarg11; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, int jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  int arg10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (int)jarg10; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  int32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_8(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *arg4 = (EQ::ItemData *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemData *)jarg4; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemData const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  (arg1)->DoThrowingAttackDmg(arg2,(EQ::ItemInstance const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoThrowingAttackDmg__SWIG_10(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoThrowingAttackDmg(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_0(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5, short jarg6, unsigned int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  EQ::skills::SkillType arg4 ;
  int16 arg5 ;
  int16 arg6 ;
  bool arg7 ;
  int arg8 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int16)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (int)jarg8; 
  (arg1)->DoMeleeSkillAttackDmg(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_1(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5, short jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  EQ::skills::SkillType arg4 ;
  int16 arg5 ;
  int16 arg6 ;
  bool arg7 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int16)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->DoMeleeSkillAttackDmg(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_2(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5, short jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  EQ::skills::SkillType arg4 ;
  int16 arg5 ;
  int16 arg6 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int16)jarg5; 
  arg6 = (int16)jarg6; 
  (arg1)->DoMeleeSkillAttackDmg(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_3(void * jarg1, void * jarg2, int jarg3, void * jarg4, short jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  EQ::skills::SkillType arg4 ;
  int16 arg5 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (int16)jarg5; 
  (arg1)->DoMeleeSkillAttackDmg(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoMeleeSkillAttackDmg__SWIG_4(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int32 arg3 ;
  EQ::skills::SkillType arg4 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int32)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->DoMeleeSkillAttackDmg(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10, void * jarg11, int jarg12, float jarg13, unsigned int jarg14) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  EQ::ItemData *arg11 = (EQ::ItemData *) 0 ;
  int arg12 ;
  float arg13 ;
  bool arg14 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (EQ::ItemData *)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (float)jarg13; 
  arg14 = jarg14 ? true : false; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,(EQ::ItemData const *)arg11,arg12,arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10, void * jarg11, int jarg12, float jarg13) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  EQ::ItemData *arg11 = (EQ::ItemData *) 0 ;
  int arg12 ;
  float arg13 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (EQ::ItemData *)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (float)jarg13; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,(EQ::ItemData const *)arg11,arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10, void * jarg11, int jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  EQ::ItemData *arg11 = (EQ::ItemData *) 0 ;
  int arg12 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (EQ::ItemData *)jarg11; 
  arg12 = (int)jarg12; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,(EQ::ItemData const *)arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10, void * jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  EQ::ItemData *arg11 = (EQ::ItemData *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (EQ::ItemData *)jarg11; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10,(EQ::ItemData const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9, unsigned int jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8, unsigned int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  uint32 arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6, short jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  int16 arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  arg7 = (int16)jarg7; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_8(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, short jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  int16 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int16)jarg6; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_9(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  int32 arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_10(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3,(EQ::ItemInstance const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_11(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  (arg1)->DoArcheryAttackDmg(arg2,(EQ::ItemInstance const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoArcheryAttackDmg__SWIG_12(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoArcheryAttackDmg(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryProjectileAttack__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned long long jarg5, void * jarg6, void * jarg7, int jarg8, float jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemData *arg3 = (EQ::ItemData *) 0 ;
  EQ::skills::SkillType arg4 ;
  uint64 arg5 ;
  EQ::ItemInstance *arg6 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg7 = (EQ::ItemInstance *) 0 ;
  int arg8 ;
  float arg9 ;
  bool arg10 ;
  EQ::skills::SkillType *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemData *)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint64)jarg5; 
  arg6 = (EQ::ItemInstance *)jarg6; 
  arg7 = (EQ::ItemInstance *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (bool)(arg1)->TryProjectileAttack(arg2,(EQ::ItemData const *)arg3,arg4,arg5,(EQ::ItemInstance const *)arg6,(EQ::ItemInstance const *)arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TryProjectileAttack__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned long long jarg5, void * jarg6, void * jarg7, int jarg8, float jarg9) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemData *arg3 = (EQ::ItemData *) 0 ;
  EQ::skills::SkillType arg4 ;
  uint64 arg5 ;
  EQ::ItemInstance *arg6 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg7 = (EQ::ItemInstance *) 0 ;
  int arg8 ;
  float arg9 ;
  EQ::skills::SkillType *argp4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemData *)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint64)jarg5; 
  arg6 = (EQ::ItemInstance *)jarg6; 
  arg7 = (EQ::ItemInstance *)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (float)jarg9; 
  result = (bool)(arg1)->TryProjectileAttack(arg2,(EQ::ItemData const *)arg3,arg4,arg5,(EQ::ItemInstance const *)arg6,(EQ::ItemInstance const *)arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProjectileAttack(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ProjectileAttack();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasProjectileAttack(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->HasProjectileAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetProjectileAttack(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetProjectileAttack(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetRangeDistTargetSizeMod(void * jarg1, void * jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (float)(arg1)->GetRangeDistTargetSizeMod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanDoSpecialAttack(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CanDoSpecialAttack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Flurry(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  ExtraAttackOptions *arg2 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (ExtraAttackOptions *)jarg2; 
  result = (bool)(arg1)->Flurry(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Rampage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  ExtraAttackOptions *arg2 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (ExtraAttackOptions *)jarg2; 
  result = (bool)(arg1)->Rampage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_AddRampage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->AddRampage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ClearRampage(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ClearRampage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveFromRampageList__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveFromRampageList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RemoveFromRampageList__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RemoveFromRampageList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBottomRampageList(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SetBottomRampageList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetTopRampageList(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SetTopRampageList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AreaRampage(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  ExtraAttackOptions *arg2 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (ExtraAttackOptions *)jarg2; 
  (arg1)->AreaRampage(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsSpecialAttack(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  eSpecialAttacks arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (eSpecialAttacks)jarg2; 
  result = (bool)(arg1)->IsSpecialAttack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StartEnrage(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->StartEnrage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessEnrage(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ProcessEnrage();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsEnraged(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsEnraged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Taunt__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5, int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  int arg4 ;
  bool arg5 ;
  int32 arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int32)jarg6; 
  (arg1)->Taunt(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Taunt__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->Taunt(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Taunt__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  (arg1)->Taunt(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_Taunt__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Taunt(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Init(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AI_Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Start__SWIG_0(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AI_Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Start__SWIG_1(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AI_Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Stop(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AI_Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_ShutDown(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AI_ShutDown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Process(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AI_Process();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ClearEntityVariables(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->ClearEntityVariables();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DeleteEntityVariable(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->DeleteEntityVariable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetEntityVariable(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetEntityVariable(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetEntityVariables(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetEntityVariables();
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetEntityVariable(void * jarg1, const char * jarg2, const char * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SetEntityVariable(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_EntityVariableExists(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->EntityVariableExists(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Event_Engaged__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AI_Event_Engaged(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Event_Engaged__SWIG_1(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->AI_Event_Engaged(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AI_Event_NoLongerEngaged(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AI_Event_NoLongerEngaged();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetSpecialFactionCon(void * jarg1, void * jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  FACTION_VALUE result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (arg1)->GetSpecialFactionCon(arg2);
  jresult = new FACTION_VALUE(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsAIControlled(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsAIControlled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetAggroRange(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetAggroRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetAssistRange(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetAssistRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetOrder(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob::eStandingPetOrder arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob::eStandingPetOrder)jarg2; 
  (arg1)->SetPetOrder(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetPetOrder(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob::eStandingPetOrder result;
  
  arg1 = (Mob *)jarg1; 
  result = (Mob::eStandingPetOrder)((Mob const *)arg1)->GetPetOrder();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetHeld(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHeld(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsHeld(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsHeld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetGHeld(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGHeld(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsGHeld(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsGHeld();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetNoCast(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNoCast(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsNoCast(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsNoCast();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFocused(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFocused(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFocused(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsFocused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetStop(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPetStop(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPetStop(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPetStop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPetRegroup(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPetRegroup(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPetRegroup(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPetRegroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsRoamer(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsRoamer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetWanderType(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetWanderType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsRooted(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsRooted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPermaRooted(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPermaRooted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSnaredAmount(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetSnaredAmount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsPseudoRooted(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsPseudoRooted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetPseudoRoot(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPseudoRoot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCurWp(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetCurWp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetFearSpeed(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->GetFearSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFeared(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsFeared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StartFleeing(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->StartFleeing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessFlee(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ProcessFlee();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CheckFlee(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->CheckFlee();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsBlind(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsBlind();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckAggro(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CheckAggro(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_CalculateHeadingToTarget(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->CalculateHeadingToTarget(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_WalkTo(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->WalkTo(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RunTo(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->RunTo(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_NavigateTo(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->NavigateTo(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RotateTo(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->RotateTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RotateToWalking(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->RotateToWalking(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_RotateToRunning(void * jarg1, float jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->RotateToRunning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StopNavigation(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->StopNavigation();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_CalculateDistance__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)(arg1)->CalculateDistance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_CalculateDistance__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (float)(arg1)->CalculateDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetGroundZ__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)(arg1)->GetGroundZ(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetGroundZ__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)(arg1)->GetGroundZ(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendTo(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SendTo(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendToFixZ(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SendToFixZ(arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetZOffset(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetZOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetDefaultRaceSize__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (float)((Mob const *)arg1)->GetDefaultRaceSize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetDefaultRaceSize__SWIG_1(void * jarg1, int jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((Mob const *)arg1)->GetDefaultRaceSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetDefaultRaceSize__SWIG_2(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetDefaultRaceSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FixZ__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->FixZ(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FixZ__SWIG_1(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->FixZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_FixZ__SWIG_2(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->FixZ();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetFixedZ__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  glm::vec3 *arg2 = 0 ;
  int32 arg3 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (int32)jarg3; 
  result = (float)(arg1)->GetFixedZ((glm::vec3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetFixedZ__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  glm::vec3 *arg2 = 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (float)(arg1)->GetFixedZ((glm::vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetStuckBehavior(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetStuckBehavior();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_NPCSpecialAttacks__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->NPCSpecialAttacks((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_NPCSpecialAttacks__SWIG_1(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->NPCSpecialAttacks((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_NPCSpecialAttacks__SWIG_2(void * jarg1, char * jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->NPCSpecialAttacks((char const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DontHealMeBefore(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->DontHealMeBefore();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DontBuffMeBefore(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->DontBuffMeBefore();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DontDotMeBefore(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->DontDotMeBefore();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DontRootMeBefore(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->DontRootMeBefore();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DontSnareMeBefore(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->DontSnareMeBefore();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DontCureMeBefore(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->DontCureMeBefore();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDontRootMeBefore(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDontRootMeBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDontHealMeBefore(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDontHealMeBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDontBuffMeBefore(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDontBuffMeBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDontDotMeBefore(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDontDotMeBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDontSnareMeBefore(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDontSnareMeBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetDontCureMeBefore(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDontCureMeBefore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SaveSpellLoc(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->SaveSpellLoc();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetSpellX(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetSpellX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetSpellY(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetSpellY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetSpellZ(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetSpellZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsGrouped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsGrouped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetGrouped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGrouped(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsRaidGrouped(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsRaidGrouped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetRaidGrouped(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRaidGrouped(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_IsLooting(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->IsLooting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetLooting(void * jarg1, unsigned short jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetLooting(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckWillAggro(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CheckWillAggro(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_InstillDoubt(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->InstillDoubt(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Charmed(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->Charmed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetLevelHP(unsigned char jarg1) {
  unsigned int jresult ;
  uint8 arg1 ;
  uint32 result;
  
  arg1 = (uint8)jarg1; 
  result = (uint32)Mob::GetLevelHP(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetZoneID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetZoneID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Mob_GetInstanceVersion(void * jarg1) {
  unsigned short jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint16)((Mob const *)arg1)->GetInstanceVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckAggroAmount__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  bool arg4 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int32)(arg1)->CheckAggroAmount(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckAggroAmount__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int32)(arg1)->CheckAggroAmount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckHealAggroAmount__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, unsigned int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  uint32 arg4 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (int32)(arg1)->CheckHealAggroAmount(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckHealAggroAmount__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int32)(arg1)->CheckHealAggroAmount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetInstrumentMod(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint32)(arg1)->GetInstrumentMod(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6, int jarg7, unsigned short jarg8) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  int arg4 ;
  uint32 arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  int arg7 ;
  uint16 arg8 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (Mob *)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (uint16)jarg8; 
  result = (int64)(arg1)->CalcSpellEffectValue(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue__SWIG_1(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6, int jarg7) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  int arg4 ;
  uint32 arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  int arg7 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (Mob *)jarg6; 
  arg7 = (int)jarg7; 
  result = (int64)(arg1)->CalcSpellEffectValue(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue__SWIG_2(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, unsigned int jarg5, void * jarg6) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  int arg4 ;
  uint32 arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (Mob *)jarg6; 
  result = (int64)(arg1)->CalcSpellEffectValue(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue__SWIG_3(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (int64)(arg1)->CalcSpellEffectValue(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue__SWIG_4(void * jarg1, unsigned short jarg2, int jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->CalcSpellEffectValue(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue__SWIG_5(void * jarg1, unsigned short jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->CalcSpellEffectValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue_formula__SWIG_0(void * jarg1, unsigned int jarg2, long long jarg3, long long jarg4, int jarg5, unsigned short jarg6, int jarg7) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int arg5 ;
  uint16 arg6 ;
  int arg7 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (uint16)jarg6; 
  arg7 = (int)jarg7; 
  result = (int64)(arg1)->CalcSpellEffectValue_formula(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcSpellEffectValue_formula__SWIG_1(void * jarg1, unsigned int jarg2, long long jarg3, long long jarg4, int jarg5, unsigned short jarg6) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int64 arg3 ;
  int64 arg4 ;
  int arg5 ;
  uint16 arg6 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (int64)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (uint16)jarg6; 
  result = (int64)(arg1)->CalcSpellEffectValue_formula(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckStackConflict__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3, unsigned short jarg4, int jarg5, void * jarg6, void * jarg7, int jarg8) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  uint16 arg4 ;
  int arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  Mob *arg7 = (Mob *) 0 ;
  int arg8 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (Mob *)jarg6; 
  arg7 = (Mob *)jarg7; 
  arg8 = (int)jarg8; 
  result = (int)(arg1)->CheckStackConflict(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckStackConflict__SWIG_1(void * jarg1, unsigned short jarg2, int jarg3, unsigned short jarg4, int jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  uint16 arg4 ;
  int arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  Mob *arg7 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (Mob *)jarg6; 
  arg7 = (Mob *)jarg7; 
  result = (int)(arg1)->CheckStackConflict(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckStackConflict__SWIG_2(void * jarg1, unsigned short jarg2, int jarg3, unsigned short jarg4, int jarg5, void * jarg6) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  uint16 arg4 ;
  int arg5 ;
  Mob *arg6 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (Mob *)jarg6; 
  result = (int)(arg1)->CheckStackConflict(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CheckStackConflict__SWIG_3(void * jarg1, unsigned short jarg2, int jarg3, unsigned short jarg4, int jarg5) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  uint16 arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->CheckStackConflict(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetCastedSpellInvSlot(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetCastedSpellInvSlot();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetNextHPEvent(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetNextHPEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetNextHPEvent(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNextHPEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendItemAnimation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemData *arg3 = (EQ::ItemData *) 0 ;
  EQ::skills::SkillType arg4 ;
  float arg5 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemData *)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  (arg1)->SendItemAnimation(arg2,(EQ::ItemData const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SendItemAnimation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemData *arg3 = (EQ::ItemData *) 0 ;
  EQ::skills::SkillType arg4 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemData *)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->SendItemAnimation(arg2,(EQ::ItemData const *)arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetNextIncHPEvent(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (int *) &(arg1)->GetNextIncHPEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetNextIncHPEvent(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNextIncHPEvent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_DivineAura(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->DivineAura();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_Sanctuary(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->Sanctuary();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasNPCSpecialAtk(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->HasNPCSpecialAtk((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasSpecialAbilities(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->HasSpecialAbilities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSpecialAbility(void * jarg1, int jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSpecialAbility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetSpecialAbilityParam(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->GetSpecialAbilityParam(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpecialAbility(void * jarg1, int jarg2, int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSpecialAbility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpecialAbilityParam(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetSpecialAbilityParam(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StartSpecialAbilityTimer(void * jarg1, int jarg2, unsigned int jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  uint32 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->StartSpecialAbilityTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_StopSpecialAbilityTimer(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->StopSpecialAbilityTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ClearSpecialAbilities(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ClearSpecialAbilities();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ProcessSpecialAbilities(void * jarg1, const char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->ProcessSpecialAbilities((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsMoved(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsMoved();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetMoved(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetMoved(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_trade_set(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  Trade *arg2 = (Trade *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Trade *)jarg2; 
  if (arg1) (arg1)->trade = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_trade_get(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Trade *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Trade *) ((arg1)->trade);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned int jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->ShieldAbility(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->ShieldAbility(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_2(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->ShieldAbility(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_3(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->ShieldAbility(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_4(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->ShieldAbility(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_5(void * jarg1, unsigned int jarg2, int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->ShieldAbility(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_ShieldAbility__SWIG_6(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->ShieldAbility(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DoShieldDamageOnShielder(void * jarg1, void * jarg2, long long jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  EQ::skills::SkillType arg4 ;
  EQ::skills::SkillType *argp4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->DoShieldDamageOnShielder(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ShieldAbilityFinish(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ShieldAbilityFinish();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ShieldAbilityClearVariables(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ShieldAbilityClearVariables();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetShielderID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetShielderID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetShielderID(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetShielderID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetShieldTargetID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)((Mob const *)arg1)->GetShieldTargetID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetShieldTargetID(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetShieldTargetID(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetShieldTargetMitigation(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetShieldTargetMitigation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetShieldTargetMitigation(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShieldTargetMitigation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetShielderMitigation(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetShielderMitigation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetShielderMitigation(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShielderMitigation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetMaxShielderDistance(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetMaxShielderDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetShielderMaxDistance(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetShielderMaxDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_weaponstance_set(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  WeaponStance_Struct *arg2 = (WeaponStance_Struct *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (WeaponStance_Struct *)jarg2; 
  if (arg1) (arg1)->weaponstance = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_weaponstance_get(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  WeaponStance_Struct *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (WeaponStance_Struct *)& ((arg1)->weaponstance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsWeaponStanceEnabled(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsWeaponStanceEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetWeaponStanceEnabled(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetWeaponStanceEnabled(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetCurrentWayPoint(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  glm::vec4 result;
  
  arg1 = (Mob *)jarg1; 
  result = ((Mob const *)arg1)->GetCurrentWayPoint();
  {
    jresult = new glm::vec4(result);
  }
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_GetCWPP(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)((Mob const *)arg1)->GetCWPP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetCWP(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)((Mob const *)arg1)->GetCWP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetCurrentWP(void * jarg1, int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCurrentWP(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetReverseFactionCon(void * jarg1, void * jarg2) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  FACTION_VALUE result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (arg1)->GetReverseFactionCon(arg2);
  jresult = new FACTION_VALUE(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsUnderwaterOnly(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsUnderwaterOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsTrackable(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->IsTrackable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsFindable(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsFindable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetManaPercent(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetManaPercent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Mob_GetEndurancePercent(void * jarg1) {
  unsigned char jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint8)(arg1)->GetEndurancePercent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsBlockedBuff(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->IsBlockedBuff(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsBlockedPetBuff(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->IsBlockedPetBuff(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetGlobal(void * jarg1, char * jarg2) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->GetGlobal((char const *)arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetGlobal__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5, void * jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  Mob *arg6 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (Mob *)jarg6; 
  (arg1)->SetGlobal((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetGlobal__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SetGlobal((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TarGlobal(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->TarGlobal((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DelGlobal(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DelGlobal((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetEmoteID(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetEmoteID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetEmoteID(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->GetEmoteID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HasSpellEffect(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->HasSpellEffect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetRacePlural(void * jarg1) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetRacePlural();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetClassPlural(void * jarg1) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetClassPlural();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetStats(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->TuneGetStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetACByPctMitigation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->TuneGetACByPctMitigation(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetACByPctMitigation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->TuneGetACByPctMitigation(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetACByPctMitigation__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->TuneGetACByPctMitigation(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetACByPctMitigation__SWIG_3(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->TuneGetACByPctMitigation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetACByPctMitigation__SWIG_4(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->TuneGetACByPctMitigation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetATKByPctMitigation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->TuneGetATKByPctMitigation(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetATKByPctMitigation__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->TuneGetATKByPctMitigation(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetATKByPctMitigation__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->TuneGetATKByPctMitigation(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetATKByPctMitigation__SWIG_3(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->TuneGetATKByPctMitigation(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetATKByPctMitigation__SWIG_4(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->TuneGetATKByPctMitigation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetAvoidanceByHitChance(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->TuneGetAvoidanceByHitChance(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneGetAccuracyByHitChance(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->TuneGetAccuracyByHitChance(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMeanDamage__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int64)(arg1)->TuneClientGetMeanDamage(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMeanDamage__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int64)(arg1)->TuneClientGetMeanDamage(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMeanDamage__SWIG_2(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->TuneClientGetMeanDamage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMeanDamage__SWIG_3(void * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TuneClientGetMeanDamage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMeanDamage__SWIG_4(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->TuneClientGetMeanDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMaxDamage(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->TuneClientGetMaxDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientGetMinDamage(void * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TuneClientGetMinDamage(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetACMitigationPct(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (float)(arg1)->TuneGetACMitigationPct(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetOffense__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->TuneGetOffense(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetOffense__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int64)(arg1)->TuneGetOffense(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetAccuracy__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int64)(arg1)->TuneGetAccuracy(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetAccuracy__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->TuneGetAccuracy(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetAccuracy__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int64)(arg1)->TuneGetAccuracy(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetAvoidance__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int64)(arg1)->TuneGetAvoidance(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetAvoidance__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->TuneGetAvoidance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetAvoidance__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (int64)(arg1)->TuneGetAvoidance(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetHitChance__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6, int jarg7) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (float)(arg1)->TuneGetHitChance(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetHitChance__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, int jarg6) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (float)(arg1)->TuneGetHitChance(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetHitChance__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  int arg5 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (float)(arg1)->TuneGetHitChance(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetHitChance__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (float)(arg1)->TuneGetHitChance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetHitChance__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  result = (float)(arg1)->TuneGetHitChance(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_TuneGetAvoidMeleeChance(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (float)(arg1)->TuneGetAvoidMeleeChance(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneCalcEvasionBonus(void * jarg1, int jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TuneCalcEvasionBonus(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12, int jarg13, int jarg14, int jarg15) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12, int jarg13, int jarg14) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12, int jarg13) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_10(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_11(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_12(void * jarg1, void * jarg2, unsigned int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int64)(arg1)->TuneNPCAttack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneNPCAttack__SWIG_13(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->TuneNPCAttack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12, int jarg13, int jarg14, int jarg15) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12, int jarg13, int jarg14) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12, int jarg13) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int arg13 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11, int jarg12) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int arg12 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  arg12 = (int)jarg12; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10, unsigned int jarg11) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  bool arg11 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = jarg11 ? true : false; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, unsigned int jarg10) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  bool arg10 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_10(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int arg5 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_11(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_12(void * jarg1, void * jarg2, unsigned int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int64)(arg1)->TuneClientAttack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneClientAttack__SWIG_13(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->TuneClientAttack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8, int jarg9, int jarg10, int jarg11, int jarg12) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8, int jarg9, int jarg10, int jarg11) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (int)jarg11; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8, int jarg9) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, int jarg8) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  int arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_8(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  (arg1)->TuneDoAttack(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneDoAttack__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->TuneDoAttack(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneMeleeMitigation(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->TuneMeleeMitigation(arg2,*arg3,arg4,arg5);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tuneoffense__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  int arg4 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->Tuneoffense(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tuneoffense__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->Tuneoffense(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tuneoffense__SWIG_2(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int64)(arg1)->Tuneoffense(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneACSum__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->TuneACSum(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneACSum__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TuneACSum(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneACSum__SWIG_2(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int64)(arg1)->TuneACSum(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneACSum__SWIG_3(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->TuneACSum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetTotalToHit__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int64)(arg1)->TuneGetTotalToHit(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetTotalToHit__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  int arg4 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->TuneGetTotalToHit(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetTotalToHit__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TuneGetTotalToHit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tunecompute_tohit__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  int arg4 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int64)(arg1)->Tunecompute_tohit(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tunecompute_tohit__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  int arg3 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->Tunecompute_tohit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tunecompute_tohit__SWIG_2(void * jarg1, void * jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int64)(arg1)->Tunecompute_tohit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetTotalDefense__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->TuneGetTotalDefense(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetTotalDefense__SWIG_1(void * jarg1, int jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)(arg1)->TuneGetTotalDefense(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_TuneGetTotalDefense__SWIG_2(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->TuneGetTotalDefense();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tunecompute_defense__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int arg3 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int64)(arg1)->Tunecompute_defense(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tunecompute_defense__SWIG_1(void * jarg1, int jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64)(arg1)->Tunecompute_defense(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_Tunecompute_defense__SWIG_2(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)(arg1)->Tunecompute_defense();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TuneCheckHitChance__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->TuneCheckHitChance(arg2,*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TuneCheckHitChance__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->TuneCheckHitChance(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_TuneCheckHitChance__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->TuneCheckHitChance(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_TuneAttackAnimation__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::skills::SkillType arg4 ;
  EQ::skills::SkillType *argp4 ;
  EQ::skills::SkillType result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  argp4 = (EQ::skills::SkillType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->TuneAttackAnimation(arg2,(EQ::ItemInstance const *)arg3,arg4);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_TuneAttackAnimation__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  EQ::skills::SkillType result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  result = (arg1)->TuneAttackAnimation(arg2,(EQ::ItemInstance const *)arg3);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneCommonOutgoingHitSuccess__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  ExtraAttackOptions *arg4 = (ExtraAttackOptions *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  arg4 = (ExtraAttackOptions *)jarg4; 
  (arg1)->TuneCommonOutgoingHitSuccess(arg2,*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_TuneCommonOutgoingHitSuccess__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  DamageHitInfo *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (DamageHitInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DamageHitInfo & is null", 0);
    return ;
  } 
  (arg1)->TuneCommonOutgoingHitSuccess(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetAA__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 *arg3 = (uint32 *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32 *)jarg3; 
  result = (uint32)((Mob const *)arg1)->GetAA(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetAA__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetAA(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetAAByAAID__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 *arg3 = (uint32 *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32 *)jarg3; 
  result = (uint32)((Mob const *)arg1)->GetAAByAAID(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetAAByAAID__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)((Mob const *)arg1)->GetAAByAAID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SetAA__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SetAA(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_SetAA__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->SetAA(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ClearAAs(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ClearAAs();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanUseAlternateAdvancementRank(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  AA::Rank *arg2 = (AA::Rank *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (AA::Rank *)jarg2; 
  result = (bool)(arg1)->CanUseAlternateAdvancementRank(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanPurchaseAlternateAdvancementRank(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  AA::Rank *arg2 = (AA::Rank *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (AA::Rank *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->CanPurchaseAlternateAdvancementRank(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_GetAlternateAdvancementCooldownReduction(void * jarg1, void * jarg2) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  AA::Rank *arg2 = (AA::Rank *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (AA::Rank *)jarg2; 
  result = (int)(arg1)->GetAlternateAdvancementCooldownReduction(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ExpendAlternateAdvancementCharge(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ExpendAlternateAdvancementCharge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcAABonuses(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses *arg2 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (StatBonuses *)jarg2; 
  (arg1)->CalcAABonuses(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_CalcAAFocus(void * jarg1, int jarg2, void * jarg3, unsigned short jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  focusType arg2 ;
  AA::Rank *arg3 = 0 ;
  uint16 arg4 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (focusType)jarg2; 
  arg3 = (AA::Rank *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AA::Rank const & is null", 0);
    return 0;
  } 
  arg4 = (uint16)jarg4; 
  result = (int64)(arg1)->CalcAAFocus(arg2,(AA::Rank const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ApplyAABonuses(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  AA::Rank *arg2 = 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (AA::Rank *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AA::Rank const & is null", 0);
    return ;
  } 
  arg3 = (StatBonuses *)jarg3; 
  (arg1)->ApplyAABonuses((AA::Rank const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CheckAATimer(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->CheckAATimer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcItemBonuses(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses *arg2 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (StatBonuses *)jarg2; 
  (arg1)->CalcItemBonuses(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddItemBonuses__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6, unsigned int jarg7) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  bool arg4 ;
  bool arg5 ;
  int arg6 ;
  bool arg7 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->AddItemBonuses((EQ::ItemInstance const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddItemBonuses__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  bool arg4 ;
  bool arg5 ;
  int arg6 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (int)jarg6; 
  (arg1)->AddItemBonuses((EQ::ItemInstance const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddItemBonuses__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddItemBonuses((EQ::ItemInstance const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddItemBonuses__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddItemBonuses((EQ::ItemInstance const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddItemBonuses__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  (arg1)->AddItemBonuses((EQ::ItemInstance const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AdditiveWornBonuses__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  bool arg4 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AdditiveWornBonuses((EQ::ItemInstance const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AdditiveWornBonuses__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  StatBonuses *arg3 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (StatBonuses *)jarg3; 
  (arg1)->AdditiveWornBonuses((EQ::ItemInstance const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_CalcRecommendedLevelBonus(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->CalcRecommendedLevelBonus(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_NPCAssistCap(void * jarg1) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  result = (int)(arg1)->NPCAssistCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_AddAssistCap(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->AddAssistCap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DelAssistCap(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->DelAssistCap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_ResetAssistCap(void * jarg1) {
  Mob *arg1 = (Mob *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  (arg1)->ResetAssistCap();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetWeaponDamage__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemData *arg3 = (EQ::ItemData *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemData *)jarg3; 
  result = (int64)(arg1)->GetWeaponDamage(arg2,(EQ::ItemData const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetWeaponDamage__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  int64 *arg4 = (int64 *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  arg4 = (int64 *)jarg4; 
  result = (int64)(arg1)->GetWeaponDamage(arg2,(EQ::ItemInstance const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetWeaponDamage__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  result = (int64)(arg1)->GetWeaponDamage(arg2,(EQ::ItemInstance const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_DoDamageCaps(void * jarg1, long long jarg2) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 arg2 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64)(arg1)->DoDamageCaps(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetHPRegen(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetHPRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetHPRegenPerSecond(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetHPRegenPerSecond();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetManaRegen(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetManaRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Mob_GetEnduranceRegen(void * jarg1) {
  long long jresult ;
  Mob *arg1 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (Mob *)jarg1; 
  result = (int64)((Mob const *)arg1)->GetEnduranceRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_CanOpenDoors(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->CanOpenDoors();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetCanOpenDoors(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCanOpenDoors(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetFeigned(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFeigned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetFeigned(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetFeigned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DeleteBucket(void * jarg1, const char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->DeleteBucket(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetBucket(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetBucket(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetBucketExpires(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetBucketExpires(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Mob_GetBucketRemaining(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetBucketRemaining(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBucket__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, const char * jarg4) {
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SetBucket(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetBucket__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SetBucket(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetMobTypeIdentifier(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->GetMobTypeIdentifier();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_CheckHeroicBonusesDataBuckets(void * jarg1, const char * jarg2) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (float)(arg1)->CheckHeroicBonusesDataBuckets(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mob_DispatchZoneControllerEvent(void * jarg1, int jarg2, void * jarg3, const char * jarg4, unsigned int jarg5, void * jarg6) {
  int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  QuestEventID arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  std::string *arg4 = 0 ;
  uint32 arg5 ;
  std::vector< std::any > *arg6 = (std::vector< std::any > *) 0 ;
  int result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (QuestEventID)jarg2; 
  arg3 = (Mob *)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (uint32)jarg5; 
  arg6 = (std::vector< std::any > *)jarg6; 
  result = (int)(arg1)->DispatchZoneControllerEvent(arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_IsHealRotationTarget(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->IsHealRotationTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_JoinHealRotationTargetPool(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::shared_ptr< HealRotation > *arg2 = (std::shared_ptr< HealRotation > *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (std::shared_ptr< HealRotation > *)jarg2; 
  result = (bool)(arg1)->JoinHealRotationTargetPool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_LeaveHealRotationTargetPool(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)(arg1)->LeaveHealRotationTargetPool();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HealRotationHealCount(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->HealRotationHealCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_HealRotationExtendedHealCount(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Mob *)jarg1; 
  result = (uint32)(arg1)->HealRotationExtendedHealCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_HealRotationHealFrequency(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)(arg1)->HealRotationHealFrequency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Mob_HealRotationExtendedHealFrequency(void * jarg1) {
  float jresult ;
  Mob *arg1 = (Mob *) 0 ;
  float result;
  
  arg1 = (Mob *)jarg1; 
  result = (float)(arg1)->HealRotationExtendedHealFrequency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_TargetOfHealRotation(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  std::shared_ptr< HealRotation > *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (std::shared_ptr< HealRotation > *)((Mob const *)arg1)->TargetOfHealRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetManualFollow(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetManualFollow(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetManualFollow(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetManualFollow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_DrawDebugCoordinateNode(void * jarg1, const char * jarg2, void * jarg3) {
  Mob *arg1 = (Mob *) 0 ;
  std::string arg2 ;
  glm::vec4 arg3 ;
  
  arg1 = (Mob *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  
  arg3 = *reinterpret_cast<glm::vec4*>(jarg3);
  
  (arg1)->DrawDebugCoordinateNode(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_CalcHeroicBonuses(void * jarg1, void * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  StatBonuses *arg2 = (StatBonuses *) 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (StatBonuses *)jarg2; 
  (arg1)->CalcHeroicBonuses(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mob_GetScopedBucketKeys(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  DataBucketKey result;
  
  arg1 = (Mob *)jarg1; 
  result = (arg1)->GetScopedBucketKeys();
  jresult = new DataBucketKey(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_GetWasSpawnedInWater(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)((Mob const *)arg1)->GetWasSpawnedInWater();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_SetSpawnedInWater(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSpawnedInWater(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mob_turning_set(void * jarg1, unsigned int jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  bool arg2 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->turning = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Mob_turning_get(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool) ((arg1)->turning);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAXMERCS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TANK_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEALER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MELEEDPS_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASTERDPS_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NO_MERC_ID_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MERC_STATE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MERC_STATE_SUSPENDED_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NOT_SUSPENDED_TIME_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercAISpellRange_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MercAISpellRange;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpell_spellid_set(void * jarg1, unsigned short jarg2) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercSpell *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercSpell_spellid_get(void * jarg1) {
  unsigned short jresult ;
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint16 result;
  
  arg1 = (MercSpell *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpell_type_set(void * jarg1, unsigned int jarg2) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercSpell *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercSpell_type_get(void * jarg1) {
  unsigned int jresult ;
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint32 result;
  
  arg1 = (MercSpell *)jarg1; 
  result = (uint32) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpell_stance_set(void * jarg1, short jarg2) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  int16 arg2 ;
  
  arg1 = (MercSpell *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->stance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MercSpell_stance_get(void * jarg1) {
  short jresult ;
  MercSpell *arg1 = (MercSpell *) 0 ;
  int16 result;
  
  arg1 = (MercSpell *)jarg1; 
  result = (int16) ((arg1)->stance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpell_slot_set(void * jarg1, short jarg2) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  int16 arg2 ;
  
  arg1 = (MercSpell *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->slot = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MercSpell_slot_get(void * jarg1) {
  short jresult ;
  MercSpell *arg1 = (MercSpell *) 0 ;
  int16 result;
  
  arg1 = (MercSpell *)jarg1; 
  result = (int16) ((arg1)->slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpell_proc_chance_set(void * jarg1, unsigned short jarg2) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercSpell *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->proc_chance = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercSpell_proc_chance_get(void * jarg1) {
  unsigned short jresult ;
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint16 result;
  
  arg1 = (MercSpell *)jarg1; 
  result = (uint16) ((arg1)->proc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpell_time_cancast_set(void * jarg1, unsigned int jarg2) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercSpell *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->time_cancast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercSpell_time_cancast_get(void * jarg1) {
  unsigned int jresult ;
  MercSpell *arg1 = (MercSpell *) 0 ;
  uint32 result;
  
  arg1 = (MercSpell *)jarg1; 
  result = (uint32) ((arg1)->time_cancast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercSpell() {
  void * jresult ;
  MercSpell *result = 0 ;
  
  result = (MercSpell *)new MercSpell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercSpell(void * jarg1) {
  MercSpell *arg1 = (MercSpell *) 0 ;
  
  arg1 = (MercSpell *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTimer_timerid_set(void * jarg1, unsigned short jarg2) {
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercTimer *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->timerid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercTimer_timerid_get(void * jarg1) {
  unsigned short jresult ;
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint16 result;
  
  arg1 = (MercTimer *)jarg1; 
  result = (uint16) ((arg1)->timerid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTimer_timertype_set(void * jarg1, unsigned char jarg2) {
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercTimer *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->timertype = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercTimer_timertype_get(void * jarg1) {
  unsigned char jresult ;
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint8 result;
  
  arg1 = (MercTimer *)jarg1; 
  result = (uint8) ((arg1)->timertype);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTimer_spellid_set(void * jarg1, unsigned short jarg2) {
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercTimer *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercTimer_spellid_get(void * jarg1) {
  unsigned short jresult ;
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint16 result;
  
  arg1 = (MercTimer *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTimer_time_cancast_set(void * jarg1, unsigned int jarg2) {
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercTimer *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->time_cancast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercTimer_time_cancast_get(void * jarg1) {
  unsigned int jresult ;
  MercTimer *arg1 = (MercTimer *) 0 ;
  uint32 result;
  
  arg1 = (MercTimer *)jarg1; 
  result = (uint32) ((arg1)->time_cancast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercTimer() {
  void * jresult ;
  MercTimer *result = 0 ;
  
  result = (MercTimer *)new MercTimer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercTimer(void * jarg1) {
  MercTimer *arg1 = (MercTimer *) 0 ;
  
  arg1 = (MercTimer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Merc(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  NPCType *arg1 = (NPCType *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Merc *result = 0 ;
  
  arg1 = (NPCType *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Merc *)new Merc((NPCType const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Merc(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned char jarg6) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  uint8 arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (uint8)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Attack__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ExtraAttackOptions *arg7 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ExtraAttackOptions *)jarg7; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Attack__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Attack__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Attack__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Attack__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Attack__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_HasRaid(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_HasGroup(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetRaid(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Merc *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetGroup(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Merc *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_AI_Start__SWIG_0(void * jarg1, int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  int32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->AI_Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_AI_Start__SWIG_1(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->AI_Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_AI_Stop(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->AI_Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_AI_Process(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->AI_Process();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_AICastSpell(void * jarg1, signed char jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int8 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int8)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->AICastSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_AIDoSpellCast__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int32 arg4 ;
  uint32 *arg5 = (uint32 *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (uint32 *)jarg5; 
  result = (bool)(arg1)->AIDoSpellCast(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_AIDoSpellCast__SWIG_1(void * jarg1, unsigned short jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int32 arg4 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int32)jarg4; 
  result = (bool)(arg1)->AIDoSpellCast(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_AI_EngagedCastCheck(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->AI_EngagedCastCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_AI_IdleCastCheck(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->AI_IdleCastCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Process(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_AddMercToGroup(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Group *arg2 = (Group *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Group *)jarg2; 
  result = (bool)Merc::AddMercToGroup(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_RemoveMercFromGroup(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Group *arg2 = (Group *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Group *)jarg2; 
  result = (bool)Merc::RemoveMercFromGroup(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_ProcessClientZoneChange(void * jarg1, void * jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ProcessClientZoneChange(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_MercGroupSay(void * jarg1, char * jarg2) {
  Mob *arg1 = (Mob *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (Mob *)jarg1; 
  arg2 = (char *)jarg2; 
  Merc::MercGroupSay(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetGroupMemberCorpse(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Corpse *result = 0 ;
  
  arg1 = (Merc *)jarg1; 
  result = (Corpse *)(arg1)->GetGroupMemberCorpse();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_Merc_GetChanceToCastBySpellType(void * jarg1, unsigned int jarg2) {
  signed char jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  int8 result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int8)(arg1)->GetChanceToCastBySpellType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetSpellRecastTimer(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned int jarg4) {
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SetSpellRecastTimer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetDisciplineRecastTimer(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned int jarg4) {
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SetDisciplineRecastTimer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetSpellTimeCanCast(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetSpellTimeCanCast(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetSpellRecastTimer(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int32)Merc::GetSpellRecastTimer(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CheckSpellRecastTimers(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)Merc::CheckSpellRecastTimers(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDisciplineRecastTimer(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int32)Merc::GetDisciplineRecastTimer(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CheckDisciplineRecastTimers(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)Merc::CheckDisciplineRecastTimers(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDisciplineRemainingTime(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int32)Merc::GetDisciplineRemainingTime(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetMercSpellsForSpellEffect(void * jarg1, int jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::list< MercSpell > > result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int)jarg2; 
  result = Merc::GetMercSpellsForSpellEffect(arg1,arg2);
  jresult = new std::list< MercSpell >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetMercSpellsForSpellEffectAndTargetType(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int arg2 ;
  SpellTargetType arg3 ;
  SpellTargetType *argp3 ;
  SwigValueWrapper< std::list< MercSpell > > result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (SpellTargetType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null SpellTargetType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = Merc::GetMercSpellsForSpellEffectAndTargetType(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = new std::list< MercSpell >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetMercSpellsBySpellType(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::list< MercSpell > > result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = Merc::GetMercSpellsBySpellType(arg1,arg2);
  jresult = new std::list< MercSpell >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetFirstMercSpellBySpellType(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = Merc::GetFirstMercSpellBySpellType(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetFirstMercSpellForSingleTargetHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetFirstMercSpellForSingleTargetHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetMercSpellBySpellID(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint16 arg2 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = Merc::GetMercSpellBySpellID(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForVeryFastHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForVeryFastHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForFastHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForFastHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForHealOverTime(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForHealOverTime(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForPercentageHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForPercentageHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForRegularSingleTargetHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForRegularSingleTargetHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForGroupHealOverTime(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForGroupHealOverTime(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForGroupCompleteHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForGroupCompleteHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForGroupHeal(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForGroupHeal(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForAETaunt(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForAETaunt(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForTaunt(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForTaunt(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForHate(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForHate(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForCure(void * jarg1, void * jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = Merc::GetBestMercSpellForCure(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForStun(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForStun(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForAENuke(void * jarg1, void * jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = Merc::GetBestMercSpellForAENuke(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForTargetedAENuke(void * jarg1, void * jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = Merc::GetBestMercSpellForTargetedAENuke(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForPBAENuke(void * jarg1, void * jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = Merc::GetBestMercSpellForPBAENuke(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForAERainNuke(void * jarg1, void * jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = Merc::GetBestMercSpellForAERainNuke(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForNuke(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  result = Merc::GetBestMercSpellForNuke(arg1);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetBestMercSpellForNukeByTargetResists(void * jarg1, void * jarg2) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  MercSpell result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = Merc::GetBestMercSpellForNukeByTargetResists(arg1,arg2);
  jresult = new MercSpell(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CheckAENuke(void * jarg1, void * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  uint8 *arg4 = 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint8 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint8 & is null", 0);
    return 0;
  } 
  result = (bool)Merc::CheckAENuke(arg1,arg2,arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetNeedsCured(void * jarg1) {
  unsigned int jresult ;
  Mob *arg1 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Mob *)jarg1; 
  result = (bool)Merc::GetNeedsCured(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_HasOrMayGetAggro(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->HasOrMayGetAggro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_UseDiscipline(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  result = (bool)(arg1)->UseDiscipline(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsMerc(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)((Merc const *)arg1)->IsMerc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsOfClientBotMerc(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)((Merc const *)arg1)->IsOfClientBotMerc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_FillSpawnStruct(void * jarg1, void * jarg2, void * jarg3) {
  Merc *arg1 = (Merc *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->FillSpawnStruct(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_LoadMercenary__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  MercTemplate *arg2 = (MercTemplate *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  Merc *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (MercTemplate *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (Merc *)Merc::LoadMercenary(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_LoadMercenary__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  MercTemplate *arg2 = (MercTemplate *) 0 ;
  uint32 arg3 ;
  Merc *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (MercTemplate *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (Merc *)Merc::LoadMercenary(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_UpdateMercInfo(void * jarg1, void * jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->UpdateMercInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_UpdateMercStats__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Merc *arg1 = (Merc *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UpdateMercStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_UpdateMercStats__SWIG_1(void * jarg1, void * jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->UpdateMercStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_UpdateMercAppearance(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->UpdateMercAppearance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_UpdateEquipmentLight(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->UpdateEquipmentLight();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_AddItem(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Merc *arg1 = (Merc *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddItem(arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Merc_GetRandomName() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)Merc::GetRandomName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Spawn(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->Spawn(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Suspend(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->Suspend();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Unsuspend(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Unsuspend(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_MercJoinClientGroup(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->MercJoinClientGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Zone(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->Zone();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Depop(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_Save(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetDepop(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->GetDepop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsDead(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->IsDead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsMedding(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->IsMedding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsSuspended(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->IsSuspended();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CalcPurchaseCost__SWIG_0(unsigned int jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint32 result;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint32)Merc::CalcPurchaseCost(arg1,arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CalcPurchaseCost__SWIG_1(unsigned int jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)Merc::CalcPurchaseCost(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CalcUpkeepCost__SWIG_0(unsigned int jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint32 result;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint32)Merc::CalcUpkeepCost(arg1,arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CalcUpkeepCost__SWIG_1(unsigned int jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)Merc::CalcUpkeepCost(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetOwner(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Merc *)jarg1; 
  result = (Mob *)(arg1)->GetOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetMercenaryOwner(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Merc *)jarg1; 
  result = (Client *)(arg1)->GetMercenaryOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetOwnerOrSelf(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Merc *)jarg1; 
  result = (Mob *)(arg1)->GetOwnerOrSelf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetMercenaryID(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetMercenaryID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetMercenaryCharacterID(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetMercenaryCharacterID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetMercenaryTemplateID(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetMercenaryTemplateID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetMercenaryType(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetMercenaryType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetMercenarySubType(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetMercenarySubType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Merc_GetProficiencyID(void * jarg1) {
  unsigned char jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint8 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint8)(arg1)->GetProficiencyID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Merc_GetTierID(void * jarg1) {
  unsigned char jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint8 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint8)(arg1)->GetTierID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetCostFormula(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetCostFormula();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_GetMercNameType(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint32)(arg1)->GetMercNameType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Merc_GetStance(void * jarg1) {
  void * jresult ;
  Merc *arg1 = (Merc *) 0 ;
  EQ::constants::StanceType result;
  
  arg1 = (Merc *)jarg1; 
  result = (arg1)->GetStance();
  jresult = new EQ::constants::StanceType(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHatedCount(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int result;
  
  arg1 = (Merc *)jarg1; 
  result = (int)(arg1)->GetHatedCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Merc_GetClientVersion(void * jarg1) {
  unsigned char jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint8 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint8)((Merc const *)arg1)->GetClientVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetTarget(void * jarg1, void * jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetTarget(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_HasSkill(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((Merc const *)arg1)->HasSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CanHaveSkill(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((Merc const *)arg1)->CanHaveSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Merc_MaxSkill__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, unsigned short jarg4) {
  unsigned short jresult ;
  Merc *arg1 = (Merc *) 0 ;
  EQ::skills::SkillType arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Merc *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (uint16)((Merc const *)arg1)->MaxSkill(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Merc_MaxSkill__SWIG_1(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  Merc *arg1 = (Merc *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Merc *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16)((Merc const *)arg1)->MaxSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_DoClassAttacks(void * jarg1, void * jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoClassAttacks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_CheckHateList(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->CheckHateList();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CheckTaunt(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->CheckTaunt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CheckAETaunt(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->CheckAETaunt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_CheckConfidence(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->CheckConfidence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_TryHide(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->TryHide();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_ScaleStats__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Merc *arg1 = (Merc *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ScaleStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_ScaleStats__SWIG_1(void * jarg1, int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  int arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ScaleStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_CalcBonuses(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->CalcBonuses();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Merc_GetEndurance(void * jarg1) {
  long long jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int64 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int64)((Merc const *)arg1)->GetEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Merc_GetEndurancePercent(void * jarg1) {
  unsigned char jresult ;
  Merc *arg1 = (Merc *) 0 ;
  uint8 result;
  
  arg1 = (Merc *)jarg1; 
  result = (uint8)(arg1)->GetEndurancePercent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetATK(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetATK();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetATKBonus(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetATKBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetSTR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetSTA(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDEX(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetAGI(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetINT(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetWIS(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetCHA(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetMR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetFR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetPR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetCR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetCorrup(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicSTR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicSTA(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicDEX(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicAGI(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicINT(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicWIS(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicCHA(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicMR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicFR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicDR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicPR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicCR(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHeroicCorrup(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHeroicCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetShielding(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetShielding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetSpellShield(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetSpellShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDoTShield(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetDoTShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetStunResist(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetStunResist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetStrikeThrough(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetStrikeThrough();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetAvoidance(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetAvoidance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetAccuracy(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetAccuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetCombatEffects(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetCombatEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDS(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetDS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetHealAmt(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetHealAmt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetSpellDmg(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetSpellDmg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetClair(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetClair();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDSMit(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetDSMit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetSingMod(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetSingMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetBrassMod(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetBrassMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetPercMod(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetPercMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetStringMod(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetStringMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetWindMod(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetWindMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Merc_GetDelayDeath(void * jarg1) {
  int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  int32 result;
  
  arg1 = (Merc *)jarg1; 
  result = (int32)((Merc const *)arg1)->GetDelayDeath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercData(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercID(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercCharacterID(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercCharacterID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercTemplateID(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercTemplateID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercType(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercSubType(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercSubType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetProficiencyID(void * jarg1, unsigned char jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetProficiencyID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetTierID(void * jarg1, unsigned char jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetTierID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetCostFormula(void * jarg1, unsigned char jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetCostFormula(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetMercNameType(void * jarg1, unsigned char jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetMercNameType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetClientVersion(void * jarg1, unsigned char jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetClientVersion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetSuspended(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  bool arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSuspended(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetStance(void * jarg1, void * jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  EQ::constants::StanceType arg2 ;
  EQ::constants::StanceType *argp2 ;
  
  arg1 = (Merc *)jarg1; 
  argp2 = (EQ::constants::StanceType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::constants::StanceType", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetStance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_SetHatedCount(void * jarg1, int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  int arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHatedCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Sit(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->Sit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_Stand(void * jarg1) {
  Merc *arg1 = (Merc *) 0 ;
  
  arg1 = (Merc *)jarg1; 
  (arg1)->Stand();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsSitting(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)((Merc const *)arg1)->IsSitting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsStanding(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->IsStanding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsMercCaster(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->IsMercCaster();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_IsMercCasterCombatRange(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsMercCasterCombatRange(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Merc_GetMaxMeleeRangeToTarget(void * jarg1, void * jarg2) {
  float jresult ;
  Merc *arg1 = (Merc *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float result;
  
  arg1 = (Merc *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (float)(arg1)->GetMaxMeleeRangeToTarget(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Merc_MercMeditate(void * jarg1, unsigned int jarg2) {
  Merc *arg1 = (Merc *) 0 ;
  bool arg2 ;
  
  arg1 = (Merc *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->MercMeditate(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Merc_FindTarget(void * jarg1) {
  unsigned int jresult ;
  Merc *arg1 = (Merc *) 0 ;
  bool result;
  
  arg1 = (Merc *)jarg1; 
  result = (bool)(arg1)->FindTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_min_x_set(void * jarg1, float jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPCProximity_min_x_get(void * jarg1) {
  float jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (float) ((arg1)->min_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_max_x_set(void * jarg1, float jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPCProximity_max_x_get(void * jarg1) {
  float jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (float) ((arg1)->max_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_min_y_set(void * jarg1, float jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPCProximity_min_y_get(void * jarg1) {
  float jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (float) ((arg1)->min_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_max_y_set(void * jarg1, float jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPCProximity_max_y_get(void * jarg1) {
  float jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (float) ((arg1)->max_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_min_z_set(void * jarg1, float jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPCProximity_min_z_get(void * jarg1) {
  float jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (float) ((arg1)->min_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_max_z_set(void * jarg1, float jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPCProximity_max_z_get(void * jarg1) {
  float jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  float result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (float) ((arg1)->max_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_say_set(void * jarg1, unsigned int jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  bool arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->say = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPCProximity_say_get(void * jarg1) {
  unsigned int jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  bool result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (bool) ((arg1)->say);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPCProximity_proximity_set_set(void * jarg1, unsigned int jarg2) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  bool arg2 ;
  
  arg1 = (NPCProximity *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->proximity_set = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPCProximity_proximity_set_get(void * jarg1) {
  unsigned int jresult ;
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  bool result;
  
  arg1 = (NPCProximity *)jarg1; 
  result = (bool) ((arg1)->proximity_set);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NPCProximity() {
  void * jresult ;
  NPCProximity *result = 0 ;
  
  result = (NPCProximity *)new NPCProximity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NPCProximity(void * jarg1) {
  NPCProximity *arg1 = (NPCProximity *) 0 ;
  
  arg1 = (NPCProximity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_type_set(void * jarg1, unsigned int jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpells_Struct_type_get(void * jarg1) {
  unsigned int jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (uint32) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_spellid_set(void * jarg1, unsigned short jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AISpells_Struct_spellid_get(void * jarg1) {
  unsigned short jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_manacost_set(void * jarg1, short jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->manacost = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AISpells_Struct_manacost_get(void * jarg1) {
  short jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int16 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (int16) ((arg1)->manacost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_time_cancast_set(void * jarg1, unsigned int jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->time_cancast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpells_Struct_time_cancast_get(void * jarg1) {
  unsigned int jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (uint32) ((arg1)->time_cancast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_recast_delay_set(void * jarg1, int jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->recast_delay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AISpells_Struct_recast_delay_get(void * jarg1) {
  int jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int32 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (int32) ((arg1)->recast_delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_priority_set(void * jarg1, short jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AISpells_Struct_priority_get(void * jarg1) {
  short jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int16 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (int16) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_resist_adjust_set(void * jarg1, short jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->resist_adjust = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_AISpells_Struct_resist_adjust_get(void * jarg1) {
  short jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int16 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (int16) ((arg1)->resist_adjust);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_min_hp_set(void * jarg1, signed char jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int8 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->min_hp = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_AISpells_Struct_min_hp_get(void * jarg1) {
  signed char jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int8 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (int8) ((arg1)->min_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpells_Struct_max_hp_set(void * jarg1, signed char jarg2) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int8 arg2 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->max_hp = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_AISpells_Struct_max_hp_get(void * jarg1) {
  signed char jresult ;
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  int8 result;
  
  arg1 = (AISpells_Struct *)jarg1; 
  result = (int8) ((arg1)->max_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AISpells_Struct() {
  void * jresult ;
  AISpells_Struct *result = 0 ;
  
  result = (AISpells_Struct *)new AISpells_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AISpells_Struct(void * jarg1) {
  AISpells_Struct *arg1 = (AISpells_Struct *) 0 ;
  
  arg1 = (AISpells_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsEffects_Struct_spelleffectid_set(void * jarg1, unsigned short jarg2) {
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spelleffectid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AISpellsEffects_Struct_spelleffectid_get(void * jarg1) {
  unsigned short jresult ;
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  uint16 result;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  result = (uint16) ((arg1)->spelleffectid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsEffects_Struct_base_value_set(void * jarg1, int jarg2) {
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->base_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AISpellsEffects_Struct_base_value_get(void * jarg1) {
  int jresult ;
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  int32 result;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  result = (int32) ((arg1)->base_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsEffects_Struct_limit_set(void * jarg1, int jarg2) {
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->limit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AISpellsEffects_Struct_limit_get(void * jarg1) {
  int jresult ;
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  int32 result;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  result = (int32) ((arg1)->limit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsEffects_Struct_max_value_set(void * jarg1, int jarg2) {
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->max_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AISpellsEffects_Struct_max_value_get(void * jarg1) {
  int jresult ;
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  int32 result;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  result = (int32) ((arg1)->max_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AISpellsEffects_Struct() {
  void * jresult ;
  AISpellsEffects_Struct *result = 0 ;
  
  result = (AISpellsEffects_Struct *)new AISpellsEffects_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AISpellsEffects_Struct(void * jarg1) {
  AISpellsEffects_Struct *arg1 = (AISpellsEffects_Struct *) 0 ;
  
  arg1 = (AISpellsEffects_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_fail_recast_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->fail_recast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_fail_recast_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->fail_recast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->engaged_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->engaged_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->engaged_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->engaged_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_beneficial_self_chance_set(void * jarg1, unsigned char jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_beneficial_self_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_beneficial_self_chance_get(void * jarg1) {
  unsigned char jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_beneficial_self_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_beneficial_other_chance_set(void * jarg1, unsigned char jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_beneficial_other_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_beneficial_other_chance_get(void * jarg1) {
  unsigned char jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_beneficial_other_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_detrimental_chance_set(void * jarg1, unsigned char jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_detrimental_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AISpellsVar_Struct_engaged_detrimental_chance_get(void * jarg1) {
  unsigned char jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_detrimental_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_pursue_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->pursue_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_pursue_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->pursue_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_pursue_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->pursue_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_pursue_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->pursue_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_pursue_detrimental_chance_set(void * jarg1, unsigned char jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->pursue_detrimental_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AISpellsVar_Struct_pursue_detrimental_chance_get(void * jarg1) {
  unsigned char jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint8) ((arg1)->pursue_detrimental_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_idle_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->idle_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_idle_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->idle_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_idle_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->idle_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AISpellsVar_Struct_idle_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint32 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint32) ((arg1)->idle_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AISpellsVar_Struct_idle_beneficial_chance_set(void * jarg1, unsigned char jarg2) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->idle_beneficial_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_AISpellsVar_Struct_idle_beneficial_chance_get(void * jarg1) {
  unsigned char jresult ;
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  uint8 result;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  result = (uint8) ((arg1)->idle_beneficial_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AISpellsVar_Struct() {
  void * jresult ;
  AISpellsVar_Struct *result = 0 ;
  
  result = (AISpellsVar_Struct *)new AISpellsVar_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AISpellsVar_Struct(void * jarg1) {
  AISpellsVar_Struct *arg1 = (AISpellsVar_Struct *) 0 ;
  
  arg1 = (AISpellsVar_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_max_x_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_max_x_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->max_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_max_y_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_max_y_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->max_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_min_x_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_min_x_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->min_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_min_y_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_min_y_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->min_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_distance_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_distance_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_dest_x_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dest_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_dest_x_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->dest_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_dest_y_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dest_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_dest_y_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->dest_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_dest_z_set(void * jarg1, float jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  float arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dest_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Roambox_dest_z_get(void * jarg1) {
  float jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  float result;
  
  arg1 = (Roambox *)jarg1; 
  result = (float) ((arg1)->dest_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_delay_set(void * jarg1, unsigned int jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->delay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Roambox_delay_get(void * jarg1) {
  unsigned int jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  uint32 result;
  
  arg1 = (Roambox *)jarg1; 
  result = (uint32) ((arg1)->delay);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roambox_min_delay_set(void * jarg1, unsigned int jarg2) {
  Roambox *arg1 = (Roambox *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Roambox *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->min_delay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Roambox_min_delay_get(void * jarg1) {
  unsigned int jresult ;
  Roambox *arg1 = (Roambox *) 0 ;
  uint32 result;
  
  arg1 = (Roambox *)jarg1; 
  result = (uint32) ((arg1)->min_delay);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Roambox() {
  void * jresult ;
  Roambox *result = 0 ;
  
  result = (Roambox *)new Roambox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Roambox(void * jarg1) {
  Roambox *arg1 = (Roambox *) 0 ;
  
  arg1 = (Roambox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_SpawnNPC__SWIG_0(char * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  glm::vec4 *arg2 = 0 ;
  Client *arg3 = (Client *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg3 = (Client *)jarg3; 
  result = (NPC *)NPC::SpawnNPC((char const *)arg1,(glm::vec4 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_SpawnNPC__SWIG_1(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  glm::vec4 *arg2 = 0 ;
  NPC *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (NPC *)NPC::SpawnNPC((char const *)arg1,(glm::vec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_SpawnZoneController() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)NPC::SpawnZoneController();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsRecordLootStats(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsRecordLootStats();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetRecordLootStats(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRecordLootStats(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetRolledItems(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  std::vector< uint32 > *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (std::vector< uint32 > *) &((NPC const *)arg1)->GetRolledItems();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetRolledItemCount(void * jarg1, unsigned int jarg2) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetRolledItemCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NPC__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  NPCType *arg1 = (NPCType *) 0 ;
  Spawn2 *arg2 = (Spawn2 *) 0 ;
  glm::vec4 *arg3 = 0 ;
  GravityBehavior arg4 ;
  bool arg5 ;
  NPC *result = 0 ;
  
  arg1 = (NPCType *)jarg1; 
  arg2 = (Spawn2 *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (GravityBehavior)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (NPC *)new NPC((NPCType const *)arg1,arg2,(glm::vec4 const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NPC__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  NPCType *arg1 = (NPCType *) 0 ;
  Spawn2 *arg2 = (Spawn2 *) 0 ;
  glm::vec4 *arg3 = 0 ;
  GravityBehavior arg4 ;
  NPC *result = 0 ;
  
  arg1 = (NPCType *)jarg1; 
  arg2 = (Spawn2 *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (GravityBehavior)jarg4; 
  result = (NPC *)new NPC((NPCType const *)arg1,arg2,(glm::vec4 const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NPC(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_SpawnNodeNPC(const char * jarg1, const char * jarg2, void * jarg3) {
  void * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  glm::vec4 *arg3 = 0 ;
  NPC *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (NPC *)NPC::SpawnNodeNPC(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),(glm::vec4 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SpawnGridNodeNPC(void * jarg1, int jarg2, int jarg3, int jarg4) {
  glm::vec4 *arg1 = 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  
  arg1 = (glm::vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  NPC::SpawnGridNodeNPC((glm::vec4 const &)*arg1,arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_SpawnZonePointNodeNPC(const char * jarg1, void * jarg2) {
  void * jresult ;
  std::string arg1 ;
  glm::vec4 *arg2 = 0 ;
  NPC *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (NPC *)NPC::SpawnZonePointNodeNPC(SWIG_STD_MOVE(arg1),(glm::vec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  KilledByTypes arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (KilledByTypes)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Attack__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ExtraAttackOptions *arg7 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ExtraAttackOptions *)jarg7; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Attack__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Attack__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Attack__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Attack__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Attack__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_HasRaid(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_HasGroup(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetRaid(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetGroup(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Group *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsNPC(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsNPC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_Process(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_Init(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->AI_Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_Start__SWIG_0(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AI_Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_Start__SWIG_1(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->AI_Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_Stop(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->AI_Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_DoMovement(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->AI_DoMovement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetupNextWaypoint(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->AI_SetupNextWaypoint();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_AddNPCSpells(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->AI_AddNPCSpells(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_AddNPCSpellsEffects(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->AI_AddNPCSpellsEffects(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_EngagedCastCheck(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->AI_EngagedCastCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_HasSpells(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->AI_HasSpells();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_HasSpellsEffects(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->AI_HasSpellsEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ApplyAISpellEffects(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  StatBonuses *arg2 = (StatBonuses *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (StatBonuses *)jarg2; 
  (arg1)->ApplyAISpellEffects(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_PursueCastCheck(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->AI_PursueCastCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AI_IdleCastCheck(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->AI_IdleCastCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_Event_SpellCastFinished(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  uint16 arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint16)jarg3; 
  (arg1)->AI_Event_SpellCastFinished(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_AICheckCloseBeneficialSpells(void * jarg1, void * jarg2, unsigned char jarg3, float jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  uint8 arg3 ;
  float arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->AICheckCloseBeneficialSpells(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AIYellForHelp(void * jarg1, void * jarg2, void * jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->AIYellForHelp(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_LevelScale(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->LevelScale();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetTarget(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetTarget(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetSkill(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16)((NPC const *)arg1)->GetSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_CalcBonuses(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->CalcBonuses();
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCurrentBuffSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetCurrentBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCurrentSongSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetCurrentSongSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCurrentDiscSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetCurrentDiscSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetMaxBuffSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetMaxBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetMaxSongSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetMaxSongSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetMaxDiscSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetMaxDiscSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetMaxTotalSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetMaxTotalSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetPetMaxTotalSlots(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetPetMaxTotalSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_InitializeBuffSlots(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->InitializeBuffSlots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_UninitializeBuffSlots(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->UninitializeBuffSlots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetAttackTimer(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SetAttackTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RangedAttack(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RangedAttack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ThrowingAttack(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ThrowingAttack(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetNumberOfAttacks(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetNumberOfAttacks();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, short jarg4, short jarg5, void * jarg6, float jarg7, char * jarg8) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int16 arg4 ;
  int16 arg5 ;
  EQ::skills::SkillType arg6 ;
  float arg7 ;
  char *arg8 = (char *) 0 ;
  EQ::skills::SkillType *argp6 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int16)jarg4; 
  arg5 = (int16)jarg5; 
  argp6 = (EQ::skills::SkillType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (float)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->DoRangedAttackDmg(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, short jarg4, short jarg5, void * jarg6, float jarg7) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int16 arg4 ;
  int16 arg5 ;
  EQ::skills::SkillType arg6 ;
  float arg7 ;
  EQ::skills::SkillType *argp6 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int16)jarg4; 
  arg5 = (int16)jarg5; 
  argp6 = (EQ::skills::SkillType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = (float)jarg7; 
  (arg1)->DoRangedAttackDmg(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, short jarg4, short jarg5, void * jarg6) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int16 arg4 ;
  int16 arg5 ;
  EQ::skills::SkillType arg6 ;
  EQ::skills::SkillType *argp6 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int16)jarg4; 
  arg5 = (int16)jarg5; 
  argp6 = (EQ::skills::SkillType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->DoRangedAttackDmg(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, short jarg4, short jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int16 arg4 ;
  int16 arg5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int16)jarg4; 
  arg5 = (int16)jarg5; 
  (arg1)->DoRangedAttackDmg(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, short jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  int16 arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int16)jarg4; 
  (arg1)->DoRangedAttackDmg(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DoRangedAttackDmg(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoRangedAttackDmg__SWIG_6(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoRangedAttackDmg(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsFactionListAlly(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsFactionListAlly(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsGuard(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->IsGuard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_CheckNPCFactionAlly(void * jarg1, int jarg2) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  FACTION_VALUE result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (arg1)->CheckNPCFactionAlly(arg2);
  jresult = new FACTION_VALUE(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetReverseFactionCon(void * jarg1, void * jarg2) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  FACTION_VALUE result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (arg1)->GetReverseFactionCon(arg2);
  jresult = new FACTION_VALUE(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_GoToBind__SWIG_0(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->GoToBind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_GoToBind__SWIG_1(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->GoToBind();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Gate__SWIG_0(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->Gate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Gate__SWIG_1(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->Gate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_GetPetState(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  SpellBuff_Struct *arg2 = (SpellBuff_Struct *) 0 ;
  uint32 *arg3 = (uint32 *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (SpellBuff_Struct *)jarg2; 
  arg3 = (uint32 *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->GetPetState(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetPetState(void * jarg1, void * jarg2, void * jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  SpellBuff_Struct *arg2 = (SpellBuff_Struct *) 0 ;
  uint32 *arg3 = (uint32 *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (SpellBuff_Struct *)jarg2; 
  arg3 = (uint32 *)jarg3; 
  (arg1)->SetPetState(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SpellProcess(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SpellProcess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_FillSpawnStruct(void * jarg1, void * jarg2, void * jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->FillSpawnStruct(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, unsigned int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  uint16 arg3 ;
  bool arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddItem((EQ::ItemData const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  uint16 arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->AddItem((EQ::ItemData const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_2(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_3(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_4(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_5(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_6(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_7(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_8(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddItem__SWIG_9(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->AddItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootTable__SWIG_0(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->AddLootTable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootTable__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddLootTable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootTable__SWIG_2(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddLootTable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDropTable(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned char jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->AddLootDropTable(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_CheckGlobalLootTables(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->CheckGlobalLootTables();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveItem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned short jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->RemoveItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveItem__SWIG_1(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->RemoveItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveItem__SWIG_2(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_CheckTrivialMinMaxLevelDrop(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->CheckTrivialMinMaxLevelDrop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ClearLootItems(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->ClearLootItems();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetLootItems(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  LootItems *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (LootItems *) &(arg1)->GetLootItems();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetItem(void * jarg1, int jarg2) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  LootItem *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  result = (LootItem *)(arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootCash(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->AddLootCash(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveLootCash(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->RemoveLootCash();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_QueryLoot__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->QueryLoot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_QueryLoot__SWIG_1(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->QueryLoot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_HasItem(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->HasItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_CountItem(void * jarg1, unsigned int jarg2) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint16)(arg1)->CountItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetLootItemIDBySlot(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint32)(arg1)->GetLootItemIDBySlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetFirstLootSlotByItemID(void * jarg1, unsigned int jarg2) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint16)(arg1)->GetFirstLootSlotByItemID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetLootList(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  std::vector< int > result;
  
  arg1 = (NPC *)jarg1; 
  result = (arg1)->GetLootList();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_CountLoot(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)(arg1)->CountLoot();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetLoottableID(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetLoottableID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_DropsGlobalLoot(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->DropsGlobalLoot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetCopper(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetCopper();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSilver(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetSilver();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetGold(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetGold();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetPlatinum(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetPlatinum();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetCopper(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetCopper(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSilver(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetSilver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetGold(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetGold(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetPlatinum(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetPlatinum(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DescribeAggro(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DescribeAggro(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_UpdateEquipmentLight(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->UpdateEquipmentLight();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NPC_CalcMaxMana(void * jarg1) {
  long long jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int64 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int64)(arg1)->CalcMaxMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetGrid(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetGrid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSpawnGroupId(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetSpawnGroupId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetWaypointMax(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetWaypointMax(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSaveWaypoint(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetSaveWaypoint(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetWaypointMax(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetWaypointMax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetGrid(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetGrid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSpawnGroupId(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetSpawnGroupId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSpawnPointID(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetSpawnPointID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetSpawnPoint(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  glm::vec4 result;
  
  arg1 = (NPC *)jarg1; 
  result = ((NPC const *)arg1)->GetSpawnPoint();
  {
    jresult = new glm::vec4(result);
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetGuardPoint(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  glm::vec4 result;
  
  arg1 = (NPC *)jarg1; 
  result = ((NPC const *)arg1)->GetGuardPoint();
  {
    jresult = new glm::vec4(result);
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetGuardPointAnim(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  EmuAppearance result;
  
  arg1 = (NPC *)jarg1; 
  result = ((NPC const *)arg1)->GetGuardPointAnim();
  jresult = new EmuAppearance(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SaveGuardPointAnim(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  EmuAppearance arg2 ;
  EmuAppearance *argp2 ;
  
  arg1 = (NPC *)jarg1; 
  argp2 = (EmuAppearance *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuAppearance", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SaveGuardPointAnim(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetPrimSkill(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)((NPC const *)arg1)->GetPrimSkill();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetSecSkill(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)((NPC const *)arg1)->GetSecSkill();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetRangedSkill(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)((NPC const *)arg1)->GetRangedSkill();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetPrimSkill(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetPrimSkill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSecSkill(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetSecSkill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetRangedSkill(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetRangedSkill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_MerchantType_set(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MerchantType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_MerchantType_get(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32) ((arg1)->MerchantType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_merchant_open_set(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->merchant_open = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_merchant_open_get(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool) ((arg1)->merchant_open);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_MerchantOpenShop(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->MerchantOpenShop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_MerchantCloseShop(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->MerchantCloseShop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsMerchantOpen(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->IsMerchantOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Depop__SWIG_0(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Depop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Depop__SWIG_1(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Stun(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Stun(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_UnStun(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->UnStun();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSwarmOwner(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)(arg1)->GetSwarmOwner();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSwarmTarget(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)(arg1)->GetSwarmTarget();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSwarmTarget__SWIG_0(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSwarmTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSwarmTarget__SWIG_1(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SetSwarmTarget();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DepopSwarmPets(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->DepopSwarmPets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_TryDepopTargetLockedPets(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->TryDepopTargetLockedPets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_PetOnSpawn(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  (arg1)->PetOnSpawn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SignalNPC(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SignalNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SendPayload__SWIG_0(void * jarg1, int jarg2, const char * jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendPayload(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SendPayload__SWIG_1(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SendPayload(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetNPCFactionID(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetNPCFactionID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetPrimaryFaction(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetPrimaryFaction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetFactionAmount(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetFactionAmount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NPC_GetNPCHate(void * jarg1, void * jarg2) {
  long long jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (int64)(arg1)->GetNPCHate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsOnHatelist(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsOnHatelist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetNPCFactionID(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetNPCFactionID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetMaxDMG(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetMaxDMG();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetMinDMG(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetMinDMG();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetBaseDamage(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetBaseDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetMinDamage(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetMinDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetSlowMitigation(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetSlowMitigation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetAttackSpeed(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetAttackSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetAttackDelay(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetAttackDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsAnimal(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsAnimal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetPetSpellID(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetPetSpellID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetPetSpellID(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetPetSpellID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetMaxDamage(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)(arg1)->GetMaxDamage(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetTaunting(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetTaunting(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsTaunting(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsTaunting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_PickPocket(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->PickPocket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_Disarm(void * jarg1, void * jarg2, int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  int arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Disarm(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_StartSwarmTimer(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->StartSwarmTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DisableSwarmTimer(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->DisableSwarmTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_5(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_6(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  bool arg4 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddLootDrop__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg3 ;
  LootdropEntriesRepository::LootdropEntries *argp3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  argp3 = (LootdropEntriesRepository::LootdropEntries *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AddLootDrop((EQ::ItemData const *)arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_MeetsLootDropLevelRequirements__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg2 ;
  bool arg3 ;
  LootdropEntriesRepository::LootdropEntries *argp2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  argp2 = (LootdropEntriesRepository::LootdropEntries *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->MeetsLootDropLevelRequirements(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_MeetsLootDropLevelRequirements__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  LootdropEntriesRepository::LootdropEntries arg2 ;
  LootdropEntriesRepository::LootdropEntries *argp2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  argp2 = (LootdropEntriesRepository::LootdropEntries *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LootdropEntriesRepository::LootdropEntries", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->MeetsLootDropLevelRequirements(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_CheckSignal(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->CheckSignal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoClassAttacks(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoClassAttacks(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsNotTargetableWithHotkey(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsNotTargetableWithHotkey();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NPC_GetNPCHPRegen(void * jarg1) {
  long long jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int64 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int64)((NPC const *)arg1)->GetNPCHPRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NPC_GetAmmoIDfile(void * jarg1) {
  char * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  char *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (char *)((NPC const *)arg1)->GetAmmoIDfile();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ModifyStatsOnCharm(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ModifyStatsOnCharm(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetMaxWp(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetMaxWp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DisplayWaypointInfo(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->DisplayWaypointInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_CalculateNewWaypoint(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->CalculateNewWaypoint();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AssignWaypoints__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  int arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AssignWaypoints(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AssignWaypoints__SWIG_1(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->AssignWaypoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetWaypointPause(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SetWaypointPause();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_UpdateWaypoint(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UpdateWaypoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_StopWandering(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->StopWandering();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ResumeWandering(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->ResumeWandering();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_PauseWandering(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->PauseWandering(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_MoveTo(void * jarg1, void * jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  glm::vec4 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->MoveTo((glm::vec4 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_GetClosestWaypoints(void * jarg1, void * jarg2, int jarg3, void * jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  std::list< wplist > *arg2 = 0 ;
  int arg3 ;
  glm::vec3 *arg4 = 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (std::list< wplist > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< wplist > & is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (glm::vec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  (arg1)->GetClosestWaypoints(*arg2,arg3,(glm::vec3 const &)*arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetClosestWaypoint(void * jarg1, void * jarg2) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  glm::vec3 *arg2 = 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (int)(arg1)->GetClosestWaypoint((glm::vec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetEquippedItemFromTextureSlot(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((NPC const *)arg1)->GetEquippedItemFromTextureSlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetEquipmentMaterial(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((NPC const *)arg1)->GetEquipmentMaterial(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_NextGuardPosition(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->NextGuardPosition();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SaveGuardSpot__SWIG_0(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SaveGuardSpot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SaveGuardSpot__SWIG_1(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SaveGuardSpot();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SaveGuardSpot__SWIG_2(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->SaveGuardSpot((glm::vec4 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsGuarding(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsGuarding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SaveGuardSpotCharm(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SaveGuardSpotCharm();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DescribeSpecialAbilities(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->DescribeSpecialAbilities(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetMeleeTexture1(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetMeleeTexture1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetMeleeTexture2(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetMeleeTexture2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RestoreGuardSpotCharm(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->RestoreGuardSpotCharm();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetRoambox__SWIG_0(void * jarg1, float jarg2, float jarg3, unsigned int jarg4, unsigned int jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->AI_SetRoambox(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetRoambox__SWIG_1(void * jarg1, float jarg2, float jarg3, unsigned int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  uint32 arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->AI_SetRoambox(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetRoambox__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AI_SetRoambox(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetRoambox__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->AI_SetRoambox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetRoambox__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->AI_SetRoambox(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AI_SetRoambox__SWIG_5(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AI_SetRoambox(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_LoadMercenaryTypes(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->LoadMercenaryTypes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_LoadMercenaries(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->LoadMercenaries();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetMercenaryTypesList__SWIG_0(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  SwigValueWrapper< std::list< MercType > > result;
  
  arg1 = (NPC *)jarg1; 
  result = (arg1)->GetMercenaryTypesList();
  jresult = new std::list< MercType >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetMercenaryTypesList__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::list< MercType > > result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetMercenaryTypesList(arg2);
  jresult = new std::list< MercType >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetMercenariesList__SWIG_0(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  SwigValueWrapper< std::list< MercData > > result;
  
  arg1 = (NPC *)jarg1; 
  result = (arg1)->GetMercenariesList();
  jresult = new std::list< MercData >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetMercenariesList__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::list< MercData > > result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetMercenariesList(arg2);
  jresult = new std::list< MercData >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetNumMercenaryTypes__SWIG_0(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetNumMercenaryTypes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetNumMercenaryTypes__SWIG_1(void * jarg1, unsigned int jarg2) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetNumMercenaryTypes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetNumberOfMercenaries__SWIG_0(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetNumberOfMercenaries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetNumberOfMercenaries__SWIG_1(void * jarg1, unsigned int jarg2) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetNumberOfMercenaries(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetNPCAggro__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->GetNPCAggro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetNPCAggro(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetNPCAggro(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_GiveNPCTypeData(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  NPCType *arg2 = (NPCType *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (NPCType *)jarg2; 
  (arg1)->GiveNPCTypeData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetNPCSpellsID(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetNPCSpellsID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetNPCSpellsEffectsID(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetNPCSpellsEffectsID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetProximityMinX(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetProximityMinX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetProximityMaxX(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetProximityMaxX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetProximityMinY(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetProximityMinY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetProximityMaxY(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetProximityMaxY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetProximityMinZ(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetProximityMinZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetProximityMaxZ(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetProximityMaxZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsProximitySet(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->IsProximitySet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_proximity_set(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  NPCProximity *arg2 = (NPCProximity *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (NPCProximity *)jarg2; 
  if (arg1) (arg1)->proximity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_proximity_get(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  NPCProximity *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (NPCProximity *) ((arg1)->proximity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_respawn2_set(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Spawn2 *arg2 = (Spawn2 *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Spawn2 *)jarg2; 
  if (arg1) (arg1)->respawn2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_respawn2_get(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  Spawn2 *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (Spawn2 *) ((arg1)->respawn2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetQGlobals(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  QGlobalCache *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (QGlobalCache *)(arg1)->GetQGlobals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_CreateQGlobals(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  QGlobalCache *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (QGlobalCache *)(arg1)->CreateQGlobals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetSwarmInfo(void * jarg1) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  SwarmPet *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (SwarmPet *)(arg1)->GetSwarmInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSwarmInfo(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  SwarmPet *arg2 = (SwarmPet *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (SwarmPet *)jarg2; 
  (arg1)->SetSwarmInfo(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetAccuracyRating(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetAccuracyRating();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetAccuracyRating(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetAccuracyRating(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetAvoidanceRating(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetAvoidanceRating();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetAvoidanceRating(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetAvoidanceRating(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetRawAC(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetRawAC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetNPCStat(void * jarg1, const char * jarg2) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  std::string *arg2 = 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (float)(arg1)->GetNPCStat((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ModifyNPCStat(void * jarg1, const char * jarg2, const char * jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (NPC *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->ModifyNPCStat((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLevel__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetLevel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLevel__SWIG_1(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetLevel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsLDoNTrapped(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsLDoNTrapped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLDoNTrapped(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLDoNTrapped(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetLDoNTrapType(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)((NPC const *)arg1)->GetLDoNTrapType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLDoNTrapType(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetLDoNTrapType(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetLDoNTrapSpellID(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetLDoNTrapSpellID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLDoNTrapSpellID(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetLDoNTrapSpellID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsLDoNLocked(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsLDoNLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLDoNLocked(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLDoNLocked(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetLDoNLockedSkill(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetLDoNLockedSkill();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLDoNLockedSkill(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetLDoNLockedSkill(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsLDoNTrapDetected(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsLDoNTrapDetected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetLDoNTrapDetected(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLDoNTrapDetected(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetCombatEvent(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->GetCombatEvent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetCombatEvent(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  bool arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCombatEvent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_HasPrivateCorpse(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->HasPrivateCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsUnderwaterOnly(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsUnderwaterOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsQuestNPC(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsQuestNPC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NPC_GetRawNPCTypeName(void * jarg1) {
  char * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  char *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  result = (char *)((NPC const *)arg1)->GetRawNPCTypeName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetKillExpMod(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetKillExpMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ChangeLastName(void * jarg1, const char * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  std::string arg2 ;
  
  arg1 = (NPC *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->ChangeLastName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ClearLastName(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->ClearLastName();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetDepop(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->GetDepop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_NPCSlotTexture(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->NPCSlotTexture(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetAdventureTemplate(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetAdventureTemplate();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddSpellToNPCList(void * jarg1, short jarg2, unsigned short jarg3, unsigned int jarg4, short jarg5, int jarg6, short jarg7, signed char jarg8, signed char jarg9) {
  NPC *arg1 = (NPC *) 0 ;
  int16 arg2 ;
  uint16 arg3 ;
  uint32 arg4 ;
  int16 arg5 ;
  int32 arg6 ;
  int16 arg7 ;
  int8 arg8 ;
  int8 arg9 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (int16)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (int16)jarg7; 
  arg8 = (int8)jarg8; 
  arg9 = (int8)jarg9; 
  (arg1)->AddSpellToNPCList(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddSpellEffectToNPCList__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  bool arg6 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddSpellEffectToNPCList(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AddSpellEffectToNPCList__SWIG_1(void * jarg1, unsigned short jarg2, int jarg3, int jarg4, int jarg5) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->AddSpellEffectToNPCList(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveSpellFromNPCList(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveSpellFromNPCList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveSpellEffectFromNPCList__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveSpellEffectFromNPCList(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RemoveSpellEffectFromNPCList__SWIG_1(void * jarg1, unsigned short jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveSpellEffectFromNPCList(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_HasAISpellEffect(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->HasAISpellEffect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetAltCurrencyType(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetAltCurrencyType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NPC_GetNPCEmote(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  NPC_Emote_Struct *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (NPC_Emote_Struct *)(arg1)->GetNPCEmote(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoNPCEmote__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, void * jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->DoNPCEmote(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoNPCEmote__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->DoNPCEmote(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_CanTalk(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->CanTalk();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_DoQuestPause(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoQuestPause(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSpellScale(void * jarg1, float jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSpellScale(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetSpellScale(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetSpellScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetHealScale(void * jarg1, float jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHealScale(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetHealScale(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)(arg1)->GetHealScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSpellFocusDMG(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetSpellFocusDMG(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetSpellFocusDMG(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetSpellFocusDMG();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSpellFocusHeal(void * jarg1, int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  int32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetSpellFocusHeal(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetSpellFocusHeal(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (int32)((NPC const *)arg1)->GetSpellFocusHeal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSpawnKillCount(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)(arg1)->GetSpawnKillCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetScore(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_AISpellsList(void * jarg1, void * jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->AISpellsList(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NPC_GetInnateProcSpellID(void * jarg1) {
  unsigned short jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint16 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint16)((NPC const *)arg1)->GetInnateProcSpellID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetHeroForgeModel(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetHeroForgeModel();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetHeroForgeModel(void * jarg1, unsigned int jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetHeroForgeModel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsRaidTarget(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsRaidTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsRareSpawn(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsRareSpawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ResetHPUpdateTimer(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->ResetHPUpdateTimer();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IgnoreDespawn(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->IgnoreDespawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSimpleRoamBox__SWIG_0(void * jarg1, float jarg2, float jarg3, int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetSimpleRoamBox(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSimpleRoamBox__SWIG_1(void * jarg1, float jarg2, float jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetSimpleRoamBox(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SetSimpleRoamBox__SWIG_2(void * jarg1, float jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSimpleRoamBox(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxMaxX(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxMaxX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxMaxY(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxMaxY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxMinX(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxMinX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxMinY(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxMinY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxDistance(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxDestinationX(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxDestinationX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxDestinationY(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxDestinationY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NPC_GetRoamboxDestinationZ(void * jarg1) {
  float jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float result;
  
  arg1 = (NPC *)jarg1; 
  result = (float)((NPC const *)arg1)->GetRoamboxDestinationZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetRoamboxDelay(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetRoamboxDelay();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetRoamboxMinDelay(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint32)((NPC const *)arg1)->GetRoamboxMinDelay();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetArmTexture(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)(arg1)->GetArmTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetBracerTexture(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)(arg1)->GetBracerTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetHandTexture(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)(arg1)->GetHandTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetFeetTexture(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)(arg1)->GetFeetTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NPC_GetLegTexture(void * jarg1) {
  unsigned char jresult ;
  NPC *arg1 = (NPC *) 0 ;
  uint8 result;
  
  arg1 = (NPC *)jarg1; 
  result = (uint8)(arg1)->GetLegTexture();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedAccuracy(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedAccuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedArmorClass(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedArmorClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedAttack(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedAttackDelay(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedAttackDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedAvoidance(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedAvoidance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedMaxDamage(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedMaxDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetCharmedMinDamage(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)(arg1)->GetCharmedMinDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetAlwaysAggro(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->GetAlwaysAggro();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetIgnoreDespawn(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->GetIgnoreDespawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_GetSkipGlobalLoot(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)(arg1)->GetSkipGlobalLoot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NPC_GetStuckBehavior(void * jarg1) {
  int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  int result;
  
  arg1 = (NPC *)jarg1; 
  result = (int)((NPC const *)arg1)->GetStuckBehavior();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_IsSkipAutoScale(void * jarg1) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  result = (bool)((NPC const *)arg1)->IsSkipAutoScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ScaleNPC__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ScaleNPC(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ScaleNPC__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ScaleNPC(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ScaleNPC__SWIG_2(void * jarg1, unsigned char jarg2) {
  NPC *arg1 = (NPC *) 0 ;
  uint8 arg2 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ScaleNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_RecalculateSkills(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->RecalculateSkills();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_ReloadSpells(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->ReloadSpells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NPC_SendPositionToClients(void * jarg1) {
  NPC *arg1 = (NPC *) 0 ;
  
  arg1 = (NPC *)jarg1; 
  (arg1)->SendPositionToClients();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NPC_CanPathTo(void * jarg1, float jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  NPC *arg1 = (NPC *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->CanPathTo(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Encounter(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Encounter *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (Encounter *)new Encounter((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Encounter(void * jarg1) {
  Encounter *arg1 = (Encounter *) 0 ;
  
  arg1 = (Encounter *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  KilledByTypes arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (KilledByTypes)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Attack__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ExtraAttackOptions *arg7 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ExtraAttackOptions *)jarg7; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Attack__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Attack__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Attack__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Attack__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Attack__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_HasRaid(void * jarg1) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_HasGroup(void * jarg1) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Encounter_GetRaid(void * jarg1) {
  void * jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Encounter *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Encounter_GetGroup(void * jarg1) {
  void * jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Encounter *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_IsEncounter(void * jarg1) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  result = (bool)((Encounter const *)arg1)->IsEncounter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Encounter_GetEncounterName(void * jarg1) {
  char * jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  char *result = 0 ;
  
  arg1 = (Encounter *)jarg1; 
  result = (char *)((Encounter const *)arg1)->GetEncounterName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Encounter_Process(void * jarg1) {
  unsigned int jresult ;
  Encounter *arg1 = (Encounter *) 0 ;
  bool result;
  
  arg1 = (Encounter *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Depop__SWIG_0(void * jarg1, unsigned int jarg2) {
  Encounter *arg1 = (Encounter *) 0 ;
  bool arg2 ;
  
  arg1 = (Encounter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Depop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Encounter_Depop__SWIG_1(void * jarg1) {
  Encounter *arg1 = (Encounter *) 0 ;
  
  arg1 = (Encounter *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Beacon(void * jarg1, int jarg2) {
  void * jresult ;
  glm::vec4 *arg1 = 0 ;
  int arg2 ;
  Beacon *result = 0 ;
  
  arg1 = (glm::vec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (Beacon *)new Beacon((glm::vec4 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Beacon(void * jarg1) {
  Beacon *arg1 = (Beacon *) 0 ;
  
  arg1 = (Beacon *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  KilledByTypes arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (KilledByTypes)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_HasRaid(void * jarg1) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_HasGroup(void * jarg1) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Beacon_GetRaid(void * jarg1) {
  void * jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Beacon *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Beacon_GetGroup(void * jarg1) {
  void * jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Beacon *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Attack__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ExtraAttackOptions *arg7 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ExtraAttackOptions *)jarg7; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Attack__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Attack__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Attack__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Attack__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Attack__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_IsBeacon(void * jarg1) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  result = (bool)((Beacon const *)arg1)->IsBeacon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Beacon_Process(void * jarg1) {
  unsigned int jresult ;
  Beacon *arg1 = (Beacon *) 0 ;
  bool result;
  
  arg1 = (Beacon *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Depop__SWIG_0(void * jarg1, unsigned int jarg2) {
  Beacon *arg1 = (Beacon *) 0 ;
  bool arg2 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Depop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_Depop__SWIG_1(void * jarg1) {
  Beacon *arg1 = (Beacon *) 0 ;
  
  arg1 = (Beacon *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Beacon_AELocationSpell(void * jarg1, void * jarg2, unsigned short jarg3, short jarg4) {
  Beacon *arg1 = (Beacon *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  int16 arg4 ;
  
  arg1 = (Beacon *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  (arg1)->AELocationSpell(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CLIENT_LD_TIMEOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(30000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TARGETING_RANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(200);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XTARGET_HARDCAP_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SPECIALIZED_SKILL_get() {
  int jresult ;
  int result;
  
  result = (int)(50);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zone_set(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  zone = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zone_get() {
  void * jresult ;
  Zone *result = 0 ;
  
  result = (Zone *)zone;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_task_manager_set(void * jarg1) {
  TaskManager *arg1 = (TaskManager *) 0 ;
  
  arg1 = (TaskManager *)jarg1; 
  task_manager = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_task_manager_get() {
  void * jresult ;
  TaskManager *result = 0 ;
  
  result = (TaskManager *)task_manager;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CLIENTPACKET() {
  void * jresult ;
  CLIENTPACKET *result = 0 ;
  
  result = (CLIENTPACKET *)new CLIENTPACKET();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CLIENTPACKET(void * jarg1) {
  CLIENTPACKET *arg1 = (CLIENTPACKET *) 0 ;
  
  arg1 = (CLIENTPACKET *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLIENTPACKET_app_set(void * jarg1, void * jarg2) {
  CLIENTPACKET *arg1 = (CLIENTPACKET *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (CLIENTPACKET *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  if (arg1) (arg1)->app = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CLIENTPACKET_app_get(void * jarg1) {
  void * jresult ;
  CLIENTPACKET *arg1 = (CLIENTPACKET *) 0 ;
  EQApplicationPacket *result = 0 ;
  
  arg1 = (CLIENTPACKET *)jarg1; 
  result = (EQApplicationPacket *) ((arg1)->app);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLIENTPACKET_ack_req_set(void * jarg1, unsigned int jarg2) {
  CLIENTPACKET *arg1 = (CLIENTPACKET *) 0 ;
  bool arg2 ;
  
  arg1 = (CLIENTPACKET *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ack_req = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CLIENTPACKET_ack_req_get(void * jarg1) {
  unsigned int jresult ;
  CLIENTPACKET *arg1 = (CLIENTPACKET *) 0 ;
  bool result;
  
  arg1 = (CLIENTPACKET *)jarg1; 
  result = (bool) ((arg1)->ack_req);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPELLBAR_UNLOCK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x2bc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_memSpellUnknown_get() {
  int jresult ;
  int result;
  
  result = (int)memSpellUnknown;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_memSpellScribing_get() {
  int jresult ;
  int result;
  
  result = (int)memSpellScribing;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_memSpellMemorize_get() {
  int jresult ;
  int result;
  
  result = (int)memSpellMemorize;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_memSpellForget_get() {
  int jresult ;
  int result;
  
  result = (int)memSpellForget;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_memSpellSpellbar_get() {
  int jresult ;
  int result;
  
  result = (int)memSpellSpellbar;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GetZoneModeString(int jarg1) {
  const char * jresult ;
  ZoneMode arg1 ;
  std::string result;
  
  arg1 = (ZoneMode)jarg1; 
  result = GetZoneModeString(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HideCorpseNone_get() {
  int jresult ;
  int result;
  
  result = (int)HideCorpseNone;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HideCorpseAll_get() {
  int jresult ;
  int result;
  
  result = (int)HideCorpseAll;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HideCorpseAllButGroup_get() {
  int jresult ;
  int result;
  
  result = (int)HideCorpseAllButGroup;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HideCorpseLooted_get() {
  int jresult ;
  int result;
  
  result = (int)HideCorpseLooted;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HideCorpseNPC_get() {
  int jresult ;
  int result;
  
  result = (int)HideCorpseNPC;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XTarget_Struct_Type_set(void * jarg1, int jarg2) {
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  XTargetType arg2 ;
  
  arg1 = (XTarget_Struct *)jarg1; 
  arg2 = (XTargetType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XTarget_Struct_Type_get(void * jarg1) {
  int jresult ;
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  XTargetType result;
  
  arg1 = (XTarget_Struct *)jarg1; 
  result = (XTargetType) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XTarget_Struct_dirty_set(void * jarg1, unsigned int jarg2) {
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (XTarget_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dirty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XTarget_Struct_dirty_get(void * jarg1) {
  unsigned int jresult ;
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  bool result;
  
  arg1 = (XTarget_Struct *)jarg1; 
  result = (bool) ((arg1)->dirty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XTarget_Struct_ID_set(void * jarg1, unsigned short jarg2) {
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (XTarget_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_XTarget_Struct_ID_get(void * jarg1) {
  unsigned short jresult ;
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  uint16 result;
  
  arg1 = (XTarget_Struct *)jarg1; 
  result = (uint16) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XTarget_Struct_Name_set(void * jarg1, char * jarg2) {
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (XTarget_Struct *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 65-1);
      arg1->Name[65-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XTarget_Struct_Name_get(void * jarg1) {
  char * jresult ;
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  char *result = 0 ;
  
  arg1 = (XTarget_Struct *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XTarget_Struct() {
  void * jresult ;
  XTarget_Struct *result = 0 ;
  
  result = (XTarget_Struct *)new XTarget_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XTarget_Struct(void * jarg1) {
  XTarget_Struct *arg1 = (XTarget_Struct *) 0 ;
  
  arg1 = (XTarget_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_name_set(void * jarg1, const char * jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RespawnOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RespawnOption_name_get(void * jarg1) {
  const char * jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_zone_id_set(void * jarg1, unsigned int jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  uint32 arg2 ;
  
  arg1 = (RespawnOption *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->zone_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RespawnOption_zone_id_get(void * jarg1) {
  unsigned int jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  uint32 result;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (uint32) ((arg1)->zone_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_instance_id_set(void * jarg1, unsigned short jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  uint16 arg2 ;
  
  arg1 = (RespawnOption *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->instance_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_RespawnOption_instance_id_get(void * jarg1) {
  unsigned short jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  uint16 result;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (uint16) ((arg1)->instance_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_x_set(void * jarg1, float jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float arg2 ;
  
  arg1 = (RespawnOption *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RespawnOption_x_get(void * jarg1) {
  float jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float result;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_y_set(void * jarg1, float jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float arg2 ;
  
  arg1 = (RespawnOption *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RespawnOption_y_get(void * jarg1) {
  float jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float result;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_z_set(void * jarg1, float jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float arg2 ;
  
  arg1 = (RespawnOption *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RespawnOption_z_get(void * jarg1) {
  float jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float result;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RespawnOption_heading_set(void * jarg1, float jarg2) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float arg2 ;
  
  arg1 = (RespawnOption *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_RespawnOption_heading_get(void * jarg1) {
  float jresult ;
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  float result;
  
  arg1 = (RespawnOption *)jarg1; 
  result = (float) ((arg1)->heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RespawnOption() {
  void * jresult ;
  RespawnOption *result = 0 ;
  
  result = (RespawnOption *)new RespawnOption();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RespawnOption(void * jarg1) {
  RespawnOption *arg1 = (RespawnOption *) 0 ;
  
  arg1 = (RespawnOption *)jarg1; 
  delete arg1;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DIAWIND_RESPONSE_ONE_KEY_get() {
  const char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &DIAWIND_RESPONSE_ONE_KEY;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DIAWIND_RESPONSE_TWO_KEY_get() {
  const char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &DIAWIND_RESPONSE_TWO_KEY;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_POPUPID_DIAWIND_ONE_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)(uint32)POPUPID_DIAWIND_ONE;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_POPUPID_DIAWIND_TWO_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)(uint32)POPUPID_DIAWIND_TWO;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_POPUPID_UPDATE_SHOWSTATSWINDOW_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)(uint32)POPUPID_UPDATE_SHOWSTATSWINDOW;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_POPUPID_REPLACE_SPELLWINDOW_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)(uint32)POPUPID_REPLACE_SPELLWINDOW;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientReward_id_set(void * jarg1, unsigned int jarg2) {
  ClientReward *arg1 = (ClientReward *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ClientReward *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientReward_id_get(void * jarg1) {
  unsigned int jresult ;
  ClientReward *arg1 = (ClientReward *) 0 ;
  uint32 result;
  
  arg1 = (ClientReward *)jarg1; 
  result = (uint32) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientReward_amount_set(void * jarg1, unsigned int jarg2) {
  ClientReward *arg1 = (ClientReward *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ClientReward *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->amount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientReward_amount_get(void * jarg1) {
  unsigned int jresult ;
  ClientReward *arg1 = (ClientReward *) 0 ;
  uint32 result;
  
  arg1 = (ClientReward *)jarg1; 
  result = (uint32) ((arg1)->amount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientReward() {
  void * jresult ;
  ClientReward *result = 0 ;
  
  result = (ClientReward *)new ClientReward();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientReward(void * jarg1) {
  ClientReward *arg1 = (ClientReward *) 0 ;
  
  arg1 = (ClientReward *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Client(void * jarg1) {
  void * jresult ;
  EQStreamInterface *arg1 = (EQStreamInterface *) 0 ;
  Client *result = 0 ;
  
  arg1 = (EQStreamInterface *)jarg1; 
  result = (Client *)new Client(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Client(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ReconnectUCS(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ReconnectUCS();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RecordStats(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RecordStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDisplayMobInfoWindow(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisplayMobInfoWindow(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetDisplayMobInfoWindow(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetDisplayMobInfoWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsDevToolsEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsDevToolsEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDevToolsEnabled(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDevToolsEnabled(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsEXPEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsEXPEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEXPEnabled(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEXPEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPrimaryWeaponOrnamentation(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetPrimaryWeaponOrnamentation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSecondaryWeaponOrnamentation(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetSecondaryWeaponOrnamentation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendChatLineBreak__SWIG_0(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SendChatLineBreak(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendChatLineBreak__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendChatLineBreak();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GotoPlayer(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->GotoPlayer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GotoPlayerGroup(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->GotoPlayerGroup((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GotoPlayerRaid(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->GotoPlayerRaid((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  KilledByTypes arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (KilledByTypes)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasRaid(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasGroup(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetRaid(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetGroup(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsBerserk(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsBerserk();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAttackTimer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetAttackTimer();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetQuiverHaste(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetQuiverHaste(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoAttackRounds__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DoAttackRounds(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoAttackRounds__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->DoAttackRounds(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetRaidOrGroupOrSelf__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  std::vector< Mob * > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->GetRaidOrGroupOrSelf(arg2);
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetRaidOrGroupOrSelf__SWIG_1(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< Mob * > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetRaidOrGroupOrSelf();
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AI_Init(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->AI_Init();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AI_Start__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AI_Start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AI_Start__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->AI_Start();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AI_Stop(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->AI_Stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AI_Process(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->AI_Process();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AI_SpellCast(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->AI_SpellCast();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Trader_ShowItems(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Trader_ShowItems();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Trader_CustomerBrowsing(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->Trader_CustomerBrowsing(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Trader_EndTrader(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Trader_EndTrader();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Trader_StartTrader(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Trader_StartTrader();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_WithCustomer(void * jarg1, unsigned short jarg2) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint8)(arg1)->WithCustomer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_KeyRingLoad(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->KeyRingLoad();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_KeyRingAdd(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->KeyRingAdd(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_KeyRingCheck(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->KeyRingCheck(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_KeyRingList(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->KeyRingList();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsClient(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsClient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsOfClientBot(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsOfClientBot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsOfClientBotMerc(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsOfClientBotMerc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CompleteConnect(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CompleteConnect();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TryStacking__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  uint8 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->TryStacking(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TryStacking__SWIG_1(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  uint8 arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->TryStacking(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TryStacking__SWIG_2(void * jarg1, void * jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  uint8 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (bool)(arg1)->TryStacking(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TryStacking__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (bool)(arg1)->TryStacking(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTraderPacket__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendTraderPacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTraderPacket__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendTraderPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendBuyerPacket(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendBuyerPacket(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetTraderItems(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  GetItems_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (GetItems_Struct *)(arg1)->GetTraderItems();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendBazaarWelcome(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendBazaarWelcome();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DyeArmor(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQ::TintProfile *arg2 = (EQ::TintProfile *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::TintProfile *)jarg2; 
  (arg1)->DyeArmor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DyeArmorBySlot__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->DyeArmorBySlot(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DyeArmorBySlot__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->DyeArmorBySlot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_SlotConvert__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (uint8)(arg1)->SlotConvert(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_SlotConvert__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint8)(arg1)->SlotConvert(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->MessageString(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->MessageString(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, unsigned int jarg13) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  uint32 arg13 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (uint32)jarg13; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_5(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_6(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_7(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_8(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_9(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_10(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_11(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->MessageString(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MessageString__SWIG_12(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  CZClientMessageString_Struct *arg2 = (CZClientMessageString_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (CZClientMessageString_Struct *)jarg2; 
  (arg1)->MessageString((CZClientMessageString_Struct const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_FilteredMessageCheck(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  eqFilterType arg3 ;
  eqFilterType *argp3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  argp3 = (eqFilterType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->FilteredMessageCheck(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, char * jarg14) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  char *arg14 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (char *)jarg14; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,(char const *)arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessageString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, char * jarg6) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->FilteredMessageString(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Tell_StringID(void * jarg1, unsigned int jarg2, char * jarg3, char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->Tell_StringID(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendColoredText(void * jarg1, unsigned int jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendColoredText(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendBazaarResults(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, char * jarg8, unsigned int jarg9, unsigned int jarg10) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  char *arg8 = (char *) (char *)0 ;
  uint32 arg9 ;
  uint32 arg10 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->SendBazaarResults(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTraderItem(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->SendTraderItem(arg2,arg3);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_FindTraderItem(void * jarg1, int jarg2, unsigned short jarg3) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint16 arg3 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (uint16)(arg1)->FindTraderItem(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_FindTraderItemSerialNumber(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (uint32)(arg1)->FindTraderItemSerialNumber(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_FindTraderItemBySerialNumber(void * jarg1, int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (EQ::ItemInstance *)(arg1)->FindTraderItemBySerialNumber(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FindAndNukeTraderItem(void * jarg1, int jarg2, short jarg3, void * jarg4, unsigned short jarg5) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int16 arg3 ;
  Client *arg4 = (Client *) 0 ;
  uint16 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (uint16)jarg5; 
  (arg1)->FindAndNukeTraderItem(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_NukeTraderItem__SWIG_0(void * jarg1, unsigned short jarg2, short jarg3, short jarg4, void * jarg5, unsigned short jarg6, int jarg7, int jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int16 arg3 ;
  int16 arg4 ;
  Client *arg5 = (Client *) 0 ;
  uint16 arg6 ;
  int32 arg7 ;
  int32 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (uint16)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int32)jarg8; 
  (arg1)->NukeTraderItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_NukeTraderItem__SWIG_1(void * jarg1, unsigned short jarg2, short jarg3, short jarg4, void * jarg5, unsigned short jarg6, int jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int16 arg3 ;
  int16 arg4 ;
  Client *arg5 = (Client *) 0 ;
  uint16 arg6 ;
  int32 arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (uint16)jarg6; 
  arg7 = (int32)jarg7; 
  (arg1)->NukeTraderItem(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ReturnTraderReq__SWIG_0(void * jarg1, void * jarg2, short jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  int16 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->ReturnTraderReq((EQApplicationPacket const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ReturnTraderReq__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  int16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->ReturnTraderReq((EQApplicationPacket const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TradeRequestFailed(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->TradeRequestFailed((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BuyTraderItem(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Client *arg1 = (Client *) 0 ;
  TraderBuy_Struct *arg2 = (TraderBuy_Struct *) 0 ;
  Client *arg3 = (Client *) 0 ;
  EQApplicationPacket *arg4 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (TraderBuy_Struct *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (EQApplicationPacket *)jarg4; 
  (arg1)->BuyTraderItem(arg2,arg3,(EQApplicationPacket const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FinishTrade__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  void *arg4 = (void *) 0 ;
  std::list< void * > *arg5 = (std::list< void * > *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (void *)jarg4; 
  arg5 = (std::list< void * > *)jarg5; 
  (arg1)->FinishTrade(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FinishTrade__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (void *)jarg4; 
  (arg1)->FinishTrade(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FinishTrade__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->FinishTrade(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FinishTrade__SWIG_3(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->FinishTrade(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendZonePoints(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendZonePoints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendBuyerResults(void * jarg1, char * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendBuyerResults(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ShowBuyLines(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->ShowBuyLines((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SellToBuyer(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->SellToBuyer((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ToggleBuyerMode(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ToggleBuyerMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateBuyLine(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->UpdateBuyLine((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BuyerItemSearch(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->BuyerItemSearch((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBuyerWelcomeMessage(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetBuyerWelcomeMessage((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Client_GetBuyerWelcomeMessage(void * jarg1) {
  char * jresult ;
  Client *arg1 = (Client *) 0 ;
  char *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (char *)(arg1)->GetBuyerWelcomeMessage();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FillSpawnStruct(void * jarg1, void * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->FillSpawnStruct(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_ShouldISpawnFor(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->ShouldISpawnFor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Process(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QueuePacket__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  bool arg3 ;
  Mob::CLIENT_CONN_STATUS arg4 ;
  eqFilterType arg5 ;
  eqFilterType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Mob::CLIENT_CONN_STATUS)jarg4; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QueuePacket__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  bool arg3 ;
  Mob::CLIENT_CONN_STATUS arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Mob::CLIENT_CONN_STATUS)jarg4; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QueuePacket__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QueuePacket__SWIG_3(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FastQueuePacket__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket **arg2 = (EQApplicationPacket **) 0 ;
  bool arg3 ;
  Mob::CLIENT_CONN_STATUS arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket **)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (Mob::CLIENT_CONN_STATUS)jarg4; 
  (arg1)->FastQueuePacket(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FastQueuePacket__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket **arg2 = (EQApplicationPacket **) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket **)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->FastQueuePacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FastQueuePacket__SWIG_2(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQApplicationPacket **arg2 = (EQApplicationPacket **) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQApplicationPacket **)jarg2; 
  (arg1)->FastQueuePacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ChannelMessageReceived__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, char * jarg5, char * jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->ChannelMessageReceived(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ChannelMessageReceived__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, char * jarg5, char * jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->ChannelMessageReceived(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ChannelMessageReceived__SWIG_2(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4, char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->ChannelMessageReceived(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ChannelMessageSend(void * jarg1, char * jarg2, char * jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6, char * jarg7) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  char *arg7 = (char *) 0 ;
  void *arg8 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->ChannelMessageSend((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Message(void * jarg1, unsigned int jarg2, char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->Message(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FilteredMessage(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  eqFilterType arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  eqFilterType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  argp4 = (eqFilterType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (char *)jarg5; 
  (arg1)->FilteredMessage(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_VoiceMacroReceived(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->VoiceMacroReceived(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendSound(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendSound();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LearnRecipe(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LearnRecipe(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetRecipeMadeCount(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetRecipeMadeCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasRecipeLearned(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->HasRecipeLearned(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanIncreaseTradeskill(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->CanIncreaseTradeskill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRevoked(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetRevoked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetRevoked(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRevoked(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetIP(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetIP();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Client_GetIPString(void * jarg1) {
  const char * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetIPString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetIPExemption(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetIPExemption();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetIPExemption(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIPExemption(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetHideMe(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetHideMe();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetHideMe(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetHideMe(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetPort(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsDead(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsDead();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsUnconscious(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsUnconscious();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsLFP(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsLFP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateLFP(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UpdateLFP();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Save__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Save__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (bool)(arg1)->Save(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SaveCurrency(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->SaveCurrency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SaveAA(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->SaveAA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveExpendedAA(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveExpendedAA(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_ClientDataLoaded(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->ClientDataLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Connected(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->Connected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_InZone(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->InZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Disconnect(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsLD(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsLD();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Kick(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->Kick((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_WorldKick(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->WorldKick();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetAnon(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetAnon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetAFK(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetAFK();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAnon(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetAnon(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAFK(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetAFK(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetPP(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  PlayerProfile_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (PlayerProfile_Struct *) &(arg1)->GetPP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetEPP(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  ExtendedProfile_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (ExtendedProfile_Struct *) &(arg1)->GetEPP();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetInv__SWIG_0(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::InventoryProfile *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (EQ::InventoryProfile *) &(arg1)->GetInv();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetPetInfo(void * jarg1, int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  PetInfo *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (PetInfo *)(arg1)->GetPetInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetInspectMessage__SWIG_0(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  InspectMessage_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (InspectMessage_Struct *) &(arg1)->GetInspectMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ReloadExpansionProfileSetting(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ReloadExpansionProfileSetting();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPetCommandState(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetPetCommandState(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoAttackEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->AutoAttackEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoFireEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->AutoFireEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_ChangeFirstName(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->ChangeFirstName((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Duck(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Duck();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Stand(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Stand();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Sit(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Sit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetMaxHP(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetMaxHP();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_LevelRegen(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->LevelRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGM(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGM(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPVP__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetPVP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPVP__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPVP(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPVP__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((Client const *)arg1)->GetPVP(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPVP__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetPVP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGM(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetGM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBaseClass(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetBaseClass(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBaseRace(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetBaseRace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBaseGender(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetBaseGender(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDeity(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDeity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetTrackingID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetTrackingID(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetLevel2(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetLevel2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetBaseRace(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetBaseRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetBaseClass(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetBaseClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseGender(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseGender();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseFace(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseFace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseHairColor(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseHairColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseBeardColor(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseBeardColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseEyeColor(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseEyeColor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseHairStyle(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseHairStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseBeard(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseBeard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseHeritage(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseHeritage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseTattoo(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseTattoo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseDetails(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseDetails();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindX__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)((Client const *)arg1)->GetBindX(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindX__SWIG_1(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->GetBindX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindY__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)((Client const *)arg1)->GetBindY(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindY__SWIG_1(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->GetBindY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindZ__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)((Client const *)arg1)->GetBindZ(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindZ__SWIG_1(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->GetBindZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindHeading__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)((Client const *)arg1)->GetBindHeading(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetBindHeading__SWIG_1(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->GetBindHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBindZoneID__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)((Client const *)arg1)->GetBindZoneID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBindZoneID__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetBindZoneID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBindInstanceID__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)((Client const *)arg1)->GetBindInstanceID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBindInstanceID__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetBindInstanceID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcMaxMana(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcMaxMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcBaseMana(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcBaseMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_SetMana(void * jarg1, long long jarg2) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 arg2 ;
  int64 *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int64)jarg2; 
  result = (int64 *) &(arg1)->SetMana(arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcManaRegenCap(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcManaRegenCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnableAreaHPRegen(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->EnableAreaHPRegen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisableAreaHPRegen(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DisableAreaHPRegen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnableAreaManaRegen(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->EnableAreaManaRegen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisableAreaManaRegen(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DisableAreaManaRegen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnableAreaEndRegen(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->EnableAreaEndRegen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisableAreaEndRegen(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DisableAreaEndRegen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnableAreaRegens(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->EnableAreaRegens(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisableAreaRegens(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DisableAreaRegens();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ServerFilter(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  SetServerFilter_Struct *arg2 = (SetServerFilter_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (SetServerFilter_Struct *)jarg2; 
  (arg1)->ServerFilter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BulkSendTraderInventory(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->BulkSendTraderInventory(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendSingleTraderItem(void * jarg1, unsigned int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SendSingleTraderItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BulkSendMerchantInventory(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->BulkSendMerchantInventory(arg2,arg3);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetLanguageSkill(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint8)((Client const *)arg1)->GetLanguageSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPickPocketResponse__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  int arg4 ;
  EQ::ItemData *arg5 = (EQ::ItemData *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (EQ::ItemData *)jarg5; 
  (arg1)->SendPickPocketResponse(arg2,arg3,arg4,(EQ::ItemData const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPickPocketResponse__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SendPickPocketResponse(arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Client_GetLastName(void * jarg1) {
  char * jresult ;
  Client *arg1 = (Client *) 0 ;
  char *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (char *)((Client const *)arg1)->GetLastName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_ProximityX(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->ProximityX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_ProximityY(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->ProximityY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_ProximityZ(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)((Client const *)arg1)->ProximityZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearAllProximities(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearAllProximities();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckVirtualZoneLines(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CheckVirtualZoneLines();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalcBonuses(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CalcBonuses();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetATKBonus(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetATKBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHaste(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetHaste();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetRawACNoShield(void * jarg1, void * jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int *arg2 = 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  result = (int)((Client const *)arg1)->GetRawACNoShield(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetSTR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetSTA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDEX(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAGI(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetINT(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetWIS(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCHA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetFR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetPR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCorrup(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetPhR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetPhR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxStat(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxStat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxResist(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxResist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxSTR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxSTA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxDEX(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxAGI(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxINT(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxWIS(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxCHA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxMR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxPR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxDR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxCR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxFR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxCorrup(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetMaxCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseSTR(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseSTA(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseCHA(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseDEX(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseINT(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseAGI(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseWIS(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBaseCorrup(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBaseCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBasePhR(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBasePhR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicSTR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicSTA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicDEX(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicAGI(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicINT(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicWIS(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicCHA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicMR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicFR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicDR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicPR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicCR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicCorrup(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHeroicPhR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHeroicPhR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetShielding(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetShielding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetSpellShield(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetSpellShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDoTShield(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetDoTShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetStunResist(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetStunResist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetStrikeThrough(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetStrikeThrough();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAvoidance(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetAvoidance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAccuracy(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetAccuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCombatEffects(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetCombatEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDS(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetDS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHealAmt(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHealAmt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetSpellDmg(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetSpellDmg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetClair(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetClair();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDSMit(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetDSMit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetSingMod(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetSingMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetBrassMod(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetBrassMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetPercMod(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetPercMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetStringMod(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetStringMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetWindMod(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetWindMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDelayDeath(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetDelayDeath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckFizzle(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->CheckFizzle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCurrentBuffSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetCurrentBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCurrentSongSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetCurrentSongSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCurrentDiscSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetCurrentDiscSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxBuffSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetMaxBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxSongSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetMaxSongSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxDiscSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetMaxDiscSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetMaxTotalSlots(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetMaxTotalSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetFirstBuffSlot(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (uint32)(arg1)->GetFirstBuffSlot(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLastBuffSlot(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (uint32)(arg1)->GetLastBuffSlot(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_InitializeBuffSlots(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->InitializeBuffSlots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UninitializeBuffSlots(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UninitializeBuffSlots();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetBaseHP(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetBaseHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetWeight(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetWeight();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RecalcWeight(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RecalcWeight();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CalcCurrentWeight(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->CalcCurrentWeight();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetCopper(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetCopper();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetSilver(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetSilver();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGold(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetGold();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPlatinum(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetPlatinum();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalcMaxEndurance(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CalcMaxEndurance();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcBaseEndurance(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcBaseEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcEnduranceRegen__SWIG_0(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int64)(arg1)->CalcEnduranceRegen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcEnduranceRegen__SWIG_1(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcEnduranceRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_GetEndurance(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)((Client const *)arg1)->GetEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_GetMaxEndurance(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)((Client const *)arg1)->GetMaxEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcEnduranceRegenCap(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcEnduranceRegenCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_CalcHPRegenCap(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->CalcHPRegenCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetEndurancePercent(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)(arg1)->GetEndurancePercent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEndurance(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetEndurance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoEnduranceRegen(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DoEnduranceRegen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoEnduranceUpkeep(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DoEnduranceUpkeep();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetTotalATK(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetTotalATK();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetATKRating(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetATKRating();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetPrimarySkillValue(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)(arg1)->GetPrimarySkillValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetEXP(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetEXP();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetAAEXPModifier__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (float)(arg1)->GetAAEXPModifier(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetAAEXPModifier__SWIG_1(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetAAEXPModifier(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetEXPModifier__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (float)(arg1)->GetEXPModifier(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_GetEXPModifier__SWIG_1(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetEXPModifier(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAAEXPModifier__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3, short jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  int16 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int16)jarg4; 
  (arg1)->SetAAEXPModifier(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAAEXPModifier__SWIG_1(void * jarg1, unsigned int jarg2, float jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetAAEXPModifier(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEXPModifier__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3, short jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  int16 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int16)jarg4; 
  (arg1)->SetEXPModifier(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEXPModifier__SWIG_1(void * jarg1, unsigned int jarg2, float jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetEXPModifier(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_UpdateLDoNPoints(void * jarg1, unsigned int jarg2, int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->UpdateLDoNPoints(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLDoNPoints(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetLDoNPoints(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPVPPoints(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetPVPPoints(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPVPPoints(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetPVPPoints();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddPVPPoints(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddPVPPoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddEbonCrystals__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddEbonCrystals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddEbonCrystals__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddEbonCrystals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddRadiantCrystals__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddRadiantCrystals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddRadiantCrystals__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddRadiantCrystals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveEbonCrystals__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveEbonCrystals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveEbonCrystals__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveEbonCrystals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveRadiantCrystals__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveRadiantCrystals(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveRadiantCrystals__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveRadiantCrystals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRadiantCrystals(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetRadiantCrystals();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetRadiantCrystals(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetRadiantCrystals(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetEbonCrystals(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetEbonCrystals();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEbonCrystals(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetEbonCrystals(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendCrystalCounts(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendCrystalCounts();
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Client_GetExperienceForKill(void * jarg1, void * jarg2) {
  unsigned long long jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint64 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (uint64)(arg1)->GetExperienceForKill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddEXP__SWIG_0(void * jarg1, unsigned long long jarg2, unsigned char jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddEXP(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddEXP__SWIG_1(void * jarg1, unsigned long long jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->AddEXP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddEXP__SWIG_2(void * jarg1, unsigned long long jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  (arg1)->AddEXP(arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Client_CalcEXP__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  unsigned long long jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  uint64 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (uint64)(arg1)->CalcEXP(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Client_CalcEXP__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned long long jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint64 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint64)(arg1)->CalcEXP(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Client_CalcEXP__SWIG_2(void * jarg1) {
  unsigned long long jresult ;
  Client *arg1 = (Client *) 0 ;
  uint64 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint64)(arg1)->CalcEXP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalculateNormalizedAAExp(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint64 *arg2 = 0 ;
  uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint64 & is null", 0);
    return ;
  } 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->CalculateNormalizedAAExp(*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalculateStandardAAExp(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint64 *arg2 = 0 ;
  uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint64 & is null", 0);
    return ;
  } 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->CalculateStandardAAExp(*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalculateLeadershipExp(void * jarg1, void * jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint64 *arg2 = 0 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint64 & is null", 0);
    return ;
  } 
  arg3 = (uint8)jarg3; 
  (arg1)->CalculateLeadershipExp(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalculateExp(void * jarg1, unsigned long long jarg2, void * jarg3, void * jarg4, unsigned char jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint64 *arg3 = 0 ;
  uint64 *arg4 = 0 ;
  uint8 arg5 ;
  bool arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint64 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint64 & is null", 0);
    return ;
  } 
  arg4 = (uint64 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint64 & is null", 0);
    return ;
  } 
  arg5 = (uint8)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->CalculateExp(arg2,*arg3,*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEXP__SWIG_0(void * jarg1, unsigned long long jarg2, unsigned long long jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint64 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint64)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetEXP(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEXP__SWIG_1(void * jarg1, unsigned long long jarg2, unsigned long long jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint64 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint64)jarg3; 
  (arg1)->SetEXP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddLevelBasedExp__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddLevelBasedExp(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddLevelBasedExp__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->AddLevelBasedExp(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddLevelBasedExp__SWIG_2(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->AddLevelBasedExp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLeadershipEXP(void * jarg1, unsigned long long jarg2, unsigned long long jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint64 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint64)jarg3; 
  (arg1)->SetLeadershipEXP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddLeadershipEXP(void * jarg1, unsigned long long jarg2, unsigned long long jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  uint64 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (uint64)jarg3; 
  (arg1)->AddLeadershipEXP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendLeadershipEXPUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendLeadershipEXPUpdate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsLeadershipEXPOn(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsLeadershipEXPOn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetLeadershipAA__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetLeadershipAA(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetLeadershipAA__SWIG_1(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  LeadershipAA_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (LeadershipAA_Struct *) &(arg1)->GetLeadershipAA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetGroupLeadershipAA(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  GroupLeadershipAA_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (GroupLeadershipAA_Struct *) &(arg1)->GetGroupLeadershipAA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetRaidLeadershipAA(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  RaidLeadershipAA_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (RaidLeadershipAA_Struct *) &(arg1)->GetRaidLeadershipAA();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GroupLeadershipAAHealthEnhancement(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GroupLeadershipAAHealthEnhancement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GroupLeadershipAAManaEnhancement(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GroupLeadershipAAManaEnhancement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GroupLeadershipAAHealthRegeneration(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GroupLeadershipAAHealthRegeneration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GroupLeadershipAAOffenseEnhancement(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GroupLeadershipAAOffenseEnhancement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_InspectBuffs(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->InspectBuffs(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRaidPoints(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetRaidPoints();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGroupPoints(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetGroupPoints();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRaidEXP(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetRaidEXP();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGroupEXP(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetGroupEXP();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetTotalSecondsPlayed(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetTotalSecondsPlayed();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLevel__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetLevel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLevel__SWIG_1(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoToBind__SWIG_0(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->GoToBind(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoToBind__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->GoToBind();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoToSafeCoords(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->GoToSafeCoords(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Gate__SWIG_0(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->Gate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Gate__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Gate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  glm::vec3 *arg5 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (glm::vec3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  (arg1)->SetBindPoint(arg2,arg3,arg4,(glm::vec3 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetBindPoint(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBindPoint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint__SWIG_3(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBindPoint(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint__SWIG_4(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetBindPoint();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint2__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  glm::vec4 *arg5 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->SetBindPoint2(arg2,arg3,arg4,(glm::vec4 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint2__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetBindPoint2(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint2__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetBindPoint2(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint2__SWIG_3(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBindPoint2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindPoint2__SWIG_4(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetBindPoint2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetStartZone__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->SetStartZone(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetStartZone__SWIG_1(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetStartZone(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetStartZone__SWIG_2(void * jarg1, unsigned int jarg2, float jarg3, float jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetStartZone(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetStartZone__SWIG_3(void * jarg1, unsigned int jarg2, float jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetStartZone(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetStartZone__SWIG_4(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetStartZone(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetStartZone(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetStartZone();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_0(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned char jarg7, int jarg8) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint8 arg7 ;
  ZoneMode arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint8)jarg7; 
  arg8 = (ZoneMode)jarg8; 
  (arg1)->MovePC((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_1(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned char jarg7) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint8 arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint8)jarg7; 
  (arg1)->MovePC((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_2(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->MovePC((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_3(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned char jarg7, int jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint8 arg7 ;
  ZoneMode arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint8)jarg7; 
  arg8 = (ZoneMode)jarg8; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_4(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned char jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint8 arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint8)jarg7; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_5(void * jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_6(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned char jarg6, int jarg7) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  uint8 arg6 ;
  ZoneMode arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (ZoneMode)jarg7; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_7(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned char jarg6) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  uint8 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_8(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_9(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned char jarg8, int jarg9) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  uint8 arg8 ;
  ZoneMode arg9 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (uint8)jarg8; 
  arg9 = (ZoneMode)jarg9; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_10(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned char jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  uint8 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (uint8)jarg8; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePC__SWIG_11(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->MovePC(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZone__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MoveZone((char const *)arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZone__SWIG_1(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->MoveZone((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneGroup__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MoveZoneGroup((char const *)arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneGroup__SWIG_1(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->MoveZoneGroup((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneRaid__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MoveZoneRaid((char const *)arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneRaid__SWIG_1(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->MoveZoneRaid((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneInstance__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MoveZoneInstance(arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneInstance__SWIG_1(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->MoveZoneInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneInstanceGroup__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MoveZoneInstanceGroup(arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneInstanceGroup__SWIG_1(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->MoveZoneInstanceGroup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneInstanceRaid__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MoveZoneInstanceRaid(arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveZoneInstanceRaid__SWIG_1(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->MoveZoneInstanceRaid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendToGuildHall(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendToGuildHall();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendToInstance(void * jarg1, const char * jarg2, const char * jarg3, unsigned int jarg4, float jarg5, float jarg6, float jarg7, float jarg8, const char * jarg9, unsigned int jarg10) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  uint32 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  std::string arg9 ;
  uint32 arg10 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (uint32)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  if (!jarg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg9)->assign(jarg9); 
  arg10 = (uint32)jarg10; 
  (arg1)->SendToInstance(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AssignToInstance(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->AssignToInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveFromInstance(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveFromInstance(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckLoreConflict(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  result = (bool)(arg1)->CheckLoreConflict((EQ::ItemData const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ChangeLastName(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->ChangeLastName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GetGroupAAs(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  GroupLeadershipAA_Struct *arg2 = (GroupLeadershipAA_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (GroupLeadershipAA_Struct *)jarg2; 
  ((Client const *)arg1)->GetGroupAAs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GetRaidAAs(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  RaidLeadershipAA_Struct *arg2 = (RaidLeadershipAA_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (RaidLeadershipAA_Struct *)jarg2; 
  ((Client const *)arg1)->GetRaidAAs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearGroupAAs(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearGroupAAs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateGroupAAs(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->UpdateGroupAAs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SacrificeConfirm(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SacrificeConfirm(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Sacrifice(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->Sacrifice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoToDeath(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->GoToDeath();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetInstanceID(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetInstanceID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetZoning(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetZoning(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ShowSpells(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  ShowSpellType arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (ShowSpellType)jarg3; 
  (arg1)->ShowSpells(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetReverseFactionCon(void * jarg1, void * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  FACTION_VALUE result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (arg1)->GetReverseFactionCon(arg2);
  jresult = new FACTION_VALUE(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetFactionLevel(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, int jarg7, void * jarg8) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  int32 arg7 ;
  Mob *arg8 = (Mob *) 0 ;
  FACTION_VALUE result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (Mob *)jarg8; 
  result = (arg1)->GetFactionLevel(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = new FACTION_VALUE(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_ReloadCharacterFaction(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->ReloadCharacterFaction(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetCharacterFactionLevel(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (int32)(arg1)->GetCharacterFactionLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetModCharacterFactionLevel(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (int32)(arg1)->GetModCharacterFactionLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MerchantRejectMessage(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->MerchantRejectMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFactionMessage(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned char jarg6, int jarg7, int jarg8) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  int32 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int32)jarg8; 
  (arg1)->SendFactionMessage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdatePersonalFaction(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6, int jarg7, int jarg8) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 *arg5 = (int32 *) 0 ;
  int32 arg6 ;
  int32 arg7 ;
  int32 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32 *)jarg5; 
  arg6 = (int32)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (int32)jarg8; 
  (arg1)->UpdatePersonalFaction(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetFactionLevel__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  bool arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->SetFactionLevel(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetFactionLevel__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->SetFactionLevel(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetFactionLevel2(void * jarg1, unsigned int jarg2, int jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6, int jarg7, unsigned char jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int32 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  int32 arg7 ;
  uint8 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (int32)jarg7; 
  arg8 = (uint8)jarg8; 
  (arg1)->SetFactionLevel2(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetRawItemAC(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetRawItemAC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_LSAccountID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->LSAccountID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetWID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetWID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetWID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetWID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AccountID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->AccountID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Client_AccountName(void * jarg1) {
  char * jresult ;
  Client *arg1 = (Client *) 0 ;
  char *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (char *)((Client const *)arg1)->AccountName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAccountCreation(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)((Client const *)arg1)->GetAccountCreation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_Client_Admin(void * jarg1) {
  short jresult ;
  Client *arg1 = (Client *) 0 ;
  int16 result;
  
  arg1 = (Client *)jarg1; 
  result = (int16)((Client const *)arg1)->Admin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CharacterID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->CharacterID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateAdmin__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UpdateAdmin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateAdmin__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UpdateAdmin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateWho__SWIG_0(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->UpdateWho(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateWho__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UpdateWho();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GMHideMe__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->GMHideMe(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GMHideMe__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->GMHideMe();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsInAGuild(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsInAGuild();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsInGuild(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)((Client const *)arg1)->IsInGuild(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGuildListDirty(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->GetGuildListDirty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGuildListDirty(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGuildListDirty(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GuildID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GuildID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GuildRank(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GuildRank();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GuildTributeOptIn(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GuildTributeOptIn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGuildTributeOptIn(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGuildTributeOptIn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildTributeDonateItemReply(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  GuildTributeDonateItemRequest_Struct *arg2 = (GuildTributeDonateItemRequest_Struct *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (GuildTributeDonateItemRequest_Struct *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendGuildTributeDonateItemReply(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildTributeDonatePlatReply(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  GuildTributeDonatePlatRequest_Struct *arg2 = (GuildTributeDonatePlatRequest_Struct *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (GuildTributeDonatePlatRequest_Struct *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendGuildTributeDonatePlatReply(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGuildRank(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetGuildRank(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGuildID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetGuildID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMOTD__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SendGuildMOTD(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMOTD__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildMOTD();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildURL(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildURL();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildChannel(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildChannel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildSpawnAppearance(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildSpawnAppearance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildRanks(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildRanks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMembers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildMembers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildList(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildJoin(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  GuildJoin_Struct *arg2 = (GuildJoin_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (GuildJoin_Struct *)jarg2; 
  (arg1)->SendGuildJoin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RefreshGuildInfo(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RefreshGuildInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildRankNames(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildRankNames();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildTributeDetails(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendGuildTributeDetails(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoGuildTributeUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DoGuildTributeUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildActiveTributes(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildActiveTributes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildFavorAndTimer(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildFavorAndTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildTributeOptInToggle(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  GuildTributeMemberToggle *arg2 = (GuildTributeMemberToggle *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (GuildTributeMemberToggle *)jarg2; 
  (arg1)->SendGuildTributeOptInToggle((GuildTributeMemberToggle const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RequestGuildActiveTributes(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RequestGuildActiveTributes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RequestGuildFavorAndTimer(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RequestGuildFavorAndTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMembersList(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildMembersList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberAdd(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, const char * jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  std::string arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  if (!jarg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg8)->assign(jarg8); 
  (arg1)->SendGuildMemberAdd(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberRename(void * jarg1, unsigned int jarg2, const char * jarg3, const char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SendGuildMemberRename(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberDelete(void * jarg1, unsigned int jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendGuildMemberDelete(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberLevel(void * jarg1, unsigned int jarg2, unsigned int jarg3, const char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::string arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SendGuildMemberLevel(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberRankAltBanker(void * jarg1, unsigned int jarg2, unsigned int jarg3, const char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::string arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->SendGuildMemberRankAltBanker(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberPublicNote(void * jarg1, unsigned int jarg2, const char * jarg3, const char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->SendGuildMemberPublicNote(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildMemberDetails(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, const char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  std::string arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg5)->assign(jarg5); 
  (arg1)->SendGuildMemberDetails(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildRenameGuild(void * jarg1, unsigned int jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendGuildRenameGuild(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildDeletePacket(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGuildDeletePacket(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetClientMaxLevel(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetClientMaxLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetClientMaxLevel(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetClientMaxLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckManaEndUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CheckManaEndUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendManaUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendManaUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendEnduranceUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendEnduranceUpdate();
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetFace(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetFace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FriendsWho(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->FriendsWho(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Stun(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Stun(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnStun(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UnStun();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ReadBook(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  BookRequest_Struct *arg2 = (BookRequest_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (BookRequest_Struct *)jarg2; 
  (arg1)->ReadBook(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ReadBookByName(void * jarg1, const char * jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint8)jarg3; 
  (arg1)->ReadBookByName(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReadBook(void * jarg1, char * jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->QuestReadBook((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMoneyUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendMoneyUpdate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TakeMoneyFromPP__SWIG_0(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->TakeMoneyFromPP(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TakeMoneyFromPP__SWIG_1(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  result = (bool)(arg1)->TakeMoneyFromPP(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TakePlatinum__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->TakePlatinum(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TakePlatinum__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->TakePlatinum(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddMoneyToPP__SWIG_0(void * jarg1, unsigned long long jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddMoneyToPP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddMoneyToPP__SWIG_1(void * jarg1, unsigned long long jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  (arg1)->AddMoneyToPP(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddMoneyToPP__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  bool arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddMoneyToPP(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddMoneyToPP__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->AddMoneyToPP(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddPlatinum__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddPlatinum(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddPlatinum__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddPlatinum(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasMoney(void * jarg1, unsigned long long jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint64 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint64)jarg2; 
  result = (bool)(arg1)->HasMoney(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Client_GetCarriedMoney(void * jarg1) {
  unsigned long long jresult ;
  Client *arg1 = (Client *) 0 ;
  uint64 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint64)(arg1)->GetCarriedMoney();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetCarriedPlatinum(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetCarriedPlatinum();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_Client_GetAllMoney(void * jarg1) {
  unsigned long long jresult ;
  Client *arg1 = (Client *) 0 ;
  uint64 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint64)(arg1)->GetAllMoney();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetMoney(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint32)(arg1)->GetMoney(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAccountAge(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetAccountAge();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPath(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendPath(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsDiscovered(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsDiscovered(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DiscoverItem(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DiscoverItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TGB(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->TGB();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_OnDisconnect(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->OnDisconnect(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetSkillPoints(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)(arg1)->GetSkillPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSkillPoints(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSkillPoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncreaseSkill__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->IncreaseSkill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncreaseSkill__SWIG_1(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->IncreaseSkill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncreaseLanguageSkill__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->IncreaseLanguageSkill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncreaseLanguageSkill__SWIG_1(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->IncreaseLanguageSkill(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetSkill(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16)((Client const *)arg1)->GetSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRawSkill(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint32)((Client const *)arg1)->GetRawSkill(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasSkill(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((Client const *)arg1)->HasSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanHaveSkill(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((Client const *)arg1)->CanHaveSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSkill(void * jarg1, void * jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  uint16 arg3 ;
  EQ::skills::SkillType *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint16)jarg3; 
  (arg1)->SetSkill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddSkill(void * jarg1, void * jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  uint16 arg3 ;
  EQ::skills::SkillType *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (uint16)jarg3; 
  (arg1)->AddSkill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckSpecializeIncrease(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->CheckSpecializeIncrease(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckSongSkillIncrease(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->CheckSongSkillIncrease(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckIncreaseSkill__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  int arg4 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->CheckIncreaseSkill(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckIncreaseSkill__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  EQ::skills::SkillType *argp2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->CheckIncreaseSkill(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckLanguageSkillIncrease(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->CheckLanguageSkillIncrease(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLanguageSkill(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->SetLanguageSkill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetHoTT(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetHoTT(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ShowSkillsWindow(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ShowSkillsWindow();
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_MaxSkill__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, unsigned short jarg4) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  uint16 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (uint16)((Client const *)arg1)->MaxSkill(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_MaxSkill__SWIG_1(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16)((Client const *)arg1)->MaxSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_SkillTrainLevel(void * jarg1, void * jarg2, unsigned short jarg3) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  uint16 arg3 ;
  EQ::skills::SkillType *argp2 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint16)jarg3; 
  result = (uint8)(arg1)->SkillTrainLevel(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MaxSkills(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->MaxSkills();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTradeskillSearchResults(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned long)jarg3; 
  arg4 = (unsigned long)jarg4; 
  (arg1)->SendTradeskillSearchResults((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTradeskillDetails(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendTradeskillDetails(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TradeskillExecute(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  DBTradeskillRecipe_Struct *arg2 = (DBTradeskillRecipe_Struct *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (DBTradeskillRecipe_Struct *)jarg2; 
  result = (bool)(arg1)->TradeskillExecute(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckIncreaseTradeskill(void * jarg1, short jarg2, short jarg3, float jarg4, unsigned short jarg5, void * jarg6) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  int16 arg3 ;
  float arg4 ;
  uint16 arg5 ;
  EQ::skills::SkillType arg6 ;
  EQ::skills::SkillType *argp6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (uint16)jarg5; 
  argp6 = (EQ::skills::SkillType *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->CheckIncreaseTradeskill(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckTradeskillLoreConflict(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->CheckTradeskillLoreConflict(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_InitInnates(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->InitInnates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GMKill(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->GMKill();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsMedding(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsMedding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetDuelTarget(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetDuelTarget();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsDueling(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsDueling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDuelTarget(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDuelTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDueling(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDueling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MemSpell__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->MemSpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MemSpell__SWIG_1(void * jarg1, unsigned short jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->MemSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnmemSpell__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UnmemSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnmemSpell__SWIG_1(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnmemSpell(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnmemSpellBySpellID(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->UnmemSpellBySpellID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnmemSpellAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UnmemSpellAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnmemSpellAll__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UnmemSpellAll();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_FindEmptyMemSlot(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->FindEmptyMemSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_FindMemmedSpellBySlot(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16)(arg1)->FindMemmedSpellBySlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_FindMemmedSpellBySpellID(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int)(arg1)->FindMemmedSpellBySpellID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_MemmedCount(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->MemmedCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetLearnableDisciplines__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (arg1)->GetLearnableDisciplines(arg2,arg3);
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetLearnableDisciplines__SWIG_1(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (arg1)->GetLearnableDisciplines(arg2);
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetLearnableDisciplines__SWIG_2(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetLearnableDisciplines();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetLearnedDisciplines(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetLearnedDisciplines();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetMemmedSpells(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetMemmedSpells();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetScribeableSpells__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (arg1)->GetScribeableSpells(arg2,arg3);
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetScribeableSpells__SWIG_1(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (arg1)->GetScribeableSpells(arg2);
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetScribeableSpells__SWIG_2(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetScribeableSpells();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetScribedSpells(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< int > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetScribedSpells();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ScribeSpell__SWIG_0(void * jarg1, unsigned short jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->ScribeSpell(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ScribeSpell__SWIG_1(void * jarg1, unsigned short jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->ScribeSpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ScribeSpell__SWIG_2(void * jarg1, unsigned short jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ScribeSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SaveSpells(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SaveSpells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SaveDisciplines(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SaveDisciplines();
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_ScribeSpells(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint16)(arg1)->ScribeSpells(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_LearnDisciplines(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint16)(arg1)->LearnDisciplines(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetClassTrackingDistanceMultiplier(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint16)(arg1)->GetClassTrackingDistanceMultiplier(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanThisClassTrack(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CanThisClassTrack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpell__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->UnscribeSpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpell__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UnscribeSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpell__SWIG_2(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UnscribeSpell(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpellAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UnscribeSpellAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpellAll__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UnscribeSpellAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpellBySpellID__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UnscribeSpellBySpellID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UnscribeSpellBySpellID__SWIG_1(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->UnscribeSpellBySpellID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDisc__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->UntrainDisc(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDisc__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UntrainDisc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDisc__SWIG_2(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UntrainDisc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDiscAll__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UntrainDiscAll(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDiscAll__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UntrainDiscAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDiscBySpellID__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UntrainDiscBySpellID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UntrainDiscBySpellID__SWIG_1(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->UntrainDiscBySpellID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SpellGlobalCheck(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->SpellGlobalCheck(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SpellBucketCheck(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->SpellBucketCheck(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetCharMaxLevelFromQGlobal(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)(arg1)->GetCharMaxLevelFromQGlobal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetCharMaxLevelFromBucket(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)(arg1)->GetCharMaxLevelFromBucket();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Fling__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Fling(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Fling__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->Fling(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Fling__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Fling(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Fling__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->Fling(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsStanding(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsStanding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsSitting(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsSitting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsCrouching(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsCrouching();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsBecomeNPC(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsBecomeNPC();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetBecomeNPCLevel(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetBecomeNPCLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBecomeNPC(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBecomeNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBecomeNPCLevel(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetBecomeNPCLevel(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_Connection(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  EQStreamInterface *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (EQStreamInterface *)(arg1)->Connection();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetEquippedItemFromTextureSlot(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Client const *)arg1)->GetEquippedItemFromTextureSlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetEquipmentColor(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Client const *)arg1)->GetEquipmentColor(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateEquipmentLight(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UpdateEquipmentLight();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoSplitEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->AutoSplitEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoConsentGroupEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->AutoConsentGroupEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoConsentRaidEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->AutoConsentRaidEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoConsentGuildEnabled(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->AutoConsentGuildEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonHorse(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SummonHorse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetHorseId(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetHorseId(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetControlledMobId(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetControlledMobId(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetControlledMobId(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetControlledMobId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetHorseId(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetHorseId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanMedOnHorse(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CanMedOnHorse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanFastRegen(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->CanFastRegen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_NPCSpawn__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->NPCSpawn(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_NPCSpawn__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->NPCSpawn(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Disarm(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Disarm(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_BindWound__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->BindWound(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_BindWound__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->BindWound(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetTradeskillObject(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Object *arg2 = (Object *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Object *)jarg2; 
  (arg1)->SetTradeskillObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetTradeskillObject(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Object *)(arg1)->GetTradeskillObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTributes(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendTributes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildTributes(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildTributes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoTributeUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DoTributeUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTributeDetails(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendTributeDetails(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_TributeItem(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int32)(arg1)->TributeItem(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_TributeMoney(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int32)(arg1)->TributeMoney(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddTributePoints(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->AddTributePoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ChangeTributeSettings(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  TributeInfo_Struct *arg2 = (TributeInfo_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (TributeInfo_Struct *)jarg2; 
  (arg1)->ChangeTributeSettings(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTributeTimer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendTributeTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ToggleTribute(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ToggleTribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPathPacket(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::vector< FindPerson_Point > *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (std::vector< FindPerson_Point > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< FindPerson_Point > const & is null", 0);
    return ;
  } 
  (arg1)->SendPathPacket((std::vector< FindPerson_Point > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetPTimers(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  PTimerList *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (PTimerList *) &(arg1)->GetPTimers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateAdvancementRank(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SendAlternateAdvancementRank(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateAdvancementTable(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAlternateAdvancementTable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateAdvancementStats(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAlternateAdvancementStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PurchaseAlternateAdvancementRank(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->PurchaseAlternateAdvancementRank(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GrantAlternateAdvancementAbility__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->GrantAlternateAdvancementAbility(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GrantAlternateAdvancementAbility__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->GrantAlternateAdvancementAbility(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncrementAlternateAdvancementRank(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->IncrementAlternateAdvancementRank(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ActivateAlternateAdvancementAbility(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ActivateAlternateAdvancementAbility(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateAdvancementPoints(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAlternateAdvancementPoints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateAdvancementTimer(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SendAlternateAdvancementTimer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateAdvancementTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAlternateAdvancementTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetAlternateAdvancementTimer(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ResetAlternateAdvancementTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetAlternateAdvancementTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetAlternateAdvancementTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetOnDeathAlternateAdvancement(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetOnDeathAlternateAdvancement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAAPoints(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetAAPoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddAAPoints(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddAAPoints(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_RemoveAAPoints(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->RemoveAAPoints(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAAPoints(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetAAPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetSpentAA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetSpentAA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRequiredAAExperience(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetRequiredAAExperience();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AutoGrantAAPoints(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->AutoGrantAAPoints();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GrantAllAAPoints__SWIG_0(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->GrantAllAAPoints(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GrantAllAAPoints__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->GrantAllAAPoints();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasAlreadyPurchasedRank(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  AA::Rank *arg2 = (AA::Rank *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (AA::Rank *)jarg2; 
  result = (bool)(arg1)->HasAlreadyPurchasedRank(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ListPurchasedAAs__SWIG_0(void * jarg1, void * jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  std::string arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->ListPurchasedAAs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ListPurchasedAAs__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ListPurchasedAAs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SendGMCommand__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SendGMCommand(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SendGMCommand__SWIG_1(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->SendGMCommand(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RegisterBug(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  BugReport_Struct *arg2 = (BugReport_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (BugReport_Struct *)jarg2; 
  (arg1)->RegisterBug(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetApplySpellList(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  ApplySpellType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ApplySpellType *argp2 ;
  std::vector< Mob * > result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (ApplySpellType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (arg1)->GetApplySpellList(arg2,arg3,arg4,arg5);
  jresult = new std::vector< Mob * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  (arg1)->ApplySpell(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  bool arg6 ;
  bool arg7 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->ApplySpell(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  bool arg6 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->ApplySpell(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->ApplySpell(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->ApplySpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ApplySpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplySpell__SWIG_6(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ApplySpell(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  (arg1)->SetSpellDuration(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  bool arg6 ;
  bool arg7 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->SetSpellDuration(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  bool arg6 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->SetSpellDuration(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_3(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ApplySpellType arg5 ;
  ApplySpellType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (ApplySpellType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ApplySpellType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->SetSpellDuration(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_4(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetSpellDuration(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_5(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetSpellDuration(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSpellDuration__SWIG_6(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSpellDuration(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetAA(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RefundAA(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RefundAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendClearAA(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendClearAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendClearLeadershipAA(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendClearLeadershipAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendClearPlayerAA(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendClearPlayerAA();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetAAXP(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetAAXP();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetAAPercent(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetAAPercent();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAATitle(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetAATitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetTitleSuffix(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetTitleSuffix(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MemorizeSpell__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->MemorizeSpell(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MemorizeSpell__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->MemorizeSpell(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAAEXPPercentage(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetAAEXPPercentage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetEXPPercentage(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetEXPPercentage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UseAugmentContainer(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UseAugmentContainer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EVENT_ITEM_ScriptStopReturn(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->EVENT_ITEM_ScriptStopReturn();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_NukeItem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint32)(arg1)->NukeItem(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_NukeItem__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->NukeItem(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetTint__SWIG_0(void * jarg1, short jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetTint(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetTint__SWIG_1(void * jarg1, short jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  EQ::textures::Tint_Struct *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (EQ::textures::Tint_Struct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::textures::Tint_Struct & is null", 0);
    return ;
  } 
  (arg1)->SetTint(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetMaterial(void * jarg1, short jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetMaterial(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Undye(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Undye();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetItemIDAt(void * jarg1, short jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  result = (int32)(arg1)->GetItemIDAt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetAugmentIDAt(void * jarg1, short jarg2, unsigned char jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  uint8 arg3 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (int32)(arg1)->GetAugmentIDAt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_PutItemInInventory__SWIG_0(void * jarg1, short jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  EQ::ItemInstance *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->PutItemInInventory(arg2,(EQ::ItemInstance const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_PutItemInInventory__SWIG_1(void * jarg1, short jarg2, void * jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  EQ::ItemInstance *arg3 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PutItemInInventory(arg2,(EQ::ItemInstance const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_PushItemOnCursor__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->PushItemOnCursor((EQ::ItemInstance const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_PushItemOnCursor__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->PushItemOnCursor((EQ::ItemInstance const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendCursorBuffer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendCursorBuffer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DeleteItemInInventory__SWIG_0(void * jarg1, short jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  int16 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->DeleteItemInInventory(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DeleteItemInInventory__SWIG_1(void * jarg1, short jarg2, short jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  int16 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DeleteItemInInventory(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DeleteItemInInventory__SWIG_2(void * jarg1, short jarg2, short jarg3) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  int16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->DeleteItemInInventory(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DeleteItemInInventory__SWIG_3(void * jarg1, short jarg2) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->DeleteItemInInventory(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_CountItem(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->CountItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetItemCooldown(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ResetItemCooldown(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetItemCooldown__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  (arg1)->SetItemCooldown(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetItemCooldown__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetItemCooldown(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetItemCooldown__SWIG_2(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetItemCooldown(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetItemCooldown(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetItemCooldown(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveItem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->RemoveItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveItem__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SwapItem(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  MoveItem_Struct *arg2 = (MoveItem_Struct *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (MoveItem_Struct *)jarg2; 
  result = (bool)(arg1)->SwapItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SwapItemResync(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  MoveItem_Struct *arg2 = (MoveItem_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (MoveItem_Struct *)jarg2; 
  (arg1)->SwapItemResync(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QSSwapItemAuditor__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  MoveItem_Struct *arg2 = (MoveItem_Struct *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (MoveItem_Struct *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->QSSwapItemAuditor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QSSwapItemAuditor__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  MoveItem_Struct *arg2 = (MoveItem_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (MoveItem_Struct *)jarg2; 
  (arg1)->QSSwapItemAuditor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PutLootInInventory__SWIG_0(void * jarg1, short jarg2, void * jarg3, void * jarg4) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  EQ::ItemInstance *arg3 = 0 ;
  LootItem **arg4 = (LootItem **) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return ;
  } 
  arg4 = (LootItem **)jarg4; 
  (arg1)->PutLootInInventory(arg2,(EQ::ItemInstance const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PutLootInInventory__SWIG_1(void * jarg1, short jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  EQ::ItemInstance *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return ;
  } 
  (arg1)->PutLootInInventory(arg2,(EQ::ItemInstance const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoPutLootInInventory__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  LootItem **arg5 = (LootItem **) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = (LootItem **)jarg5; 
  result = (bool)(arg1)->AutoPutLootInInventory(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoPutLootInInventory__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->AutoPutLootInInventory(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoPutLootInInventory__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->AutoPutLootInInventory(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AutoPutLootInInventory__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->AutoPutLootInInventory(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned short jarg11, unsigned int jarg12, unsigned int jarg13, unsigned int jarg14) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  uint32 arg14 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_1(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned short jarg11, unsigned int jarg12, unsigned int jarg13) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  uint32 arg12 ;
  uint32 arg13 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  arg12 = (uint32)jarg12; 
  arg13 = (uint32)jarg13; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_2(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned short jarg11, unsigned int jarg12) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  uint32 arg12 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  arg12 = (uint32)jarg12; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_3(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned short jarg11) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  uint16 arg11 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  arg11 = (uint16)jarg11; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_4(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_5(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_6(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_7(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_8(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_9(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_10(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SummonItem(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_11(void * jarg1, unsigned int jarg2, short jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (bool)(arg1)->SummonItem(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SummonItem__SWIG_12(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->SummonItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_1(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_2(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_3(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_4(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_5(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_6(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SummonItemIntoInventory(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_7(void * jarg1, unsigned int jarg2, short jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->SummonItemIntoInventory(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonItemIntoInventory__SWIG_8(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SummonItemIntoInventory(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonBaggedItems(void * jarg1, unsigned int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::vector< LootItem > *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (std::vector< LootItem > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< LootItem > const & is null", 0);
    return ;
  } 
  (arg1)->SummonBaggedItems(arg2,(std::vector< LootItem > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetStats(void * jarg1, unsigned char jarg2, short jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  int16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->SetStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncStats(void * jarg1, unsigned char jarg2, short jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  int16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->IncStats(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DropItem__SWIG_0(void * jarg1, short jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DropItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DropItem__SWIG_1(void * jarg1, short jarg2) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->DropItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DropItemQS(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DropItemQS(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasItemOnCorpse(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->HasItemOnCorpse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsAugmentRestricted(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->IsAugmentRestricted(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetItemLinkHash(void * jarg1, void * jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (int)(arg1)->GetItemLinkHash((EQ::ItemInstance const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemLink__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SendItemLink((EQ::ItemInstance const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemLink__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  (arg1)->SendItemLink((EQ::ItemInstance const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendLootItemInPacket(void * jarg1, void * jarg2, short jarg3) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  int16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->SendLootItemInPacket((EQ::ItemInstance const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemPacket(void * jarg1, short jarg2, void * jarg3, void * jarg4) {
  Client *arg1 = (Client *) 0 ;
  int16 arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  ItemPacketType arg4 ;
  ItemPacketType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  argp4 = (ItemPacketType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ItemPacketType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->SendItemPacket(arg2,(EQ::ItemInstance const *)arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsValidSlot(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsValidSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsBankSlot(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsBankSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTrader(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsTrader();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsBuyer(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsBuyer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetFilter(void * jarg1, void * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  eqFilterType arg2 ;
  eqFilterType *argp2 ;
  eqFilterMode result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (eqFilterType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((Client const *)arg1)->GetFilter(arg2);
  jresult = new eqFilterMode(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetFilter(void * jarg1, void * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  eqFilterType arg2 ;
  eqFilterMode arg3 ;
  eqFilterType *argp2 ;
  eqFilterMode *argp3 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (eqFilterType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (eqFilterMode *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterMode", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetFilter(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CancelSneakHide(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CancelSneakHide();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BreakInvis(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->BreakInvis();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BreakSneakWhenCastOn(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->BreakSneakWhenCastOn(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BreakFeignDeathWhenCastOn(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->BreakFeignDeathWhenCastOn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LeaveGroup(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LeaveGroup();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Hungry(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->Hungry();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_Thirsty(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->Thirsty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetHunger(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetHunger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetThirst(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetThirst();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetHunger(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetHunger(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetThirst(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetThirst(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetConsumption(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->SetConsumption(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsStarved(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsStarved();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetIntoxication(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetIntoxication();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckTradeLoreConflict(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->CheckTradeLoreConflict(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckTradeNonDroppable(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CheckTradeNonDroppable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LinkDead(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LinkDead();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckDoubleAttack(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CheckDoubleAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckTripleAttack(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CheckTripleAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckDoubleRangedAttack(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CheckDoubleRangedAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckDualWield(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CheckDualWield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_DecreaseByID(void * jarg1, unsigned int jarg2, short jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (bool)(arg1)->DecreaseByID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_SlotConvert2(void * jarg1, unsigned char jarg2) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint8)(arg1)->SlotConvert2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Escape(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->Escape();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisenchantSummonedBags__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DisenchantSummonedBags(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisenchantSummonedBags__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DisenchantSummonedBags();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveNoRent__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RemoveNoRent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveNoRent__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RemoveNoRent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveDuplicateLore__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->RemoveDuplicateLore(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveDuplicateLore__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RemoveDuplicateLore();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveSlotNotAllowed__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->MoveSlotNotAllowed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MoveSlotNotAllowed__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->MoveSlotNotAllowed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RangedAttack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RangedAttack(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RangedAttack__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->RangedAttack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ThrowingAttack__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ThrowingAttack(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ThrowingAttack__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ThrowingAttack(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoClassAttacks__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->DoClassAttacks(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoClassAttacks__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->DoClassAttacks(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoClassAttacks__SWIG_2(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->DoClassAttacks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearZoneFlag(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearZoneFlag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetZoneFlags(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::set< uint32 > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetZoneFlags();
  jresult = new std::set< uint32 >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasZoneFlag(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)((Client const *)arg1)->HasZoneFlag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LoadZoneFlags(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LoadZoneFlags();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendZoneFlagInfo(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  ((Client const *)arg1)->SendZoneFlagInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetZoneFlag(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetZoneFlag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearPEQZoneFlag(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearPEQZoneFlag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetPEQZoneFlags(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::set< uint32 > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetPEQZoneFlags();
  jresult = new std::set< uint32 >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasPEQZoneFlag(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)((Client const *)arg1)->HasPEQZoneFlag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LoadPEQZoneFlags(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LoadPEQZoneFlags();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPEQZoneFlagInfo(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  ((Client const *)arg1)->SendPEQZoneFlagInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPEQZoneFlag(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetPEQZoneFlag(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanFish(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CanFish();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoFish__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->GoFish(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoFish__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->GoFish(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoFish__SWIG_2(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->GoFish();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ForageItem__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ForageItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ForageItem__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ForageItem();
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_CalcPriceMod__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (float)(arg1)->CalcPriceMod(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_CalcPriceMod__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (float)(arg1)->CalcPriceMod(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Client_CalcPriceMod__SWIG_2(void * jarg1) {
  float jresult ;
  Client *arg1 = (Client *) 0 ;
  float result;
  
  arg1 = (Client *)jarg1; 
  result = (float)(arg1)->CalcPriceMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetTrade(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetTrade();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DropInst(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  (arg1)->DropInst((EQ::ItemInstance const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TrainDiscipline(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->TrainDiscipline(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_MemorizeSpellFromItem(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->MemorizeSpellFromItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TrainDiscBySpellID(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->TrainDiscBySpellID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetDisciplineTimer(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetDisciplineTimer(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetAllDisciplineTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetAllDisciplineTimers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetDiscSlotBySpellID(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (int)(arg1)->GetDiscSlotBySpellID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetDisciplineTimer(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ResetDisciplineTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendDisciplineUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendDisciplineUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendDisciplineTimer(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendDisciplineTimer(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_UseDiscipline(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->UseDiscipline(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasDisciplineLearned(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->HasDisciplineLearned(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLinkedSpellReuseTimer(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetLinkedSpellReuseTimer(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsLinkedSpellReuseTimerReady(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->IsLinkedSpellReuseTimerReady(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetCastbarCooldownBySlot(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ResetCastbarCooldownBySlot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetAllCastbarCooldowns(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetAllCastbarCooldowns();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetCastbarCooldownBySpellID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ResetCastbarCooldownBySpellID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckTitle(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->CheckTitle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnableTitle(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->EnableTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveTitle(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveTitle(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnteringMessages(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->EnteringMessages(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendRules(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendRules();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGMSpeed(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetGMSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetGMInvul(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetGMInvul();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CanUseReport_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CanUseReport = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanUseReport_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool) ((arg1)->CanUseReport);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendBuffDurationPacket(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Buffs_Struct *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Buffs_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Buffs_Struct & is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->SendBuffDurationPacket(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendBuffNumHitPacket(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Buffs_Struct *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Buffs_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Buffs_Struct & is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->SendBuffNumHitPacket(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ProcessInspectRequest(void * jarg1, void * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->ProcessInspectRequest(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_ClientFinishedLoading(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->ClientFinishedLoading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_FindSpellBookSlotBySpellID(void * jarg1, unsigned short jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int)(arg1)->FindSpellBookSlotBySpellID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetSpellIDByBookSlot(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32)(arg1)->GetSpellIDByBookSlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetNextAvailableSpellBookSlot__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetNextAvailableSpellBookSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetNextAvailableSpellBookSlot__SWIG_1(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetNextAvailableSpellBookSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetNextAvailableDisciplineSlot__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetNextAvailableDisciplineSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetNextAvailableDisciplineSlot__SWIG_1(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetNextAvailableDisciplineSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetSpellByBookSlot(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32)(arg1)->GetSpellByBookSlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasSpellScribed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->HasSpellScribed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetHighestScribedSpellinSpellGroup(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetHighestScribedSpellinSpellGroup(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetMaxSkillAfterSpecializationRules(void * jarg1, void * jarg2, unsigned short jarg3) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::skills::SkillType arg2 ;
  uint16 arg3 ;
  EQ::skills::SkillType *argp2 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint16)jarg3; 
  result = (uint16)(arg1)->GetMaxSkillAfterSpecializationRules(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPopupToClient__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->SendPopupToClient((char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPopupToClient__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SendPopupToClient((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPopupToClient__SWIG_2(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SendPopupToClient((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPopupToClient__SWIG_3(void * jarg1, char * jarg2, char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SendPopupToClient((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, char * jarg8, char * jarg9, unsigned int jarg10) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  uint32 arg10 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, char * jarg8, char * jarg9) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_2(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, char * jarg8) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_3(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_4(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_5(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_6(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendFullPopup__SWIG_7(void * jarg1, char * jarg2, char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SendFullPopup((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendWindow(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, unsigned int jarg7, int jarg8, void * jarg9, char * jarg10, char * jarg11) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  uint32 arg7 ;
  int arg8 ;
  Mob *arg9 = (Mob *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  void *arg12 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (Mob *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->SendWindow(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7,arg8,arg9,(char const *)arg10,(char const *)arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingTranslocate_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PendingTranslocate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_PendingTranslocate_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool) ((arg1)->PendingTranslocate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TranslocateTime_set(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TranslocateTime = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_TranslocateTime_get(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  time_t result;
  
  arg1 = (Client *)jarg1; 
  result =  ((arg1)->TranslocateTime);
  jresult = new time_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingSacrifice_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PendingSacrifice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_PendingSacrifice_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool) ((arg1)->PendingSacrifice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SacrificeCaster_set(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->SacrificeCaster = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Client_SacrificeCaster_get(void * jarg1) {
  const char * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (std::string *) & ((arg1)->SacrificeCaster);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingTranslocateData_set(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  PendingTranslocate_Struct arg2 ;
  PendingTranslocate_Struct *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (PendingTranslocate_Struct *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PendingTranslocate_Struct", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->PendingTranslocateData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_PendingTranslocateData_get(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  PendingTranslocate_Struct result;
  
  arg1 = (Client *)jarg1; 
  result =  ((arg1)->PendingTranslocateData);
  jresult = new PendingTranslocate_Struct(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendOPTranslocateConfirm(void * jarg1, void * jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->SendOPTranslocateConfirm(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LoadClientTaskState(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LoadClientTaskState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveClientTaskState(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RemoveClientTaskState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTaskActivityComplete__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, int jarg6) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TaskType arg5 ;
  int arg6 ;
  TaskType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (TaskType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (int)jarg6; 
  (arg1)->SendTaskActivityComplete(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTaskActivityComplete__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TaskType arg5 ;
  TaskType *argp5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (TaskType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->SendTaskActivityComplete(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTaskFailed(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  TaskType arg4 ;
  TaskType *argp4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (TaskType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->SendTaskFailed(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasTaskRequestCooldownTimer(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->HasTaskRequestCooldownTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTaskRequestCooldownTimerMessage(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendTaskRequestCooldownTimerMessage();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_StartTaskRequestCooldownTimer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->StartTaskRequestCooldownTimer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetTaskState(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  ClientTaskState *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (ClientTaskState *)((Client const *)arg1)->GetTaskState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasTaskState(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->HasTaskState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CancelTask(void * jarg1, int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  TaskType arg3 ;
  TaskType *argp3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (TaskType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->CancelTask(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_SaveTaskState(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->SaveTaskState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTaskStateLoaded(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsTaskStateLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTaskActive(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsTaskActive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTaskActivityActive(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->IsTaskActivityActive(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetTaskActivityState(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  TaskType arg2 ;
  int arg3 ;
  int arg4 ;
  TaskType *argp2 ;
  ActivityState result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (TaskType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->GetTaskActivityState(arg2,arg3,arg4);
  jresult = new ActivityState(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTaskActivity__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->UpdateTaskActivity(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTaskActivity__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->UpdateTaskActivity(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveTaskByTaskID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveTaskByTaskID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetTaskActivity(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ResetTaskActivity(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTasksForItem__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  TaskActivityType arg2 ;
  int arg3 ;
  int arg4 ;
  TaskActivityType *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (TaskActivityType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskActivityType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->UpdateTasksForItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTasksForItem__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  TaskActivityType arg2 ;
  int arg3 ;
  TaskActivityType *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (TaskActivityType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskActivityType", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  (arg1)->UpdateTasksForItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTasksOnLoot__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Corpse *arg2 = (Corpse *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Corpse *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->UpdateTasksOnLoot(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTasksOnLoot__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Corpse *arg2 = (Corpse *) 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Corpse *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UpdateTasksOnLoot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTasksOnExplore(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->UpdateTasksOnExplore((glm::vec4 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_UpdateTasksOnSpeakWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  result = (bool)(arg1)->UpdateTasksOnSpeakWith(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_UpdateTasksOnDeliver(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< EQ::ItemInstance * > *arg2 = 0 ;
  Trade *arg3 = 0 ;
  NPC *arg4 = (NPC *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (std::vector< EQ::ItemInstance * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQ::ItemInstance * > & is null", 0);
    return 0;
  } 
  arg3 = (Trade *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Trade & is null", 0);
    return 0;
  } 
  arg4 = (NPC *)jarg4; 
  result = (bool)(arg1)->UpdateTasksOnDeliver(*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateTasksOnTouchSwitch(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UpdateTasksOnTouchSwitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TaskSetSelector(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->TaskSetSelector(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TaskQuestSetSelector(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  std::vector< int > *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->TaskQuestSetSelector(arg2,(std::vector< int > const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EnableTask(void * jarg1, int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->EnableTask(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DisableTask(void * jarg1, int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->DisableTask(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTaskEnabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsTaskEnabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ProcessTaskProximities(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->ProcessTaskProximities(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AssignTask__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AssignTask(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AssignTask__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->AssignTask(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AssignTask__SWIG_2(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AssignTask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_ActiveSpeakTask(void * jarg1, void * jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  result = (int)(arg1)->ActiveSpeakTask(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_ActiveSpeakActivity(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ActiveSpeakActivity(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CompleteTask(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->CompleteTask(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_FailTask(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->FailTask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_TaskTimeLeft(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->TaskTimeLeft(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_EnabledTaskCount(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->EnabledTaskCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_IsTaskCompleted(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->IsTaskCompleted(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ShowClientTasks(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ShowClientTasks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CancelAllTasks(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CancelAllTasks();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActiveTaskCount(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetActiveTaskCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActiveTaskID(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetActiveTaskID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetTaskStartTime(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  TaskType arg2 ;
  int arg3 ;
  TaskType *argp2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (TaskType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->GetTaskStartTime(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTaskActivityCompleted(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  TaskType arg2 ;
  int arg3 ;
  int arg4 ;
  TaskType *argp2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (TaskType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->IsTaskActivityCompleted(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetTaskActivityDoneCount(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  TaskType arg2 ;
  int arg3 ;
  int arg4 ;
  TaskType *argp2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  argp2 = (TaskType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TaskType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->GetTaskActivityDoneCount(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetTaskActivityDoneCountFromTaskID(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->GetTaskActivityDoneCountFromTaskID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_ActiveTasksInSet(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->ActiveTasksInSet(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_CompletedTasksInSet(void * jarg1, int jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->CompletedTasksInSet(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PurgeTaskTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->PurgeTaskTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LockSharedTask(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->LockSharedTask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EndSharedTask__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EndSharedTask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_EndSharedTask__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->EndSharedTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_m_requesting_shared_task_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_requesting_shared_task = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_m_requesting_shared_task_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool) ((arg1)->m_requesting_shared_task);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_m_shared_task_update_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_shared_task_update = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_m_shared_task_update_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool) ((arg1)->m_shared_task_update);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_m_requested_shared_task_removal_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_requested_shared_task_removal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_m_requested_shared_task_removal_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool) ((arg1)->m_requested_shared_task_removal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetPartyMembers(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  SwigValueWrapper< std::vector< Client * > > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetPartyMembers();
  jresult = new std::vector< Client * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_ClientVersion(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::versions::ClientVersion result;
  
  arg1 = (Client *)jarg1; 
  result = ((Client const *)arg1)->ClientVersion();
  jresult = new EQ::versions::ClientVersion(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_ClientVersionBit(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->ClientVersionBit();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetClientVersion(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQ::versions::ClientVersion arg2 ;
  EQ::versions::ClientVersion *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (EQ::versions::ClientVersion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::versions::ClientVersion", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetClientVersion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAdventureError(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendAdventureError((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAdventureDetails(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAdventureDetails();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAdventureCount(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendAdventureCount(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_NewAdventure(void * jarg1, int jarg2, int jarg3, char * jarg4, int jarg5, char * jarg6) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->NewAdventure(arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsOnAdventure(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsOnAdventure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LeaveAdventure(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LeaveAdventure();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AdventureFinish(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->AdventureFinish(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAdventureData(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetAdventureData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearAdventureData(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearAdventureData();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasAdventureData(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->HasAdventureData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearCurrentAdventure(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearCurrentAdventure();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingAdventureRequest(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->PendingAdventureRequest();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPendingAdventureRequest(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetPendingAdventureRequest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearPendingAdventureRequest(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearPendingAdventureRequest();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingAdventureCreate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->PendingAdventureCreate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPendingAdventureCreate(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetPendingAdventureCreate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearPendingAdventureCreate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearPendingAdventureCreate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingAdventureLeave(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->PendingAdventureLeave();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPendingAdventureLeave(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetPendingAdventureLeave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearPendingAdventureLeave(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearPendingAdventureLeave();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PendingAdventureDoorClick(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->PendingAdventureDoorClick();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPendingAdventureDoorClick(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetPendingAdventureDoorClick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearPendingAdventureDoorClick(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearPendingAdventureDoorClick();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearPendingAdventureData(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearPendingAdventureData();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanEnterZone__SWIG_0(void * jarg1, const char * jarg2, short jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  int16 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int16)jarg3; 
  result = (bool)(arg1)->CanEnterZone((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanEnterZone__SWIG_1(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->CanEnterZone((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CanEnterZone__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CanEnterZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetAggroCount(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetAggroCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncrementAggroCount__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->IncrementAggroCount(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_IncrementAggroCount__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->IncrementAggroCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DecrementAggroCount(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DecrementAggroCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPVPStats(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendPVPStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendDisciplineTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendDisciplineTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendRespawnBinds(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendRespawnBinds();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLDoNWins(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetLDoNWins();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLDoNLosses(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetLDoNLosses();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLDoNWinsTheme(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetLDoNWinsTheme(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLDoNLossesTheme(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetLDoNLossesTheme(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLDoNPointsTheme(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetLDoNPointsTheme(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateLDoNWinLoss__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  (arg1)->UpdateLDoNWinLoss(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateLDoNWinLoss__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UpdateLDoNWinLoss(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateLDoNWinLoss__SWIG_2(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->UpdateLDoNWinLoss(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckLDoNHail(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->CheckLDoNHail(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckEmoteHail(void * jarg1, void * jarg2, char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->CheckEmoteHail(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_HandleLDoNOpen(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->HandleLDoNOpen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_HandleLDoNSenseTraps(void * jarg1, void * jarg2, unsigned short jarg3, unsigned char jarg4) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  uint16 arg3 ;
  uint8 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->HandleLDoNSenseTraps(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_HandleLDoNDisarm(void * jarg1, void * jarg2, unsigned short jarg3, unsigned char jarg4) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  uint16 arg3 ;
  uint8 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->HandleLDoNDisarm(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_HandleLDoNPickLock(void * jarg1, void * jarg2, unsigned short jarg3, unsigned char jarg4) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  uint16 arg3 ;
  uint8 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->HandleLDoNPickLock(arg2,arg3,arg4);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_LDoNChest_SkillCheck(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->LDoNChest_SkillCheck(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MarkSingleCompassLoc__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, unsigned char jarg5) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  uint8 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->MarkSingleCompassLoc(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MarkSingleCompassLoc__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Client *arg1 = (Client *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->MarkSingleCompassLoc(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendCrossZoneMessage(void * jarg1, const char * jarg2, unsigned short jarg3, const char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint16_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  Client::SendCrossZoneMessage(arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendCrossZoneMessageString__SWIG_0(void * jarg1, const char * jarg2, unsigned short jarg3, unsigned int jarg4, void * jarg5) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  std::initializer_list< std::string > *arg5 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (std::initializer_list< std::string > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::initializer_list< std::string > const & is null", 0);
    return ;
  } 
  Client::SendCrossZoneMessageString(arg1,(std::string const &)*arg2,arg3,arg4,(std::initializer_list< std::string > const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendCrossZoneMessageString__SWIG_1(void * jarg1, const char * jarg2, unsigned short jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  Client::SendCrossZoneMessageString(arg1,(std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddExpeditionLockout__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  ExpeditionLockoutTimer *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (ExpeditionLockoutTimer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ExpeditionLockoutTimer const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddExpeditionLockout((ExpeditionLockoutTimer const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddExpeditionLockout__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  ExpeditionLockoutTimer *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (ExpeditionLockoutTimer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ExpeditionLockoutTimer const & is null", 0);
    return ;
  } 
  (arg1)->AddExpeditionLockout((ExpeditionLockoutTimer const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddExpeditionLockoutDuration__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, int jarg4, const char * jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddExpeditionLockoutDuration((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddExpeditionLockoutDuration__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3, int jarg4, const char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  (arg1)->AddExpeditionLockoutDuration((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddExpeditionLockoutDuration__SWIG_2(void * jarg1, const char * jarg2, const char * jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  (arg1)->AddExpeditionLockoutDuration((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddNewExpeditionLockout__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, unsigned int jarg4, const char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  std::string arg5 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint32_t)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg5)->assign(jarg5); 
  (arg1)->AddNewExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddNewExpeditionLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint32_t)jarg4; 
  (arg1)->AddNewExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateExpedition__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  DynamicZone *arg2 = 0 ;
  bool arg3 ;
  Expedition *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (DynamicZone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DynamicZone & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (Expedition *)(arg1)->CreateExpedition(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateExpedition__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  DynamicZone *arg2 = 0 ;
  Expedition *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (DynamicZone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DynamicZone & is null", 0);
    return 0;
  } 
  result = (Expedition *)(arg1)->CreateExpedition(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateExpedition__SWIG_2(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4, const char * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  std::string *arg5 = 0 ;
  uint32 arg6 ;
  uint32 arg7 ;
  bool arg8 ;
  Expedition *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (Expedition *)(arg1)->CreateExpedition((std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateExpedition__SWIG_3(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4, const char * jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  std::string *arg5 = 0 ;
  uint32 arg6 ;
  uint32 arg7 ;
  Expedition *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (Expedition *)(arg1)->CreateExpedition((std::string const &)*arg2,arg3,arg4,(std::string const &)*arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateExpeditionFromTemplate(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32_t arg2 ;
  Expedition *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (Expedition *)(arg1)->CreateExpeditionFromTemplate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetExpedition(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Expedition *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Expedition *)((Client const *)arg1)->GetExpedition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetExpeditionID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetExpeditionID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetExpeditionLockout__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, unsigned int jarg4) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  ExpeditionLockoutTimer *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  result = (ExpeditionLockoutTimer *)((Client const *)arg1)->GetExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetExpeditionLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ExpeditionLockoutTimer *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (ExpeditionLockoutTimer *)((Client const *)arg1)->GetExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetExpeditionLockouts__SWIG_0(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< ExpeditionLockoutTimer > *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (std::vector< ExpeditionLockoutTimer > *) &((Client const *)arg1)->GetExpeditionLockouts();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetExpeditionLockouts__SWIG_1(void * jarg1, const char * jarg2, unsigned int jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  SwigValueWrapper< std::vector< ExpeditionLockoutTimer > > result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  result = (arg1)->GetExpeditionLockouts((std::string const &)*arg2,arg3);
  jresult = new std::vector< ExpeditionLockoutTimer >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetExpeditionLockouts__SWIG_2(void * jarg1, const char * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::vector< ExpeditionLockoutTimer > > result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->GetExpeditionLockouts((std::string const &)*arg2);
  jresult = new std::vector< ExpeditionLockoutTimer >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPendingExpeditionInviteID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetPendingExpeditionInviteID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasExpeditionLockout__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->HasExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasExpeditionLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->HasExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsInExpedition(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsInExpedition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveAllExpeditionLockouts__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveAllExpeditionLockouts((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveAllExpeditionLockouts__SWIG_1(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->RemoveAllExpeditionLockouts((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveExpeditionLockout__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false; 
  (arg1)->RemoveExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveExpeditionLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->RemoveExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RequestPendingExpeditionInvite(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RequestPendingExpeditionInvite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendExpeditionLockoutTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendExpeditionLockoutTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetExpeditionID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetExpeditionID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPendingExpeditionInvite(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  ExpeditionInvite *arg2 = 0 ;
  std::unique_ptr< ExpeditionInvite > rvrdeleter2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (ExpeditionInvite *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ExpeditionInvite && is null", 0);
    return ;
  }
  rvrdeleter2.reset(arg2); 
  (arg1)->SetPendingExpeditionInvite((ExpeditionInvite &&)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DzListTimers(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DzListTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDzRemovalTimer(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDzRemovalTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendDzCompassUpdate(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendDzCompassUpdate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GoToDzSafeReturnOrBind(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  DynamicZone *arg2 = (DynamicZone *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (DynamicZone *)jarg2; 
  (arg1)->GoToDzSafeReturnOrBind((DynamicZone const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePCDynamicZone__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->MovePCDynamicZone(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePCDynamicZone__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->MovePCDynamicZone(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePCDynamicZone__SWIG_2(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->MovePCDynamicZone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePCDynamicZone__SWIG_3(void * jarg1, const char * jarg2, int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->MovePCDynamicZone((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePCDynamicZone__SWIG_4(void * jarg1, const char * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (arg1)->MovePCDynamicZone((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_MovePCDynamicZone__SWIG_5(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->MovePCDynamicZone((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TryMovePCDynamicZoneSwitch(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->TryMovePCDynamicZoneSwitch(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetDynamicZones__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32_t arg2 ;
  int arg3 ;
  SwigValueWrapper< std::vector< DynamicZone * > > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->GetDynamicZones(arg2,arg3);
  jresult = new std::vector< DynamicZone * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetDynamicZones__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32_t arg2 ;
  SwigValueWrapper< std::vector< DynamicZone * > > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (arg1)->GetDynamicZones(arg2);
  jresult = new std::vector< DynamicZone * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetDynamicZones__SWIG_2(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  SwigValueWrapper< std::vector< DynamicZone * > > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetDynamicZones();
  jresult = new std::vector< DynamicZone * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateDzSwitchListPacket(void * jarg1, void * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< DynamicZone * > *arg2 = 0 ;
  SwigValueWrapper< std::unique_ptr< EQApplicationPacket > > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (std::vector< DynamicZone * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DynamicZone * > const & is null", 0);
    return 0;
  } 
  result = (arg1)->CreateDzSwitchListPacket((std::vector< DynamicZone * > const &)*arg2);
  jresult = new std::unique_ptr< EQApplicationPacket >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateCompassPacket(void * jarg1, void * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< DynamicZoneCompassEntry_Struct > *arg2 = 0 ;
  SwigValueWrapper< std::unique_ptr< EQApplicationPacket > > result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (std::vector< DynamicZoneCompassEntry_Struct > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DynamicZoneCompassEntry_Struct > const & is null", 0);
    return 0;
  } 
  result = (arg1)->CreateCompassPacket((std::vector< DynamicZoneCompassEntry_Struct > const &)*arg2);
  jresult = new std::unique_ptr< EQApplicationPacket >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddDynamicZoneID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->AddDynamicZoneID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveDynamicZoneID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->RemoveDynamicZoneID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendDynamicZoneUpdates(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendDynamicZoneUpdates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDynamicZoneMemberStatus(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  DynamicZoneMemberStatus arg2 ;
  DynamicZoneMemberStatus *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (DynamicZoneMemberStatus *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null DynamicZoneMemberStatus", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetDynamicZoneMemberStatus(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CreateTaskDynamicZone(void * jarg1, int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  DynamicZone *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (DynamicZone *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DynamicZone & is null", 0);
    return ;
  } 
  (arg1)->CreateTaskDynamicZone(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CalcItemScale__SWIG_0(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CalcItemScale();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CalcItemScale__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->CalcItemScale(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoItemEnterZone__SWIG_0(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DoItemEnterZone();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_DoItemEnterZone__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->DoItemEnterZone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonAndRezzAllCorpses(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SummonAndRezzAllCorpses();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SummonAllCorpses(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->SummonAllCorpses((glm::vec4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DepopAllCorpses(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DepopAllCorpses();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DepopPlayerCorpse(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DepopPlayerCorpse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_BuryPlayerCorpses(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->BuryPlayerCorpses();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_GetCorpseCount(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)(arg1)->GetCorpseCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetCorpseID(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32)(arg1)->GetCorpseID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetCorpseItemAt(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (uint32)(arg1)->GetCorpseItemAt(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SuspendMinion(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SuspendMinion(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Doppelganger(void * jarg1, unsigned short jarg2, void * jarg3, char * jarg4, int jarg5, int jarg6) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->Doppelganger(arg2,arg3,(char const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_NotifyNewTitlesAvailable(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->NotifyNewTitlesAvailable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Signal(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Signal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPayload__SWIG_0(void * jarg1, int jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  std::string arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendPayload(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendPayload__SWIG_1(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SendPayload(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetBindSightTarget(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Mob *)(arg1)->GetBindSightTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBindSightTarget(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetBindSightTarget(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetBoatID(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetBoatID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendRewards(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendRewards();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_TryReward(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->TryReward(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetQGlobals(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  QGlobalCache *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (QGlobalCache *)(arg1)->GetQGlobals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_CreateQGlobals(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  QGlobalCache *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (QGlobalCache *)(arg1)->CreateQGlobals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GuildBankAck(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->GuildBankAck();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GuildBankDepositAck(void * jarg1, unsigned int jarg2, signed char jarg3) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  int8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int8)jarg3; 
  (arg1)->GuildBankDepositAck(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsGuildBanker(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsGuildBanker();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGuildBanker(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetGuildBanker(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearGuildBank(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearGuildBank();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGroupCreatePacket(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGroupCreatePacket();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGroupLeaderChangePacket(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendGroupLeaderChangePacket((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGroupJoinAcknowledge(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGroupJoinAcknowledge();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DoTracking(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DoTracking();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsTracking(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsTracking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPendingGuildInvitation(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetPendingGuildInvitation(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetPendingGuildInvitation(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->GetPendingGuildInvitation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LocateCorpse(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LocateCorpse();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendTargetCommand(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendTargetCommand(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_MoveItemToInventory__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->MoveItemToInventory(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_MoveItemToInventory__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (bool)(arg1)->MoveItemToInventory(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_HandleRespawnFromHover(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->HandleRespawnFromHover(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsHoveringForRespawn(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsHoveringForRespawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_respawn_options_set(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::list< RespawnOption > *arg2 = (std::list< RespawnOption > *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (std::list< RespawnOption > *)jarg2; 
  if (arg1) (arg1)->respawn_options = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_respawn_options_get(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::list< RespawnOption > *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (std::list< RespawnOption > *)& ((arg1)->respawn_options);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddRespawnOption__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7, float jarg8, unsigned int jarg9, signed char jarg10) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool arg9 ;
  int8 arg10 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = (int8)jarg10; 
  (arg1)->AddRespawnOption(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddRespawnOption__SWIG_1(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7, float jarg8, unsigned int jarg9) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool arg9 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->AddRespawnOption(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddRespawnOption__SWIG_2(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->AddRespawnOption(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddRespawnOption__SWIG_3(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->AddRespawnOption(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_RemoveRespawnOption__SWIG_0(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->RemoveRespawnOption(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_RemoveRespawnOption__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (bool)(arg1)->RemoveRespawnOption(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearRespawnOptions(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearRespawnOptions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetPendingRezzData(void * jarg1, int jarg2, unsigned int jarg3, unsigned short jarg4, char * jarg5) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SetPendingRezzData(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsRezzPending(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsRezzPending();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearHover(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearHover();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsBlockedBuff(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->IsBlockedBuff(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsBlockedPetBuff(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (bool)(arg1)->IsBlockedPetBuff(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsDraggingCorpse__SWIG_0(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)(arg1)->IsDraggingCorpse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsDraggingCorpse__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->IsDraggingCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DragCorpses(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->DragCorpses();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearDraggedCorpses(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearDraggedCorpses();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ConsentCorpses__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = jarg3 ? true : false; 
  (arg1)->ConsentCorpses(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ConsentCorpses__SWIG_1(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string arg2 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->ConsentCorpses(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAltCurrencies(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAltCurrencies();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAlternateCurrencyValue(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetAlternateCurrencyValue(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_AddAlternateCurrencyValue__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->AddAlternateCurrencyValue(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_AddAlternateCurrencyValue__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->AddAlternateCurrencyValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_RemoveAlternateCurrencyValue(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->RemoveAlternateCurrencyValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateCurrencyValues(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendAlternateCurrencyValues();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateCurrencyValue__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SendAlternateCurrencyValue(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendAlternateCurrencyValue__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendAlternateCurrencyValue(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetAlternateCurrencyValue(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)((Client const *)arg1)->GetAlternateCurrencyValue(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ProcessAlternateCurrencyQueue(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ProcessAlternateCurrencyQueue();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_OpenLFGuildWindow(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->OpenLFGuildWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_HandleLFGuildResponse(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  ServerPacket *arg2 = (ServerPacket *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (ServerPacket *)jarg2; 
  (arg1)->HandleLFGuildResponse(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendLFGuildStatus(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendLFGuildStatus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendGuildLFGuildStatus(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendGuildLFGuildStatus();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_XTargettingAvailable(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->XTargettingAvailable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetMaxXTargets(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetMaxXTargets();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetMaxXTargets(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetMaxXTargets(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsXTarget(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)((Client const *)arg1)->IsXTarget((Mob const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsClientXTarget(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)((Client const *)arg1)->IsClientXTarget((Client const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateClientXTarget(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->UpdateClientXTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateXTargetType__SWIG_0(void * jarg1, int jarg2, void * jarg3, char * jarg4) {
  Client *arg1 = (Client *) 0 ;
  XTargetType arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (XTargetType)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->UpdateXTargetType(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateXTargetType__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  XTargetType arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (XTargetType)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->UpdateXTargetType(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddAutoXTarget__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddAutoXTarget(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_AddAutoXTarget__SWIG_1(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->AddAutoXTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveXTarget(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->RemoveXTarget(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendXTargetPacket(void * jarg1, unsigned int jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->SendXTargetPacket(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendXTargetUpdates(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendXTargetUpdates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveGroupXTargets(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RemoveGroupXTargets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RemoveAutoXTargets(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->RemoveAutoXTargets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ShowXTargets(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ShowXTargets(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetXTargetAutoMgr(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  XTargetAutoHaters *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (XTargetAutoHaters *)(arg1)->GetXTargetAutoMgr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetXTargetAutoMgr(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  XTargetAutoHaters *arg2 = (XTargetAutoHaters *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (XTargetAutoHaters *)jarg2; 
  (arg1)->SetXTargetAutoMgr(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDirtyAutoHaters(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetDirtyAutoHaters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ProcessXTargetAutoHaters(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ProcessXTargetAutoHaters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_JoinGroupXTargets(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Group *arg2 = (Group *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Group *)jarg2; 
  (arg1)->JoinGroupXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LeaveGroupXTargets(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Group *arg2 = (Group *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Group *)jarg2; 
  (arg1)->LeaveGroupXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LeaveRaidXTargets(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Raid *)jarg2; 
  (arg1)->LeaveRaidXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearXTargets(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ClearXTargets();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GroupFollow(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->GroupFollow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetRunMode(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetRunMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckWaterAutoFireLoS(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->CheckWaterAutoFireLoS(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendReloadCommandMessages(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendReloadCommandMessages();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemRecastTimer__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SendItemRecastTimer(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemRecastTimer__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendItemRecastTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemRecastTimer__SWIG_2(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SendItemRecastTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetItemRecastTimer(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetItemRecastTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DeleteItemRecastTimer(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DeleteItemRecastTimer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_HasItemRecastTimer(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->HasItemRecastTimer(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_AggroMeterAvailable(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->AggroMeterAvailable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAggroMeterLock(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAggroMeterLock(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ProcessAggroMeter(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ProcessAggroMeter();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_InitializeMercInfo(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->InitializeMercInfo();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckCanSpawnMerc(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->CheckCanSpawnMerc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckCanHireMerc(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->CheckCanHireMerc(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckCanRetainMerc(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->CheckCanRetainMerc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_CheckCanUnsuspendMerc(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->CheckCanUnsuspendMerc();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_DismissMerc(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DismissMerc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_MercOnlyOrNoGroup(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->MercOnlyOrNoGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetMercenaryID(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)((Client const *)arg1)->GetMercenaryID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetMercSlot(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)((Client const *)arg1)->GetMercSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetMercID(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMercID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetMercSlot(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetMercSlot(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetMerc(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Merc *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Merc *)(arg1)->GetMerc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetMercInfo__SWIG_0(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  MercInfo *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (MercInfo *) &(arg1)->GetMercInfo(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetMercInfo__SWIG_1(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  MercInfo *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (MercInfo *) &(arg1)->GetMercInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Client_GetNumberOfMercenaries(void * jarg1) {
  unsigned char jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint8)(arg1)->GetNumberOfMercenaries();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetMerc(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Merc *)jarg2; 
  (arg1)->SetMerc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercResponsePackets(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendMercResponsePackets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercMerchantResponsePacket(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SendMercMerchantResponsePacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercenaryUnknownPacket(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SendMercenaryUnknownPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercenaryUnsuspendPacket(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SendMercenaryUnsuspendPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercTimer__SWIG_0(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Merc *)jarg2; 
  (arg1)->SendMercTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercTimer__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendMercTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercTimerPacket__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  int32 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (int32)jarg6; 
  (arg1)->SendMercTimerPacket(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercTimerPacket__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->SendMercTimerPacket(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercTimerPacket__SWIG_2(void * jarg1, int jarg2, int jarg3, int jarg4) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->SendMercTimerPacket(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercSuspendResponsePacket(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendMercSuspendResponsePacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercAssignPacket(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->SendMercAssignPacket(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMercPersonalInfo(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendMercPersonalInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendClearMercInfo(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendClearMercInfo();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SuspendMercCommand(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SuspendMercCommand();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SpawnMercOnZone(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SpawnMercOnZone();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SpawnMerc(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Merc *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SpawnMerc(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateMercTimer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UpdateMercTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_UpdateMercLevel(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->UpdateMercLevel();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckMercSuspendTimer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CheckMercSuspendTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendWebLink(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendWebLink((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMarqueeMessage__SWIG_0(void * jarg1, unsigned int jarg2, const char * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (uint32)jarg4; 
  (arg1)->SendMarqueeMessage(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMarqueeMessage__SWIG_1(void * jarg1, unsigned int jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SendMarqueeMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendMarqueeMessage__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, const char * jarg7) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  std::string arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->SendMarqueeMessage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendSpellAnim(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->SendSpellAnim(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_DuplicateLoreMessage(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DuplicateLoreMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_GarbleMessage(void * jarg1, char * jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->GarbleMessage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ItemTimerCheck(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ItemTimerCheck();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TryItemTimer(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->TryItemTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendItemScale(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  (arg1)->SendItemScale(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActSTR(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActSTR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActSTA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActSTA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActDEX(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActDEX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActAGI(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActAGI();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActINT(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActINT();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActWIS(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActWIS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetActCHA(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->GetActCHA();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_LoadAccountFlags(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->LoadAccountFlags();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ClearAccountFlag(void * jarg1, const char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->ClearAccountFlag((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetAccountFlag(void * jarg1, const char * jarg2, const char * jarg3) {
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetAccountFlag((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Client_GetAccountFlag(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (Client *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->GetAccountFlag((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetAccountFlags(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetAccountFlags();
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetGMStatus(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGMStatus(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_Consume(void * jarg1, void * jarg2, unsigned char jarg3, short jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  uint8 arg3 ;
  int16 arg4 ;
  bool arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->Consume((EQ::ItemData const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_PlayMP3(void * jarg1, char * jarg2) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PlayMP3((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ExpeditionSay(void * jarg1, char * jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ExpeditionSay((char const *)arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetEnvironmentDamageModifier(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)((Client const *)arg1)->GetEnvironmentDamageModifier();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetEnvironmentDamageModifier(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetEnvironmentDamageModifier(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetInvulnerableEnvironmentDamage(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->GetInvulnerableEnvironmentDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetInvulnerableEnvironmentDamage(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInvulnerableEnvironmentDamage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetIntoxication(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetIntoxication(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ApplyWeaponsStance(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ApplyWeaponsStance();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TogglePassiveAlternativeAdvancement(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  AA::Rank *arg2 = 0 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (AA::Rank *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AA::Rank const & is null", 0);
    return ;
  } 
  arg3 = (uint32)jarg3; 
  (arg1)->TogglePassiveAlternativeAdvancement((AA::Rank const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_UseTogglePassiveHotkey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  AA::Rank *arg2 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (AA::Rank *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AA::Rank const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->UseTogglePassiveHotkey((AA::Rank const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TogglePurchaseAlternativeAdvancementRank(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->TogglePurchaseAlternativeAdvancementRank(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetAlternateAdvancementRank(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ResetAlternateAdvancementRank(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsEffectinAlternateAdvancementRankEffects(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  AA::Rank *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (AA::Rank *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AA::Rank const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->IsEffectinAlternateAdvancementRankEffects((AA::Rank const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_TripInterrogateInvState(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->TripInterrogateInvState();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetInterrogateInvState(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->GetInterrogateInvState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_InterrogateInventory__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool *arg6 = 0 ;
  bool arg7 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (bool *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return 0;
  } 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->InterrogateInventory(arg2,arg3,arg4,arg5,*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_InterrogateInventory__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool *arg6 = 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (bool *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->InterrogateInventory(arg2,arg3,arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetNextInvSnapshot(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetNextInvSnapshot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetLastInvSnapshotTime(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetLastInvSnapshotTime();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetNextInvSnapshotTime(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetNextInvSnapshotTime();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  bool arg9 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->QuestReward(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->QuestReward(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->QuestReward(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->QuestReward(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->QuestReward(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->QuestReward(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->QuestReward(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_7(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->QuestReward(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_8(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  QuestReward_Struct *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (QuestReward_Struct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "QuestReward_Struct const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->QuestReward(arg2,(QuestReward_Struct const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_QuestReward__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  QuestReward_Struct *arg3 = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (QuestReward_Struct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "QuestReward_Struct const & is null", 0);
    return ;
  } 
  (arg1)->QuestReward(arg2,(QuestReward_Struct const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CashReward(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->CashReward(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RewardFaction(void * jarg1, int jarg2, int jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RewardFaction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ResetHPUpdateTimer(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ResetHPUpdateTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SendHPUpdateMarquee(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SendHPUpdateMarquee();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CheckRegionTypeChanges(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CheckRegionTypeChanges();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetLastRegion(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  WaterRegionType result;
  
  arg1 = (Client *)jarg1; 
  result = (WaterRegionType)(arg1)->GetLastRegion();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_CalcATK(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 result;
  
  arg1 = (Client *)jarg1; 
  result = (int32)(arg1)->CalcATK();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_trapid_set(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->trapid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_trapid_get(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32) ((arg1)->trapid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLastPositionBeforeBulkUpdate(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  glm::vec4 arg2 ;
  
  arg1 = (Client *)jarg1; 
  
  arg2 = *reinterpret_cast<glm::vec4*>(jarg2);
  
  (arg1)->SetLastPositionBeforeBulkUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_p_raid_instance_set(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Raid *)jarg2; 
  if (arg1) (arg1)->p_raid_instance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_p_raid_instance_get(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Raid *) ((arg1)->p_raid_instance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_ShowDevToolsMenu(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->ShowDevToolsMenu();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_cheat_manager_set(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  CheatManager arg2 ;
  CheatManager *argp2 ;
  
  arg1 = (Client *)jarg1; 
  argp2 = (CheatManager *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CheatManager", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->cheat_manager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_cheat_manager_get(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  CheatManager result;
  
  arg1 = (Client *)jarg1; 
  result =  ((arg1)->cheat_manager);
  jresult = new CheatManager(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Client_GetGuildPublicNote(void * jarg1) {
  const char * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetGuildPublicNote();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_GetPlayerEvent(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  PlayerEvent::PlayerEvent result;
  
  arg1 = (Client *)jarg1; 
  result = (arg1)->GetPlayerEvent();
  jresult = new PlayerEvent::PlayerEvent(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_RecordKilledNPCEvent(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->RecordKilledNPCEvent(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetEXPForLevel(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint32)(arg1)->GetEXPForLevel(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetDoorToolEntityId(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetDoorToolEntityId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetDoorToolEntityId(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetDoorToolEntityId(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Client_GetObjectToolEntityId(void * jarg1) {
  unsigned short jresult ;
  Client *arg1 = (Client *) 0 ;
  uint16 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint16)((Client const *)arg1)->GetObjectToolEntityId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetObjectToolEntityId(void * jarg1, unsigned short jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetObjectToolEntityId(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_IsLockSavePosition(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)((Client const *)arg1)->IsLockSavePosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetLockSavePosition(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLockSavePosition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetSharedTaskId(void * jarg1, long long jarg2) {
  Client *arg1 = (Client *) 0 ;
  int64 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->SetSharedTaskId(arg2);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Client_GetSharedTaskId(void * jarg1) {
  long long jresult ;
  Client *arg1 = (Client *) 0 ;
  int64 result;
  
  arg1 = (Client *)jarg1; 
  result = (int64)((Client const *)arg1)->GetSharedTaskId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_XTargets_set(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  XTarget_Struct *arg2 = (XTarget_Struct *) (XTarget_Struct *)0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (XTarget_Struct *)jarg2; 
  {
    size_t ii;
    XTarget_Struct *b = (XTarget_Struct *) arg1->XTargets;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((XTarget_Struct *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Client_XTargets_get(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  XTarget_Struct *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (XTarget_Struct *)(XTarget_Struct *) ((arg1)->XTargets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBotOption(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  Client::BotOwnerOption arg2 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client::BotOwnerOption)jarg2; 
  result = (bool)((Client const *)arg1)->GetBotOption(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotOption__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  Client *arg1 = (Client *) 0 ;
  Client::BotOwnerOption arg2 ;
  bool arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client::BotOwnerOption)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBotOption(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotOption__SWIG_1(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  Client::BotOwnerOption arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Client::BotOwnerOption)jarg2; 
  (arg1)->SetBotOption(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBotPulling(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->GetBotPulling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotPulling__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBotPulling(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotPulling__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetBotPulling();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBotPrecombat(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  bool result;
  
  arg1 = (Client *)jarg1; 
  result = (bool)(arg1)->GetBotPrecombat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotPrecombat__SWIG_0(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  bool arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBotPrecombat(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotPrecombat__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->SetBotPrecombat();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetBotRequiredLevel__SWIG_0(void * jarg1, unsigned char jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int)(arg1)->GetBotRequiredLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetBotRequiredLevel__SWIG_1(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetBotRequiredLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBotCreationLimit__SWIG_0(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)(arg1)->GetBotCreationLimit(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Client_GetBotCreationLimit__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Client *)jarg1; 
  result = (uint32)(arg1)->GetBotCreationLimit();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetBotSpawnLimit__SWIG_0(void * jarg1, unsigned char jarg2) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int)(arg1)->GetBotSpawnLimit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Client_GetBotSpawnLimit__SWIG_1(void * jarg1) {
  int jresult ;
  Client *arg1 = (Client *) 0 ;
  int result;
  
  arg1 = (Client *)jarg1; 
  result = (int)(arg1)->GetBotSpawnLimit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotCreationLimit__SWIG_0(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->SetBotCreationLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotCreationLimit__SWIG_1(void * jarg1, unsigned int jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetBotCreationLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotRequiredLevel__SWIG_0(void * jarg1, int jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->SetBotRequiredLevel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotRequiredLevel__SWIG_1(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBotRequiredLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotSpawnLimit__SWIG_0(void * jarg1, int jarg2, unsigned char jarg3) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  uint8 arg3 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->SetBotSpawnLimit(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SetBotSpawnLimit__SWIG_1(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  int arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetBotSpawnLimit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CampAllBots__SWIG_0(void * jarg1, unsigned char jarg2) {
  Client *arg1 = (Client *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->CampAllBots(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_CampAllBots__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  (arg1)->CampAllBots();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Client_SpawnRaidBotsOnConnect(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (Raid *)jarg2; 
  (arg1)->SpawnRaidBotsOnConnect(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Client_GetMailKeyFull(void * jarg1) {
  const char * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (std::string *) &((Client const *)arg1)->GetMailKeyFull();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Client_GetMailKey(void * jarg1) {
  const char * jresult ;
  Client *arg1 = (Client *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (std::string *) &((Client const *)arg1)->GetMailKey();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_LOOTERS_get() {
  int jresult ;
  int result;
  
  result = (int)(72);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SendEndLootErrorPacket(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  Corpse::SendEndLootErrorPacket(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SendLootReqErrorPacket__SWIG_0(void * jarg1, int jarg2) {
  Client *arg1 = (Client *) 0 ;
  LootResponse arg2 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (LootResponse)jarg2; 
  Corpse::SendLootReqErrorPacket(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SendLootReqErrorPacket__SWIG_1(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  Corpse::SendLootReqErrorPacket(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Corpse__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  LootItems *arg2 = (LootItems *) 0 ;
  uint32 arg3 ;
  NPCType **arg4 = (NPCType **) 0 ;
  uint32 arg5 ;
  Corpse *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (LootItems *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (NPCType **)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (Corpse *)new Corpse(arg1,arg2,arg3,(NPCType const **)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Corpse__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  NPC *arg1 = (NPC *) 0 ;
  LootItems *arg2 = (LootItems *) 0 ;
  uint32 arg3 ;
  NPCType **arg4 = (NPCType **) 0 ;
  Corpse *result = 0 ;
  
  arg1 = (NPC *)jarg1; 
  arg2 = (LootItems *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (NPCType **)jarg4; 
  result = (Corpse *)new Corpse(arg1,arg2,arg3,(NPCType const **)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Corpse__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  KilledByTypes arg3 ;
  Corpse *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (KilledByTypes)jarg3; 
  result = (Corpse *)new Corpse(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Corpse__SWIG_3(void * jarg1, int jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  int32 arg2 ;
  Corpse *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (Corpse *)new Corpse(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Corpse__SWIG_4(unsigned int jarg1, unsigned int jarg2, char * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, void * jarg9, float jarg10, unsigned char jarg11, unsigned short jarg12, unsigned char jarg13, unsigned char jarg14, unsigned char jarg15, unsigned char jarg16, unsigned char jarg17, unsigned int jarg18, unsigned int jarg19, int jarg20, unsigned int jarg21, unsigned int jarg22, unsigned int jarg23) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  LootItems *arg4 = (LootItems *) 0 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  glm::vec4 *arg9 = 0 ;
  float arg10 ;
  uint8 arg11 ;
  uint16 arg12 ;
  uint8 arg13 ;
  uint8 arg14 ;
  uint8 arg15 ;
  uint8 arg16 ;
  uint8 arg17 ;
  uint32 arg18 ;
  uint32 arg19 ;
  KilledByTypes arg20 ;
  bool arg21 ;
  uint32 arg22 ;
  bool arg23 ;
  Corpse *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (LootItems *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (glm::vec4 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg10 = (float)jarg10; 
  arg11 = (uint8)jarg11; 
  arg12 = (uint16)jarg12; 
  arg13 = (uint8)jarg13; 
  arg14 = (uint8)jarg14; 
  arg15 = (uint8)jarg15; 
  arg16 = (uint8)jarg16; 
  arg17 = (uint8)jarg17; 
  arg18 = (uint32)jarg18; 
  arg19 = (uint32)jarg19; 
  arg20 = (KilledByTypes)jarg20; 
  arg21 = jarg21 ? true : false; 
  arg22 = (uint32)jarg22; 
  arg23 = jarg23 ? true : false; 
  result = (Corpse *)new Corpse(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,(glm::vec4 const &)*arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Corpse__SWIG_5(unsigned int jarg1, unsigned int jarg2, char * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, void * jarg9, float jarg10, unsigned char jarg11, unsigned short jarg12, unsigned char jarg13, unsigned char jarg14, unsigned char jarg15, unsigned char jarg16, unsigned char jarg17, unsigned int jarg18, unsigned int jarg19, int jarg20, unsigned int jarg21, unsigned int jarg22) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  LootItems *arg4 = (LootItems *) 0 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  glm::vec4 *arg9 = 0 ;
  float arg10 ;
  uint8 arg11 ;
  uint16 arg12 ;
  uint8 arg13 ;
  uint8 arg14 ;
  uint8 arg15 ;
  uint8 arg16 ;
  uint8 arg17 ;
  uint32 arg18 ;
  uint32 arg19 ;
  KilledByTypes arg20 ;
  bool arg21 ;
  uint32 arg22 ;
  Corpse *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (LootItems *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (glm::vec4 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg10 = (float)jarg10; 
  arg11 = (uint8)jarg11; 
  arg12 = (uint16)jarg12; 
  arg13 = (uint8)jarg13; 
  arg14 = (uint8)jarg14; 
  arg15 = (uint8)jarg15; 
  arg16 = (uint8)jarg16; 
  arg17 = (uint8)jarg17; 
  arg18 = (uint32)jarg18; 
  arg19 = (uint32)jarg19; 
  arg20 = (KilledByTypes)jarg20; 
  arg21 = jarg21 ? true : false; 
  arg22 = (uint32)jarg22; 
  result = (Corpse *)new Corpse(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8,(glm::vec4 const &)*arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Corpse(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Death__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  KilledByTypes arg6 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (KilledByTypes)jarg6; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Death__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (bool)(arg1)->Death(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Damage__SWIG_0(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8, int jarg9) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  eSpecialAttacks arg9 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (eSpecialAttacks)jarg9; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Damage__SWIG_1(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7, unsigned int jarg8) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  bool arg8 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Damage__SWIG_2(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6, signed char jarg7) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  int8 arg7 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int8)jarg7; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Damage__SWIG_3(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5, unsigned int jarg6) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  bool arg6 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Damage(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Damage__SWIG_4(void * jarg1, void * jarg2, long long jarg3, unsigned short jarg4, void * jarg5) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int64 arg3 ;
  uint16 arg4 ;
  EQ::skills::SkillType arg5 ;
  EQ::skills::SkillType *argp5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int64)jarg3; 
  arg4 = (uint16)jarg4; 
  argp5 = (EQ::skills::SkillType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->Damage(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Attack__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ExtraAttackOptions *arg7 = (ExtraAttackOptions *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (ExtraAttackOptions *)jarg7; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Attack__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Attack__SWIG_2(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Attack__SWIG_3(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Attack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Attack__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Attack(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Attack__SWIG_5(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->Attack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_HasRaid(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->HasRaid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_HasGroup(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->HasGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corpse_GetRaid(void * jarg1) {
  void * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  result = (Raid *)(arg1)->GetRaid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corpse_GetGroup(void * jarg1) {
  void * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  result = (Group *)(arg1)->GetGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetCorpseDBID(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetCorpseDBID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Corpse_GetOwnerName(void * jarg1) {
  char * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  char *result = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  result = (char *)(arg1)->GetOwnerName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)((Corpse const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsCorpse(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)((Corpse const *)arg1)->IsCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsPlayerCorpse(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)((Corpse const *)arg1)->IsPlayerCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsNPCCorpse(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)((Corpse const *)arg1)->IsNPCCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsBecomeNPCCorpse(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)((Corpse const *)arg1)->IsBecomeNPCCorpse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_DepopNPCCorpse(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->DepopNPCCorpse();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_DepopPlayerCorpse(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->DepopPlayerCorpse();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Process(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Save(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetCharID(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetCharID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_SetCharID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->SetCharID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetDecayTime(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetDecayTime();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetRezTime(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetRezTime();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_ResetDecayTimer(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->ResetDecayTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetDecayTimer(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetDecayTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetConsentGroupID(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetConsentGroupID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetConsentRaidID(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetConsentRaidID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetConsentGuildID(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetConsentGuildID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddConsentName(void * jarg1, const char * jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->AddConsentName((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_RemoveConsentName(void * jarg1, const char * jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->RemoveConsentName((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SendWorldSpawnPlayerCorpseInZone(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SendWorldSpawnPlayerCorpseInZone(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_MovePlayerCorpseToGraveyard(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->MovePlayerCorpseToGraveyard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_MovePlayerCorpseToNonInstance(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->MovePlayerCorpseToNonInstance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Delete(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->Delete();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Bury(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->Bury();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_CalcCorpseName(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->CalcCorpseName();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_LoadPlayerCorpseDecayTime(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LoadPlayerCorpseDecayTime(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetWornItem(void * jarg1, short jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  int16 arg2 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (int16)jarg2; 
  result = (uint32)((Corpse const *)arg1)->GetWornItem(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corpse_GetItem__SWIG_0(void * jarg1, unsigned short jarg2, void * jarg3) {
  void * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint16 arg2 ;
  LootItem **arg3 = (LootItem **) 0 ;
  LootItem *result = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (LootItem **)jarg3; 
  result = (LootItem *)(arg1)->GetItem(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corpse_GetItem__SWIG_1(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint16 arg2 ;
  LootItem *result = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (LootItem *)(arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetPlayerKillItemID(void * jarg1, int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  int32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetPlayerKillItemID(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Corpse_GetPlayerKillItem(void * jarg1) {
  int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  int32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (int32)(arg1)->GetPlayerKillItem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_RemoveItem__SWIG_0(void * jarg1, unsigned short jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_RemoveItem__SWIG_1(void * jarg1, void * jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  LootItem *arg2 = (LootItem *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (LootItem *)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_RemoveItemByID__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RemoveItemByID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_RemoveItemByID__SWIG_1(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveItemByID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, const char * jarg12, unsigned int jarg13, unsigned int jarg14, unsigned int jarg15) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  std::string *arg12 = 0 ;
  uint32 arg13 ;
  uint32 arg14 ;
  uint32 arg15 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  if (!jarg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg12_str(jarg12);
  arg12 = &arg12_str; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  arg15 = (uint32)jarg15; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(std::string const &)*arg12,arg13,arg14,arg15);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_1(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, const char * jarg12, unsigned int jarg13, unsigned int jarg14) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  std::string *arg12 = 0 ;
  uint32 arg13 ;
  uint32 arg14 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  if (!jarg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg12_str(jarg12);
  arg12 = &arg12_str; 
  arg13 = (uint32)jarg13; 
  arg14 = (uint32)jarg14; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(std::string const &)*arg12,arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_2(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, const char * jarg12, unsigned int jarg13) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  std::string *arg12 = 0 ;
  uint32 arg13 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  if (!jarg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg12_str(jarg12);
  arg12 = &arg12_str; 
  arg13 = (uint32)jarg13; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(std::string const &)*arg12,arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_3(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, const char * jarg12) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  std::string *arg12 = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  if (!jarg12) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg12_str(jarg12);
  arg12 = &arg12_str; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,(std::string const &)*arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_4(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_5(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_6(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_7(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_8(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_9(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5, unsigned int jarg6) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_10(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4, unsigned int jarg5) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->AddItem(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_11(void * jarg1, unsigned int jarg2, unsigned short jarg3, short jarg4) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  int16 arg4 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (int16)jarg4; 
  (arg1)->AddItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddItem__SWIG_12(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->AddItem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetCash(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SetCash(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_RemoveCash(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->RemoveCash();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetCopper(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetCopper();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetSilver(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetSilver();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetGold(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetGold();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetPlatinum(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetPlatinum();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsRezzed__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->IsRezzed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_IsRezzed__SWIG_1(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  bool arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->IsRezzed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_CastRezz(void * jarg1, unsigned short jarg2, void * jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  uint16 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->CastRezz(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_CompleteResurrection__SWIG_0(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  bool arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->CompleteResurrection(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_CompleteResurrection__SWIG_1(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->CompleteResurrection();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsRezzable(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->IsRezzable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetRezTimer__SWIG_0(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  bool arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRezTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetRezTimer__SWIG_1(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->SetRezTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_QueryLoot(void * jarg1, void * jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->QueryLoot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_HasItem(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->HasItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Corpse_CountItem(void * jarg1, unsigned int jarg2) {
  unsigned short jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint16)(arg1)->CountItem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetItemIDBySlot(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint32)(arg1)->GetItemIDBySlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Corpse_GetFirstLootSlotByItemID(void * jarg1, unsigned int jarg2) {
  unsigned short jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 arg2 ;
  uint16 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint16)(arg1)->GetFirstLootSlotByItemID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corpse_GetLootList(void * jarg1) {
  void * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  std::vector< int > result;
  
  arg1 = (Corpse *)jarg1; 
  result = (arg1)->GetLootList();
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_LootCorpseItem(void * jarg1, void * jarg2, void * jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  Client *arg2 = (Client *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->LootCorpseItem(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_EndLoot(void * jarg1, void * jarg2, void * jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  Client *arg2 = (Client *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->EndLoot(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_MakeLootRequestPackets(void * jarg1, void * jarg2, void * jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  Client *arg2 = (Client *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->MakeLootRequestPackets(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AllowPlayerLoot(void * jarg1, void * jarg2, unsigned char jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->AllowPlayerLoot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_AddLooter(void * jarg1, void * jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->AddLooter(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_CountItems(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->CountItems();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_CanPlayerLoot(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->CanPlayerLoot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Lock(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->Lock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_UnLock(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->UnLock();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsLocked(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->IsLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_ResetLooter(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->ResetLooter();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsBeingLooted(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->IsBeingLooted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_IsBeingLootedBy(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->IsBeingLootedBy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_FillSpawnStruct(void * jarg1, void * jarg2, void * jarg3) {
  Corpse *arg1 = (Corpse *) 0 ;
  NewSpawn_Struct *arg2 = (NewSpawn_Struct *) 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (NewSpawn_Struct *)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->FillSpawnStruct(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_Summon(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->Summon(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_Spawn(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->Spawn();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_corpse_name_set(void * jarg1, char * jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->corpse_name, (const char *)arg2, 64-1);
      arg1->corpse_name[64-1] = 0;
    } else {
      arg1->corpse_name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Corpse_corpse_name_get(void * jarg1) {
  char * jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  char *result = 0 ;
  
  arg1 = (Corpse *)jarg1; 
  result = (char *)(char *) ((arg1)->corpse_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetEquippedItemFromTextureSlot(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Corpse const *)arg1)->GetEquippedItemFromTextureSlot(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetEquipmentColor(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((Corpse const *)arg1)->GetEquipmentColor(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Corpse_GetRezExp(void * jarg1) {
  long long jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  int64 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (int64)(arg1)->GetRezExp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_Corpse_GetGMRezExp(void * jarg1) {
  long long jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  int64 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (int64)(arg1)->GetGMRezExp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Corpse_GetKilledBy(void * jarg1) {
  unsigned char jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint8 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint8)(arg1)->GetKilledBy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetRemainingRezTime(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  uint32 result;
  
  arg1 = (Corpse *)jarg1; 
  result = (uint32)(arg1)->GetRemainingRezTime();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_UpdateEquipmentLight(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->UpdateEquipmentLight();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_CheckIsOwnerOnline(void * jarg1) {
  Corpse *arg1 = (Corpse *) 0 ;
  
  arg1 = (Corpse *)jarg1; 
  (arg1)->CheckIsOwnerOnline();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Corpse_SetOwnerOnline(void * jarg1, unsigned int jarg2) {
  Corpse *arg1 = (Corpse *) 0 ;
  bool arg2 ;
  
  arg1 = (Corpse *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOwnerOnline(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Corpse_GetOwnerOnline(void * jarg1) {
  unsigned int jresult ;
  Corpse *arg1 = (Corpse *) 0 ;
  bool result;
  
  arg1 = (Corpse *)jarg1; 
  result = (bool)(arg1)->GetOwnerOnline();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corpse_LoadCharacterCorpse(void * jarg1, void * jarg2) {
  void * jresult ;
  CharacterCorpsesRepository::CharacterCorpses *arg1 = 0 ;
  glm::vec4 *arg2 = 0 ;
  Corpse *result = 0 ;
  
  arg1 = (CharacterCorpsesRepository::CharacterCorpses *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CharacterCorpsesRepository::CharacterCorpses const & is null", 0);
    return 0;
  } 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (Corpse *)Corpse::LoadCharacterCorpse((CharacterCorpsesRepository::CharacterCorpses const &)*arg1,(glm::vec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Doors(void * jarg1) {
  Doors *arg1 = (Doors *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Doors__SWIG_0(char * jarg1, void * jarg2, unsigned char jarg3, unsigned short jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  glm::vec4 *arg2 = 0 ;
  uint8 arg3 ;
  uint16 arg4 ;
  Doors *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg3 = (uint8)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (Doors *)new Doors((char const *)arg1,(glm::vec4 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Doors__SWIG_1(char * jarg1, void * jarg2, unsigned char jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  glm::vec4 *arg2 = 0 ;
  uint8 arg3 ;
  Doors *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg3 = (uint8)jarg3; 
  result = (Doors *)new Doors((char const *)arg1,(glm::vec4 const &)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Doors__SWIG_2(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  glm::vec4 *arg2 = 0 ;
  Doors *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (Doors *)new Doors((char const *)arg1,(glm::vec4 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Doors__SWIG_3(void * jarg1) {
  void * jresult ;
  DoorsRepository::Doors *arg1 = 0 ;
  Doors *result = 0 ;
  
  arg1 = (DoorsRepository::Doors *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DoorsRepository::Doors const & is null", 0);
    return 0;
  } 
  result = (Doors *)new Doors((DoorsRepository::Doors const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_GetDisableTimer(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)(arg1)->GetDisableTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_IsDoor(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)((Doors const *)arg1)->IsDoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_IsDoorOpen(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)(arg1)->IsDoorOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_Process(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_triggered_set(void * jarg1, unsigned int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  bool arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->triggered = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_triggered_get(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool) ((arg1)->triggered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Doors_GetDoorName(void * jarg1) {
  char * jresult ;
  Doors *arg1 = (Doors *) 0 ;
  char *result = 0 ;
  
  arg1 = (Doors *)jarg1; 
  result = (char *)(arg1)->GetDoorName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Doors_GetDzSwitchID(void * jarg1) {
  int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  int result;
  
  arg1 = (Doors *)jarg1; 
  result = (int)((Doors const *)arg1)->GetDzSwitchID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Doors_GetIncline(void * jarg1) {
  int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  int result;
  
  arg1 = (Doors *)jarg1; 
  result = (int)(arg1)->GetIncline();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Doors_GetInvertState(void * jarg1) {
  int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  int result;
  
  arg1 = (Doors *)jarg1; 
  result = (int)(arg1)->GetInvertState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Doors_GetDoorID(void * jarg1) {
  unsigned char jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint8 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint8)(arg1)->GetDoorID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Doors_GetNoKeyring(void * jarg1) {
  unsigned char jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint8 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint8)(arg1)->GetNoKeyring();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Doors_GetOpenType(void * jarg1) {
  unsigned char jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint8 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint8)(arg1)->GetOpenType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Doors_GetTriggerDoorID(void * jarg1) {
  unsigned char jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint8 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint8)(arg1)->GetTriggerDoorID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Doors_GetTriggerType(void * jarg1) {
  unsigned char jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint8 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint8)(arg1)->GetTriggerType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Doors_IsLDoNDoor(void * jarg1) {
  unsigned char jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint8 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint8)(arg1)->IsLDoNDoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Doors_GetLockpick(void * jarg1) {
  unsigned short jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint16 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint16)(arg1)->GetLockpick();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Doors_GetSize(void * jarg1) {
  unsigned short jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint16 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint16)(arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_GetClientVersionMask(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint32 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint32)(arg1)->GetClientVersionMask();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_GetDoorDBID(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint32 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint32)(arg1)->GetDoorDBID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Doors_GetDoorParam(void * jarg1) {
  int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  int32 result;
  
  arg1 = (Doors *)jarg1; 
  result = (int32)(arg1)->GetDoorParam();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_GetEntityID(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint32 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint32)(arg1)->GetEntityID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_GetGuildID(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint32 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint32)(arg1)->GetGuildID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_GetKeyItem(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  uint32 result;
  
  arg1 = (Doors *)jarg1; 
  result = (uint32)(arg1)->GetKeyItem();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_CreateDatabaseEntry(void * jarg1) {
  Doors *arg1 = (Doors *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  (arg1)->CreateDatabaseEntry();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_ForceClose__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ForceClose(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_ForceClose__SWIG_1(void * jarg1, void * jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ForceClose(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_ForceOpen__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ForceOpen(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_ForceOpen__SWIG_1(void * jarg1, void * jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ForceOpen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_HandleClick(void * jarg1, void * jarg2, unsigned char jarg3) {
  Doors *arg1 = (Doors *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->HandleClick(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_Open__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Open(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_Open__SWIG_1(void * jarg1, void * jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->Open(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetDisableTimer(void * jarg1, unsigned int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  bool arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisableTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetDoorName(void * jarg1, char * jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetDoorName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetEntityID(void * jarg1, unsigned int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetEntityID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetIncline(void * jarg1, int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  int arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetIncline(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetInvertState(void * jarg1, int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  int arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetInvertState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetKeyItem(void * jarg1, unsigned int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetKeyItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetLocation(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Doors *arg1 = (Doors *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetLocation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetLockpick(void * jarg1, unsigned short jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetLockpick(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetNoKeyring(void * jarg1, unsigned char jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetNoKeyring(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetOpenState(void * jarg1, unsigned int jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  bool arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetOpenState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetOpenType(void * jarg1, unsigned char jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SetOpenType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetPosition(void * jarg1, void * jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  glm::vec4 *arg2 = 0 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->SetPosition((glm::vec4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_SetSize(void * jarg1, unsigned short jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors_ToggleState(void * jarg1, void * jarg2) {
  Doors *arg1 = (Doors *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Doors *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ToggleState(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Doors_GetX(void * jarg1) {
  float jresult ;
  Doors *arg1 = (Doors *) 0 ;
  float result;
  
  arg1 = (Doors *)jarg1; 
  result = (float)(arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Doors_GetY(void * jarg1) {
  float jresult ;
  Doors *arg1 = (Doors *) 0 ;
  float result;
  
  arg1 = (Doors *)jarg1; 
  result = (float)(arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Doors_GetZ(void * jarg1) {
  float jresult ;
  Doors *arg1 = (Doors *) 0 ;
  float result;
  
  arg1 = (Doors *)jarg1; 
  result = (float)(arg1)->GetZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Doors_GetHeading(void * jarg1) {
  float jresult ;
  Doors *arg1 = (Doors *) 0 ;
  float result;
  
  arg1 = (Doors *)jarg1; 
  result = (float)(arg1)->GetHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_HasDestinationZone(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)((Doors const *)arg1)->HasDestinationZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_IsDestinationZoneSame(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)((Doors const *)arg1)->IsDestinationZoneSame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Doors_IsDoorBlacklisted(void * jarg1) {
  unsigned int jresult ;
  Doors *arg1 = (Doors *) 0 ;
  bool result;
  
  arg1 = (Doors *)jarg1; 
  result = (bool)(arg1)->IsDoorBlacklisted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_MARKED_NPCS_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RoleAssist_get() {
  int jresult ;
  int result;
  
  result = (int)RoleAssist;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RoleTank_get() {
  int jresult ;
  int result;
  
  result = (int)RoleTank;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RolePuller_get() {
  int jresult ;
  int result;
  
  result = (int)RolePuller;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GroupIDConsumer__SWIG_0() {
  void * jresult ;
  GroupIDConsumer *result = 0 ;
  
  result = (GroupIDConsumer *)new GroupIDConsumer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GroupIDConsumer__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  GroupIDConsumer *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (GroupIDConsumer *)new GroupIDConsumer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GroupIDConsumer_GetID(void * jarg1) {
  unsigned int jresult ;
  GroupIDConsumer *arg1 = (GroupIDConsumer *) 0 ;
  uint32 result;
  
  arg1 = (GroupIDConsumer *)jarg1; 
  result = (uint32)((GroupIDConsumer const *)arg1)->GetID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GroupIDConsumer(void * jarg1) {
  GroupIDConsumer *arg1 = (GroupIDConsumer *) 0 ;
  
  arg1 = (GroupIDConsumer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Group__SWIG_0(void * jarg1) {
  void * jresult ;
  Mob *arg1 = (Mob *) 0 ;
  Group *result = 0 ;
  
  arg1 = (Mob *)jarg1; 
  result = (Group *)new Group(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Group__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  Group *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (Group *)new Group(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Group(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AddMember__SWIG_0(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->AddMember(arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AddMember__SWIG_1(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->AddMember(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AddMember__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->AddMember(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AddMember__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->AddMember(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_AddMember__SWIG_4(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddMember((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendUpdate(void * jarg1, unsigned int jarg2, void * jarg3) {
  Group *arg1 = (Group *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->SendUpdate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendLeadershipAAUpdate(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->SendLeadershipAAUpdate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_DelMemberOOZ(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->DelMemberOOZ((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_DelMember__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->DelMember(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_DelMember__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->DelMember(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DisbandGroup__SWIG_0(void * jarg1, unsigned int jarg2) {
  Group *arg1 = (Group *) 0 ;
  bool arg2 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DisbandGroup(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DisbandGroup__SWIG_1(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->DisbandGroup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetMemberList__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Group *arg1 = (Group *) 0 ;
  std::list< Mob * > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (std::list< Mob * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Mob * > & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->GetMemberList(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetMemberList__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  std::list< Mob * > *arg2 = 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (std::list< Mob * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Mob * > & is null", 0);
    return ;
  } 
  (arg1)->GetMemberList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetClientList__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Group *arg1 = (Group *) 0 ;
  std::list< Client * > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (std::list< Client * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Client * > & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->GetClientList(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetClientList__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  std::list< Client * > *arg2 = 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (std::list< Client * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Client * > & is null", 0);
    return ;
  } 
  (arg1)->GetClientList(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetBotList__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Group *arg1 = (Group *) 0 ;
  std::list< Bot * > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (std::list< Bot * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Bot * > & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->GetBotList(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetBotList__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  std::list< Bot * > *arg2 = 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (std::list< Bot * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< Bot * > & is null", 0);
    return ;
  } 
  (arg1)->GetBotList(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_IsGroupMember__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsGroupMember(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_IsGroupMember__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsGroupMember((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_Process(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_IsGroup(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  result = (bool)(arg1)->IsGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendGroupJoinOOZ(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendGroupJoinOOZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_CastGroupSpell(void * jarg1, void * jarg2, unsigned short jarg3) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->CastGroupSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SplitExp(void * jarg1, unsigned long long jarg2, void * jarg3) {
  Group *arg1 = (Group *) 0 ;
  uint64 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->SplitExp(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessage(void * jarg1, void * jarg2, unsigned char jarg3, unsigned char jarg4, char * jarg5) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  uint8 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->GroupMessage(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, unsigned int jarg14) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  uint32 arg14 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (uint32)jarg14; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GroupMessageString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->GroupMessageString(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_GetTotalGroupDamage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (uint32)(arg1)->GetTotalGroupDamage(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SplitMoney__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, void * jarg6) {
  Group *arg1 = (Group *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  Client *arg6 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (Client *)jarg6; 
  (arg1)->SplitMoney(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SplitMoney__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Group *arg1 = (Group *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->SplitMoney(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetLeader(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetLeader(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_GetLeader(void * jarg1) {
  void * jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (Mob *)(arg1)->GetLeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Group_GetLeaderName(void * jarg1) {
  const char * jresult ;
  Group *arg1 = (Group *) 0 ;
  std::string result;
  
  arg1 = (Group *)jarg1; 
  result = (arg1)->GetLeaderName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendHPManaEndPacketsTo(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendHPManaEndPacketsTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendHPPacketsFrom(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendHPPacketsFrom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendManaPacketFrom(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendManaPacketFrom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendEndurancePacketFrom(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendEndurancePacketFrom(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_UpdatePlayer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->UpdatePlayer(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_MemberZoned(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->MemberZoned(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_IsLeader__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsLeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_IsLeader__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (bool)(arg1)->IsLeader(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Group_GroupCount(void * jarg1) {
  unsigned char jresult ;
  Group *arg1 = (Group *) 0 ;
  uint8 result;
  
  arg1 = (Group *)jarg1; 
  result = (uint8)(arg1)->GroupCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_GetHighestLevel(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  uint32 result;
  
  arg1 = (Group *)jarg1; 
  result = (uint32)(arg1)->GetHighestLevel();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_GetLowestLevel(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  uint32 result;
  
  arg1 = (Group *)jarg1; 
  result = (uint32)(arg1)->GetLowestLevel();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueuePacket__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Group *arg1 = (Group *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  bool arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueuePacket__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_TeleportGroup(void * jarg1, void * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->TeleportGroup(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Group_GetAvgLevel(void * jarg1) {
  unsigned short jresult ;
  Group *arg1 = (Group *) 0 ;
  uint16 result;
  
  arg1 = (Group *)jarg1; 
  result = (uint16)(arg1)->GetAvgLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_LearnMembers(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  result = (bool)(arg1)->LearnMembers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_VerifyGroup(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->VerifyGroup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceHP__SWIG_0(void * jarg1, int jarg2, float jarg3, void * jarg4, int jarg5) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  float arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  int32 arg5 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->BalanceHP(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceHP__SWIG_1(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  float arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->BalanceHP(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceHP__SWIG_2(void * jarg1, int jarg2, float jarg3) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  float arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->BalanceHP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceHP__SWIG_3(void * jarg1, int jarg2) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->BalanceHP(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceMana__SWIG_0(void * jarg1, int jarg2, float jarg3, void * jarg4, int jarg5) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  float arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  int32 arg5 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Mob *)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->BalanceMana(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceMana__SWIG_1(void * jarg1, int jarg2, float jarg3, void * jarg4) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  float arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->BalanceMana(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceMana__SWIG_2(void * jarg1, int jarg2, float jarg3) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  float arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->BalanceMana(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_BalanceMana__SWIG_3(void * jarg1, int jarg2) {
  Group *arg1 = (Group *) 0 ;
  int32 arg2 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->BalanceMana(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_HealGroup__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, float jarg4) {
  Group *arg1 = (Group *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  float arg4 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->HealGroup(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_HealGroup__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  Group *arg1 = (Group *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->HealGroup(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetGroupAAs(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  GroupLeadershipAA_Struct *arg2 = (GroupLeadershipAA_Struct *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (GroupLeadershipAA_Struct *)jarg2; 
  (arg1)->SetGroupAAs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_GetGroupAAs(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  GroupLeadershipAA_Struct *arg2 = (GroupLeadershipAA_Struct *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (GroupLeadershipAA_Struct *)jarg2; 
  (arg1)->GetGroupAAs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UpdateGroupAAs(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->UpdateGroupAAs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SaveGroupLeaderAA(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->SaveGroupLeaderAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_MarkNPC(void * jarg1, void * jarg2, int jarg3) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  int arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->MarkNPC(arg2,arg3);
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_Group_GetNumberNeedingHealedInGroup(void * jarg1, signed char jarg2, unsigned int jarg3) {
  signed char jresult ;
  Group *arg1 = (Group *) 0 ;
  int8 arg2 ;
  bool arg3 ;
  int8 result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int8)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int8)(arg1)->GetNumberNeedingHealedInGroup(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegateMainTank__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->DelegateMainTank((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegateMainTank__SWIG_1(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DelegateMainTank((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegateMainAssist__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->DelegateMainAssist((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegateMainAssist__SWIG_1(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DelegateMainAssist((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegatePuller__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->DelegatePuller((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegatePuller__SWIG_1(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DelegatePuller((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegateMainTank__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->UnDelegateMainTank((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegateMainTank__SWIG_1(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->UnDelegateMainTank((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegateMainAssist__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->UnDelegateMainAssist((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegateMainAssist__SWIG_1(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->UnDelegateMainAssist((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegatePuller__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->UnDelegatePuller((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegatePuller__SWIG_1(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->UnDelegatePuller((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_IsNPCMarker(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->IsNPCMarker(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetGroupAssistTarget(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetGroupAssistTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetGroupTankTarget(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetGroupTankTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetGroupPullerTarget(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SetGroupPullerTarget(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_HasRole(void * jarg1, void * jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint8 arg3 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (bool)(arg1)->HasRole(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyAssistTarget(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyAssistTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyTankTarget(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyTankTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyPullerTarget(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyPullerTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_DelegateMarkNPC(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DelegateMarkNPC((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnDelegateMarkNPC(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->UnDelegateMarkNPC((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyMainTank__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->NotifyMainTank(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyMainTank__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyMainTank(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyMainAssist__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->NotifyMainAssist(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyMainAssist__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyMainAssist(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyPuller__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint8 arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->NotifyPuller(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyPuller__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyPuller(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_NotifyMarkNPC(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->NotifyMarkNPC(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_GetNPCMarkerID(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  uint32 result;
  
  arg1 = (Group *)jarg1; 
  result = (uint32)(arg1)->GetNPCMarkerID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetMainTank(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetMainTank((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetMainAssist(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetMainAssist((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetPuller(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetPuller((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Group_GetMainTankName(void * jarg1) {
  char * jresult ;
  Group *arg1 = (Group *) 0 ;
  char *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (char *)(arg1)->GetMainTankName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Group_GetMainAssistName(void * jarg1) {
  char * jresult ;
  Group *arg1 = (Group *) 0 ;
  char *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (char *)(arg1)->GetMainAssistName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Group_GetPullerName(void * jarg1) {
  char * jresult ;
  Group *arg1 = (Group *) 0 ;
  char *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (char *)(arg1)->GetPullerName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AmIMainTank(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->AmIMainTank((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AmIMainAssist(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->AmIMainAssist((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_AmIPuller(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->AmIPuller((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetNPCMarker(void * jarg1, char * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetNPCMarker((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UnMarkNPC(void * jarg1, unsigned short jarg2) {
  Group *arg1 = (Group *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->UnMarkNPC(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendMarkedNPCsToMember__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SendMarkedNPCsToMember(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SendMarkedNPCsToMember__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendMarkedNPCsToMember(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_GetLeadershipAA(void * jarg1, int jarg2) {
  int jresult ;
  Group *arg1 = (Group *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetLeadershipAA(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_ClearAllNPCMarks(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->ClearAllNPCMarks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueueHPPacketsForNPCHealthAA(void * jarg1, void * jarg2, void * jarg3) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueHPPacketsForNPCHealthAA(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueueClients__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, float jarg6) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueueClients__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueueClients__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_QueueClients__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_ChangeLeader(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->ChangeLeader(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Group_GetClientNameByIndex(void * jarg1, unsigned char jarg2) {
  char * jresult ;
  Group *arg1 = (Group *) 0 ;
  uint8 arg2 ;
  char *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (char *)(arg1)->GetClientNameByIndex(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_UpdateXTargetMarkedNPC(void * jarg1, unsigned int jarg2, void * jarg3) {
  Group *arg1 = (Group *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->UpdateXTargetMarkedNPC(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetDirtyAutoHaters(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->SetDirtyAutoHaters();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_GetXTargetAutoMgr(void * jarg1) {
  void * jresult ;
  Group *arg1 = (Group *) 0 ;
  XTargetAutoHaters *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (XTargetAutoHaters *)(arg1)->GetXTargetAutoMgr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_JoinRaidXTarget__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Group *arg1 = (Group *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  bool arg3 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Raid *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->JoinRaidXTarget(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_JoinRaidXTarget__SWIG_1(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Raid *arg2 = (Raid *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Raid *)jarg2; 
  (arg1)->JoinRaidXTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_SetGroupMentor(void * jarg1, int jarg2, char * jarg3) {
  Group *arg1 = (Group *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetGroupMentor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_ClearGroupMentor(void * jarg1) {
  Group *arg1 = (Group *) 0 ;
  
  arg1 = (Group *)jarg1; 
  (arg1)->ClearGroupMentor();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Group_GetMentorPercent(void * jarg1) {
  int jresult ;
  Group *arg1 = (Group *) 0 ;
  int result;
  
  arg1 = (Group *)jarg1; 
  result = (int)(arg1)->GetMentorPercent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_GetMentoree(void * jarg1) {
  void * jresult ;
  Group *arg1 = (Group *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (Client *)(arg1)->GetMentoree();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_DoesAnyMemberHaveExpeditionLockout__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, int jarg4) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->DoesAnyMemberHaveExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_DoesAnyMemberHaveExpeditionLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->DoesAnyMemberHaveExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_members_set(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  Mob **arg2 = (Mob **) (Mob **)0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (Mob **)jarg2; 
  {
    size_t ii;
    Mob * *b = (Mob * *) arg1->members;
    for (ii = 0; ii < (size_t)MAX_GROUP_MEMBERS; ii++) b[ii] = *((Mob * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_members_get(void * jarg1) {
  void * jresult ;
  Group *arg1 = (Group *) 0 ;
  Mob **result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (Mob **)(Mob **) ((arg1)->members);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_membername_set(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  char (*arg2)[64] = (char (*)[64]) (char (*)[64])0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (char (*)[64])jarg2; 
  {
    char (*inp)[64] = (char (*)[64])(arg2);
    char (*dest)[64] = (char (*)[64])(arg1->membername);
    size_t ii = 0;
    for (; ii < MAX_GROUP_MEMBERS; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 64; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_membername_get(void * jarg1) {
  void * jresult ;
  Group *arg1 = (Group *) 0 ;
  char (*result)[64] = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (char (*)[64])(char (*)[64]) ((arg1)->membername);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_MemberRoles_set(void * jarg1, void * jarg2) {
  Group *arg1 = (Group *) 0 ;
  uint8 *arg2 = (uint8 *) (uint8 *)0 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->MemberRoles;
    for (ii = 0; ii < (size_t)MAX_GROUP_MEMBERS; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Group_MemberRoles_get(void * jarg1) {
  void * jresult ;
  Group *arg1 = (Group *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (Group *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->MemberRoles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_disbandcheck_set(void * jarg1, unsigned int jarg2) {
  Group *arg1 = (Group *) 0 ;
  bool arg2 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disbandcheck = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_disbandcheck_get(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  result = (bool) ((arg1)->disbandcheck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Group_castspell_set(void * jarg1, unsigned int jarg2) {
  Group *arg1 = (Group *) 0 ;
  bool arg2 ;
  
  arg1 = (Group *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->castspell = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Group_castspell_get(void * jarg1) {
  unsigned int jresult ;
  Group *arg1 = (Group *) 0 ;
  bool result;
  
  arg1 = (Group *)jarg1; 
  result = (bool) ((arg1)->castspell);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  uint32 arg3 ;
  Object_Struct *arg4 = 0 ;
  EQ::ItemInstance *arg5 = (EQ::ItemInstance *) 0 ;
  bool arg6 ;
  Object *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (Object_Struct *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Object_Struct const & is null", 0);
    return 0;
  } 
  arg5 = (EQ::ItemInstance *)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (Object *)new Object(arg1,arg2,arg3,(Object_Struct const &)*arg4,(EQ::ItemInstance const *)arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_1(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  uint32 arg3 ;
  Object_Struct *arg4 = 0 ;
  EQ::ItemInstance *arg5 = (EQ::ItemInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (Object_Struct *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Object_Struct const & is null", 0);
    return 0;
  } 
  arg5 = (EQ::ItemInstance *)jarg5; 
  result = (Object *)new Object(arg1,arg2,arg3,(Object_Struct const &)*arg4,(EQ::ItemInstance const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  uint32 arg3 ;
  Object_Struct *arg4 = 0 ;
  Object *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (Object_Struct *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Object_Struct const & is null", 0);
    return 0;
  } 
  result = (Object *)new Object(arg1,arg2,arg3,(Object_Struct const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_3(void * jarg1, const char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  Object *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (Object *)new Object((EQ::ItemInstance const *)arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_4(void * jarg1, void * jarg2) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  Object *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (Object *)new Object(arg1,(EQ::ItemInstance const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_5(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  uint32 arg6 ;
  bool arg7 ;
  Object *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = jarg7 ? true : false; 
  result = (Object *)new Object((EQ::ItemInstance const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_6(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned int jarg6) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  uint32 arg6 ;
  Object *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (Object *)new Object((EQ::ItemInstance const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_7(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Object *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Object *)new Object((EQ::ItemInstance const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_8(const char * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned char jarg6, unsigned int jarg7) {
  void * jresult ;
  std::string *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  uint8 arg6 ;
  uint32 arg7 ;
  Object *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (Object *)new Object((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Object__SWIG_9(const char * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, unsigned char jarg6) {
  void * jresult ;
  std::string *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  uint8 arg6 ;
  Object *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (uint8)jarg6; 
  result = (Object *)new Object((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Object(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_Process(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_IsGroundSpawn(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)(arg1)->IsGroundSpawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_HandleClick(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  Client *arg2 = (Client *) 0 ;
  ClickObject_Struct *arg3 = (ClickObject_Struct *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (ClickObject_Struct *)jarg3; 
  result = (bool)(arg1)->HandleClick(arg2,(ClickObject_Struct const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Close(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Close();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Delete__SWIG_0(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Delete(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Delete__SWIG_1(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Delete();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_HandleCombine(void * jarg1, void * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  NewCombine_Struct *arg2 = (NewCombine_Struct *) 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (NewCombine_Struct *)jarg2; 
  arg3 = (Object *)jarg3; 
  Object::HandleCombine(arg1,(NewCombine_Struct const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_HandleAugmentation(void * jarg1, void * jarg2, void * jarg3) {
  Client *arg1 = (Client *) 0 ;
  AugmentItem_Struct *arg2 = (AugmentItem_Struct *) 0 ;
  Object *arg3 = (Object *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (AugmentItem_Struct *)jarg2; 
  arg3 = (Object *)jarg3; 
  Object::HandleAugmentation(arg1,(AugmentItem_Struct const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_HandleAutoCombine(void * jarg1, void * jarg2) {
  Client *arg1 = (Client *) 0 ;
  RecipeAutoCombine_Struct *arg2 = (RecipeAutoCombine_Struct *) 0 ;
  
  arg1 = (Client *)jarg1; 
  arg2 = (RecipeAutoCombine_Struct *)jarg2; 
  Object::HandleAutoCombine(arg1,(RecipeAutoCombine_Struct const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_CreateSpawnPacket(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->CreateSpawnPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_CreateDeSpawnPacket(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->CreateDeSpawnPacket(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Depop(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_Repop(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->Repop();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_IsFixZEnabled(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)((Object const *)arg1)->IsFixZEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetFixZ(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  bool arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFixZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_StartDecay(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->StartDecay();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetItem(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (EQ::ItemInstance *)(arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_PutItem(void * jarg1, unsigned char jarg2, void * jarg3) {
  Object *arg1 = (Object *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  (arg1)->PutItem(arg2,(EQ::ItemInstance const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_DeleteItem(void * jarg1, unsigned char jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->DeleteItem(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_PopItem(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (EQ::ItemInstance *)(arg1)->PopItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_IsObject(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)((Object const *)arg1)->IsObject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_Save(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)(arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Object_VarSave(void * jarg1) {
  unsigned short jresult ;
  Object *arg1 = (Object *) 0 ;
  uint16 result;
  
  arg1 = (Object *)jarg1; 
  result = (uint16)(arg1)->VarSave();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetID(void * jarg1, unsigned short jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_ClearUser(void * jarg1) {
  Object *arg1 = (Object *) 0 ;
  
  arg1 = (Object *)jarg1; 
  (arg1)->ClearUser();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_GetDBID(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  uint32 result;
  
  arg1 = (Object *)jarg1; 
  result = (uint32)(arg1)->GetDBID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_GetType(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  uint32 result;
  
  arg1 = (Object *)jarg1; 
  result = (uint32)(arg1)->GetType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetType(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_GetIcon(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  uint32 result;
  
  arg1 = (Object *)jarg1; 
  result = (uint32)(arg1)->GetIcon();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetIcon(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetIcon(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_GetItemID(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  uint32 result;
  
  arg1 = (Object *)jarg1; 
  result = (uint32)(arg1)->GetItemID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetItemID(void * jarg1, unsigned int jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetItemID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_GetObjectData(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  Object_Struct *arg2 = (Object_Struct *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (Object_Struct *)jarg2; 
  (arg1)->GetObjectData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetObjectData(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  Object_Struct *arg2 = (Object_Struct *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (Object_Struct *)jarg2; 
  (arg1)->SetObjectData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_GetLocation(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Object *arg1 = (Object *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  (arg1)->GetLocation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetLocation(void * jarg1, float jarg2, float jarg3, float jarg4) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetLocation(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_GetHeading(void * jarg1, void * jarg2) {
  Object *arg1 = (Object *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float *)jarg2; 
  (arg1)->GetHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetHeading(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHeading(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetX(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetY(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetZ(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetHeadingData(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetHeadingData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetX(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetY(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetZ(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetTiltX(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTiltX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetTiltY(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTiltY(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetTiltX(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetTiltX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetTiltY(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetTiltY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetModelName(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetModelName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Object_GetModelName(void * jarg1) {
  char * jresult ;
  Object *arg1 = (Object *) 0 ;
  char *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  result = (char *)(arg1)->GetModelName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Object_GetSize(void * jarg1) {
  float jresult ;
  Object *arg1 = (Object *) 0 ;
  float result;
  
  arg1 = (Object *)jarg1; 
  result = (float)(arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetSize(void * jarg1, float jarg2) {
  Object *arg1 = (Object *) 0 ;
  float arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Object_GetSolidType(void * jarg1) {
  unsigned short jresult ;
  Object *arg1 = (Object *) 0 ;
  uint16 result;
  
  arg1 = (Object *)jarg1; 
  result = (uint16)(arg1)->GetSolidType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetSolidType(void * jarg1, unsigned short jarg2) {
  Object *arg1 = (Object *) 0 ;
  uint16 arg2 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->SetSolidType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetDisplayName(void * jarg1, char * jarg2) {
  Object *arg1 = (Object *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Object *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetDisplayName((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Object_GetDisplayName(void * jarg1) {
  char * jresult ;
  Object *arg1 = (Object *) 0 ;
  char *result = 0 ;
  
  arg1 = (Object *)jarg1; 
  result = (char *)((Object const *)arg1)->GetDisplayName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_ClearEntityVariables(void * jarg1) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  result = (bool)(arg1)->ClearEntityVariables();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_DeleteEntityVariable(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->DeleteEntityVariable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Object_GetEntityVariable(void * jarg1, const char * jarg2) {
  const char * jresult ;
  Object *arg1 = (Object *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetEntityVariable(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Object_GetEntityVariables(void * jarg1) {
  void * jresult ;
  Object *arg1 = (Object *) 0 ;
  std::vector< std::string > result;
  
  arg1 = (Object *)jarg1; 
  result = (arg1)->GetEntityVariables();
  jresult = new std::vector< std::string >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Object_SetEntityVariable(void * jarg1, const char * jarg2, const char * jarg3) {
  Object *arg1 = (Object *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SetEntityVariable(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Object_EntityVariableExists(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  Object *arg1 = (Object *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (Object *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->EntityVariableExists(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindNextMarkerSlot_get() {
  int jresult ;
  int result;
  
  result = (int)FindNextMarkerSlot;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindNextAssisterSlot_get() {
  int jresult ;
  int result;
  
  result = (int)FindNextAssisterSlot;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RaidDelegateMainAssist_get() {
  int jresult ;
  int result;
  
  result = (int)RaidDelegateMainAssist;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RaidDelegateMainMarker_get() {
  int jresult ;
  int result;
  
  result = (int)RaidDelegateMainMarker;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearDelegate_get() {
  int jresult ;
  int result;
  
  result = (int)ClearDelegate;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetDelegate_get() {
  int jresult ;
  int result;
  
  result = (int)SetDelegate;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindNextRaidMainMarkerSlot_get() {
  int jresult ;
  int result;
  
  result = (int)FindNextRaidMainMarkerSlot;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindNextRaidMainAssisterSlot_get() {
  int jresult ;
  int result;
  
  result = (int)FindNextRaidMainAssisterSlot;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DELEGATE_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)DELEGATE_OFF;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DELEGATE_ON_get() {
  int jresult ;
  int result;
  
  result = (int)DELEGATE_ON;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_Marked_NPC_entity_id_set(void * jarg1, unsigned int jarg2) {
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->entity_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_Marked_NPC_entity_id_get(void * jarg1) {
  unsigned int jresult ;
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  uint32 result;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  result = (uint32) ((arg1)->entity_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_Marked_NPC_zone_id_set(void * jarg1, unsigned int jarg2) {
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->zone_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_Marked_NPC_zone_id_get(void * jarg1) {
  unsigned int jresult ;
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  uint32 result;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  result = (uint32) ((arg1)->zone_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_Marked_NPC_instance_id_set(void * jarg1, unsigned int jarg2) {
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->instance_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_Marked_NPC_instance_id_get(void * jarg1) {
  unsigned int jresult ;
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  uint32 result;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  result = (uint32) ((arg1)->instance_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Raid_Marked_NPC() {
  void * jresult ;
  Raid_Marked_NPC *result = 0 ;
  
  result = (Raid_Marked_NPC *)new Raid_Marked_NPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Raid_Marked_NPC(void * jarg1) {
  Raid_Marked_NPC *arg1 = (Raid_Marked_NPC *) 0 ;
  
  arg1 = (Raid_Marked_NPC *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MAX_RAID_GROUPS_get() {
  unsigned char jresult ;
  uint8_t result;
  
  result = (uint8_t)MAX_RAID_GROUPS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MAX_RAID_MEMBERS_get() {
  unsigned char jresult ;
  uint8_t result;
  
  result = (uint8_t)MAX_RAID_MEMBERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RAID_GROUPLESS_get() {
  unsigned int jresult ;
  uint32 result;
  
  result = (uint32)(uint32)RAID_GROUPLESS;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_NO_RAID_MAIN_ASSISTERS_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_NO_RAID_MAIN_MARKERS_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_member_name_set(void * jarg1, char * jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->member_name, (const char *)arg2, 64-1);
      arg1->member_name[64-1] = 0;
    } else {
      arg1->member_name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RaidMember_member_name_get(void * jarg1) {
  char * jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  char *result = 0 ;
  
  arg1 = (RaidMember *)jarg1; 
  result = (char *)(char *) ((arg1)->member_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_member_set(void * jarg1, void * jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (Client *)jarg2; 
  if (arg1) (arg1)->member = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidMember_member_get(void * jarg1) {
  void * jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  Client *result = 0 ;
  
  arg1 = (RaidMember *)jarg1; 
  result = (Client *) ((arg1)->member);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_group_number_set(void * jarg1, unsigned int jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint32 arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->group_number = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidMember_group_number_get(void * jarg1) {
  unsigned int jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint32 result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (uint32) ((arg1)->group_number);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember__class_set(void * jarg1, unsigned char jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->_class = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_RaidMember__class_get(void * jarg1) {
  unsigned char jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (uint8) ((arg1)->_class);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_level_set(void * jarg1, unsigned char jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_RaidMember_level_get(void * jarg1) {
  unsigned char jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (uint8) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_note_set(void * jarg1, const char * jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (RaidMember *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_RaidMember_note_get(void * jarg1) {
  const char * jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (RaidMember *)jarg1; 
  result = (std::string *) & ((arg1)->note);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_is_group_leader_set(void * jarg1, unsigned int jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_group_leader = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidMember_is_group_leader_get(void * jarg1) {
  unsigned int jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (bool) ((arg1)->is_group_leader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_is_raid_leader_set(void * jarg1, unsigned int jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_raid_leader = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidMember_is_raid_leader_get(void * jarg1) {
  unsigned int jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (bool) ((arg1)->is_raid_leader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_is_looter_set(void * jarg1, unsigned int jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_looter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidMember_is_looter_get(void * jarg1) {
  unsigned int jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (bool) ((arg1)->is_looter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_main_marker_set(void * jarg1, unsigned char jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->main_marker = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_RaidMember_main_marker_get(void * jarg1) {
  unsigned char jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (uint8) ((arg1)->main_marker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_main_assister_set(void * jarg1, unsigned char jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->main_assister = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_RaidMember_main_assister_get(void * jarg1) {
  unsigned char jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  uint8 result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (uint8) ((arg1)->main_assister);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_is_bot_set(void * jarg1, unsigned int jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_bot = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidMember_is_bot_get(void * jarg1) {
  unsigned int jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (bool) ((arg1)->is_bot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidMember_is_raid_main_assist_one_set(void * jarg1, unsigned int jarg2) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool arg2 ;
  
  arg1 = (RaidMember *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_raid_main_assist_one = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidMember_is_raid_main_assist_one_get(void * jarg1) {
  unsigned int jresult ;
  RaidMember *arg1 = (RaidMember *) 0 ;
  bool result;
  
  arg1 = (RaidMember *)jarg1; 
  result = (bool) ((arg1)->is_raid_main_assist_one);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaidMember() {
  void * jresult ;
  RaidMember *result = 0 ;
  
  result = (RaidMember *)new RaidMember();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RaidMember(void * jarg1) {
  RaidMember *arg1 = (RaidMember *) 0 ;
  
  arg1 = (RaidMember *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupMentor_name_set(void * jarg1, const char * jarg2) {
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (GroupMentor *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_GroupMentor_name_get(void * jarg1) {
  const char * jresult ;
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (GroupMentor *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupMentor_mentoree_set(void * jarg1, void * jarg2) {
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (GroupMentor *)jarg1; 
  arg2 = (Client *)jarg2; 
  if (arg1) (arg1)->mentoree = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupMentor_mentoree_get(void * jarg1) {
  void * jresult ;
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  Client *result = 0 ;
  
  arg1 = (GroupMentor *)jarg1; 
  result = (Client *) ((arg1)->mentoree);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupMentor_mentor_percent_set(void * jarg1, int jarg2) {
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  int arg2 ;
  
  arg1 = (GroupMentor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mentor_percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GroupMentor_mentor_percent_get(void * jarg1) {
  int jresult ;
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  int result;
  
  arg1 = (GroupMentor *)jarg1; 
  result = (int) ((arg1)->mentor_percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GroupMentor() {
  void * jresult ;
  GroupMentor *result = 0 ;
  
  result = (GroupMentor *)new GroupMentor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GroupMentor(void * jarg1) {
  GroupMentor *arg1 = (GroupMentor *) 0 ;
  
  arg1 = (GroupMentor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Raid__SWIG_0(void * jarg1) {
  void * jresult ;
  Client *arg1 = (Client *) 0 ;
  Raid *result = 0 ;
  
  arg1 = (Client *)jarg1; 
  result = (Raid *)new Raid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Raid__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  uint32 arg1 ;
  Raid *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  result = (Raid *)new Raid(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Raid(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetLeader(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SetLeader(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetLeader(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Client *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (Client *)(arg1)->GetLeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Raid_GetLeaderName(void * jarg1) {
  const char * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  std::string result;
  
  arg1 = (Raid *)jarg1; 
  result = (arg1)->GetLeaderName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsLeader__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->IsLeader(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsLeader__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsLeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetRaidLeader(void * jarg1, char * jarg2, char * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetRaidLeader((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_Process(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddMember__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddMember(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddMember__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddMember(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddMember__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddMember(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddMember__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddMember(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddMember__SWIG_4(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->AddMember(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddBot__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  (arg1)->AddBot(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddBot__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->AddBot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddBot__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddBot(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddBot__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Bot *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AddBot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddBot__SWIG_4(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Bot *arg2 = (Bot *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Bot *)jarg2; 
  (arg1)->AddBot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidGroupSay__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned char jarg4, unsigned char jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->RaidGroupSay((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidSay__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned char jarg4, unsigned char jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->RaidSay((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsEngaged(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  result = (bool)(arg1)->IsEngaged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetRaidMainAssistOne(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (Mob *)(arg1)->GetRaidMainAssistOne();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RemoveMember(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveMember((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_DisbandRaid(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->DisbandRaid();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_MoveMember(void * jarg1, char * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->MoveMember((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetGroupLeader__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetGroupLeader((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetGroupLeader__SWIG_1(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetGroupLeader((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetGroupLeader(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetGroupLeader(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsGroupLeader__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsGroupLeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsGroupLeader__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->IsGroupLeader(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsRaidMember__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsRaidMember((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsRaidMember__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->IsRaidMember(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateLevel(void * jarg1, char * jarg2, int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UpdateLevel((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetNewRaidLeader(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetNewRaidLeader(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsAssister(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsAssister((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsMarker(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->IsMarker((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_EmptyRaidMembers(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->EmptyRaidMembers();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetFreeGroup(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  result = (uint32)(arg1)->GetFreeGroup();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Raid_GroupCount(void * jarg1, unsigned int jarg2) {
  unsigned char jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  uint8 result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint8)(arg1)->GroupCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Raid_RaidCount(void * jarg1) {
  unsigned char jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint8 result;
  
  arg1 = (Raid *)jarg1; 
  result = (uint8)(arg1)->RaidCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetHighestLevel(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  result = (uint32)(arg1)->GetHighestLevel();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetLowestLevel(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  result = (uint32)(arg1)->GetLowestLevel();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetGroup__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint32)(arg1)->GetGroup((char const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetGroup__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (uint32)(arg1)->GetGroup(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Raid_GetAvgLevel(void * jarg1) {
  unsigned short jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint16 result;
  
  arg1 = (Raid *)jarg1; 
  result = (uint16)(arg1)->GetAvgLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetLootType(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  result = (uint32)(arg1)->GetLootType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_ChangeLootType(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ChangeLootType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_AddRaidLooter(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddRaidLooter((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RemoveRaidLooter(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveRaidLooter((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetRaidMOTD(void * jarg1, const char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Raid *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetRaidMOTD((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetPlayerIndex__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint32)(arg1)->GetPlayerIndex((char const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetPlayerIndex__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (uint32)(arg1)->GetPlayerIndex(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetClientByIndex(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint16 arg2 ;
  Client *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (Client *)(arg1)->GetClientByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Raid_GetClientNameByIndex(void * jarg1, unsigned char jarg2) {
  char * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint8 arg2 ;
  char *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (char *)(arg1)->GetClientNameByIndex(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_LockRaid(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  bool arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->LockRaid(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_IsLocked(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  result = (bool)(arg1)->IsLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13, unsigned int jarg14) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  uint32 arg14 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  arg14 = (uint32)jarg14; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13,arg14);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12, char * jarg13) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  char *arg13 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  arg13 = (char *)jarg13; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12,(char const *)arg13);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, char * jarg12) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  char *arg12 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (char *)jarg12; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,(char const *)arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_4(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_5(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_6(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6, char * jarg7) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_8(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, char * jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMessageString__SWIG_9(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->RaidMessageString(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_CastGroupSpell(void * jarg1, void * jarg2, unsigned short jarg3, unsigned int jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint16 arg3 ;
  uint32 arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->CastGroupSpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SplitExp(void * jarg1, unsigned long long jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  uint64 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint64)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->SplitExp(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_GetTotalRaidDamage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  result = (uint32)(arg1)->GetTotalRaidDamage(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceHP__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, float jarg4, void * jarg5, int jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  int32 arg6 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Mob *)jarg5; 
  arg6 = (int32)jarg6; 
  (arg1)->BalanceHP(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceHP__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, float jarg4, void * jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Mob *)jarg5; 
  (arg1)->BalanceHP(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceHP__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3, float jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->BalanceHP(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceHP__SWIG_3(void * jarg1, int jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->BalanceHP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceMana__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3, float jarg4, void * jarg5, int jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  int32 arg6 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Mob *)jarg5; 
  arg6 = (int32)jarg6; 
  (arg1)->BalanceMana(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceMana__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, float jarg4, void * jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  Mob *arg5 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Mob *)jarg5; 
  (arg1)->BalanceMana(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceMana__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3, float jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->BalanceMana(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_BalanceMana__SWIG_3(void * jarg1, int jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  int32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->BalanceMana(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_HealGroup__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  uint32 arg4 ;
  float arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->HealGroup(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_HealGroup__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  uint32 arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->HealGroup(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SplitMoney__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, void * jarg7) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  Client *arg7 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (Client *)jarg7; 
  (arg1)->SplitMoney(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SplitMoney__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->SplitMoney(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_TeleportGroup(void * jarg1, void * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7, float jarg8, unsigned int jarg9) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  uint32 arg9 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (uint32)jarg9; 
  (arg1)->TeleportGroup(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_TeleportRaid(void * jarg1, void * jarg2, unsigned int jarg3, unsigned short jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->TeleportRaid(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetRaidDetails(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SetRaidDetails();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_GetRaidDetails(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->GetRaidDetails();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SaveRaidMOTD(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SaveRaidMOTD();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_LearnMembers(void * jarg1) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  result = (bool)(arg1)->LearnMembers();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_VerifyRaid(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->VerifyRaid();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_MemberZoned(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->MemberZoned(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendHPManaEndPacketsTo(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendHPManaEndPacketsTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendHPManaEndPacketsFrom(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendHPManaEndPacketsFrom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendManaPacketFrom(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendManaPacketFrom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendEndurancePacketFrom(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->SendEndurancePacketFrom(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidSay__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4, unsigned char jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->RaidSay((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidGroupSay__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4, unsigned char jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->RaidGroupSay((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SaveRaidNote(void * jarg1, const char * jarg2, const char * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (Raid *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->SaveRaidNote(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetMembersWithNotes(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  SwigValueWrapper< std::vector< RaidMember > > result;
  
  arg1 = (Raid *)jarg1; 
  result = (arg1)->GetMembersWithNotes();
  jresult = new std::vector< RaidMember >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_DelegateAbilityAssist(void * jarg1, void * jarg2, char * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->DelegateAbilityAssist(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_DelegateAbilityMark(void * jarg1, void * jarg2, char * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->DelegateAbilityMark(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidMarkNPC(void * jarg1, void * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->RaidMarkNPC(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateXTargetType__SWIG_0(void * jarg1, int jarg2, void * jarg3, char * jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  XTargetType arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (XTargetType)jarg2; 
  arg3 = (Mob *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->UpdateXTargetType(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateXTargetType__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  XTargetType arg2 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (XTargetType)jarg2; 
  arg3 = (Mob *)jarg3; 
  (arg1)->UpdateXTargetType(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Raid_FindNextRaidDelegateSlot(void * jarg1, int jarg2) {
  int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->FindNextRaidDelegateSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateXtargetMarkedNPC(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->UpdateXtargetMarkedNPC();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RaidClearNPCMarks(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->RaidClearNPCMarks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_RemoveRaidDelegates(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RemoveRaidDelegates((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateRaidXTargets(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->UpdateRaidXTargets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidCreate(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendRaidCreate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidAdd(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendRaidAdd((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidAddAll(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendRaidAddAll((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidRemove(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendRaidRemove((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidRemoveAll(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendRaidRemoveAll((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidDisband(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendRaidDisband(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidDisbandAll(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidDisbandAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMove(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendRaidMove((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMoveAll(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendRaidMoveAll((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendBulkRaid(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendBulkRaid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidNotes(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidNotes();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidNotesToWorld(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidNotesToWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRemoveRaidXTargets(void * jarg1, int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  XTargetType arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (XTargetType)jarg2; 
  (arg1)->SendRemoveRaidXTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRemoveAllRaidXTargets__SWIG_0(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRemoveAllRaidXTargets();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRemoveAllRaidXTargets__SWIG_1(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendRemoveAllRaidXTargets((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidAssistTarget(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidAssistTarget();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendAssistTarget(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendAssistTarget(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_GroupUpdate__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->GroupUpdate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_GroupUpdate__SWIG_1(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->GroupUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendGroupUpdate(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendGroupUpdate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendGroupDisband(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendGroupDisband(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidLock(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidLock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidUnlock(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidUnlock();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidLockTo(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendRaidLockTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidUnlockTo(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendRaidUnlockTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidGroupAdd(void * jarg1, char * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendRaidGroupAdd((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidGroupRemove(void * jarg1, char * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendRaidGroupRemove((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendMakeLeaderPacket(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendMakeLeaderPacket((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendMakeLeaderPacketTo(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendMakeLeaderPacketTo((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendMakeGroupLeaderPacketAll(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendMakeGroupLeaderPacketAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendMakeGroupLeaderPacket(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendMakeGroupLeaderPacket((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendMakeGroupLeaderPacketTo(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendMakeGroupLeaderPacketTo((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMOTD__SWIG_0(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendRaidMOTD(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMOTD__SWIG_1(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidMOTD();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMOTDToWorld(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendRaidMOTDToWorld();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidAssisterTo(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendRaidAssisterTo((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidAssister(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendRaidAssister((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMarkerTo(void * jarg1, char * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->SendRaidMarkerTo((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendRaidMarker(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SendRaidMarker((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendMarkTargets(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SendMarkTargets(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueuePacket__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  bool arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueuePacket__SWIG_1(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  (arg1)->QueuePacket((EQApplicationPacket const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateGroupAAs(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->UpdateGroupAAs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SaveGroupLeaderAA(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SaveGroupLeaderAA(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_UpdateRaidAAs(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->UpdateRaidAAs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SaveRaidLeaderAA(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SaveRaidLeaderAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendGroupLeadershipAA__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendGroupLeadershipAA(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendGroupLeadershipAA__SWIG_1(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendGroupLeadershipAA(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SendAllRaidLeadershipAA(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SendAllRaidLeadershipAA();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_LoadLeadership(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->LoadLeadership();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Raid_GetLeadershipAA__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  int arg2 ;
  uint32 arg3 ;
  int result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int)(arg1)->GetLeadershipAA(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Raid_GetLeadershipAA__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetLeadershipAA(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetGroupAAs(void * jarg1, unsigned int jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  GroupLeadershipAA_Struct *arg3 = (GroupLeadershipAA_Struct *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (GroupLeadershipAA_Struct *)jarg3; 
  (arg1)->SetGroupAAs(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetRaidAAs(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  RaidLeadershipAA_Struct *arg2 = (RaidLeadershipAA_Struct *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (RaidLeadershipAA_Struct *)jarg2; 
  (arg1)->SetRaidAAs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetGroupMentor(void * jarg1, unsigned int jarg2, int jarg3, char * jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SetGroupMentor(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_ClearGroupMentor(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearGroupMentor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_CheckGroupMentor(void * jarg1, unsigned int jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->CheckGroupMentor(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Raid_GetMentorPercent(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetMentorPercent(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetMentoree(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  Client *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Client *)(arg1)->GetMentoree(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_SetDirtyAutoHaters(void * jarg1) {
  Raid *arg1 = (Raid *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  (arg1)->SetDirtyAutoHaters();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetXTargetAutoMgr(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  XTargetAutoHaters *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (XTargetAutoHaters *)(arg1)->GetXTargetAutoMgr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueueClients__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, float jarg6, unsigned int jarg7) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  bool arg7 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueueClients__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, float jarg6) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (float)jarg6; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueueClients__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueueClients__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  bool arg4 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_QueueClients__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  EQApplicationPacket *arg3 = (EQApplicationPacket *) 0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (EQApplicationPacket *)jarg3; 
  (arg1)->QueueClients(arg2,(EQApplicationPacket const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3, int jarg4) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->DoesAnyMemberHaveExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Raid_DoesAnyMemberHaveExpeditionLockout__SWIG_1(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  Raid *arg1 = (Raid *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (Raid *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->DoesAnyMemberHaveExpeditionLockout((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetMembers(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  SwigValueWrapper< std::vector< RaidMember > > result;
  
  arg1 = (Raid *)jarg1; 
  result = ((Raid const *)arg1)->GetMembers();
  jresult = new std::vector< RaidMember >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetRaidGroupMembers(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< RaidMember > > result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetRaidGroupMembers(arg2);
  jresult = new std::vector< RaidMember >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetRaidGroupBotMembers(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetRaidGroupBotMembers(arg2);
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetRaidBotMembers__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetRaidBotMembers(arg2);
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_GetRaidBotMembers__SWIG_1(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  SwigValueWrapper< std::vector< Bot * > > result;
  
  arg1 = (Raid *)jarg1; 
  result = (arg1)->GetRaidBotMembers();
  jresult = new std::vector< Bot * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_HandleBotGroupDisband__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->HandleBotGroupDisband(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_HandleBotGroupDisband__SWIG_1(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->HandleBotGroupDisband(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_HandleOfflineBots(void * jarg1, unsigned int jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->HandleOfflineBots(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_members_set(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  RaidMember *arg2 = (RaidMember *) (RaidMember *)0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (RaidMember *)jarg2; 
  {
    size_t ii;
    RaidMember *b = (RaidMember *) arg1->members;
    for (ii = 0; ii < (size_t)MAX_RAID_MEMBERS; ii++) b[ii] = *((RaidMember *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_members_get(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  RaidMember *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (RaidMember *)(RaidMember *) ((arg1)->members);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_leadername_set(void * jarg1, char * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->leadername, (const char *)arg2, 64-1);
      arg1->leadername[64-1] = 0;
    } else {
      arg1->leadername[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Raid_leadername_get(void * jarg1) {
  char * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (char *)(char *) ((arg1)->leadername);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_main_assister_pcs_set(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char (*arg2)[64] = (char (*)[64]) (char (*)[64])0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char (*)[64])jarg2; 
  {
    char (*inp)[64] = (char (*)[64])(arg2);
    char (*dest)[64] = (char (*)[64])(arg1->main_assister_pcs);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 64; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_main_assister_pcs_get(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char (*result)[64] = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (char (*)[64])(char (*)[64]) ((arg1)->main_assister_pcs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_main_marker_pcs_set(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  char (*arg2)[64] = (char (*)[64]) (char (*)[64])0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (char (*)[64])jarg2; 
  {
    char (*inp)[64] = (char (*)[64])(arg2);
    char (*dest)[64] = (char (*)[64])(arg1->main_marker_pcs);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 64; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_main_marker_pcs_get(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  char (*result)[64] = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (char (*)[64])(char (*)[64]) ((arg1)->main_marker_pcs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Raid_marked_npcs_set(void * jarg1, void * jarg2) {
  Raid *arg1 = (Raid *) 0 ;
  Raid_Marked_NPC *arg2 = (Raid_Marked_NPC *) (Raid_Marked_NPC *)0 ;
  
  arg1 = (Raid *)jarg1; 
  arg2 = (Raid_Marked_NPC *)jarg2; 
  {
    size_t ii;
    Raid_Marked_NPC *b = (Raid_Marked_NPC *) arg1->marked_npcs;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Raid_Marked_NPC *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Raid_marked_npcs_get(void * jarg1) {
  void * jresult ;
  Raid *arg1 = (Raid *) 0 ;
  Raid_Marked_NPC *result = 0 ;
  
  arg1 = (Raid *)jarg1; 
  result = (Raid_Marked_NPC *)(Raid_Marked_NPC *) ((arg1)->marked_npcs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TRAP_NPC_TYPE_get() {
  int jresult ;
  int result;
  
  result = (int)(1586);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Trap() {
  void * jresult ;
  Trap *result = 0 ;
  
  result = (Trap *)new Trap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Trap(void * jarg1) {
  Trap *arg1 = (Trap *) 0 ;
  
  arg1 = (Trap *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_Process(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  bool result;
  
  arg1 = (Trap *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_IsTrap(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  bool result;
  
  arg1 = (Trap *)jarg1; 
  result = (bool)((Trap const *)arg1)->IsTrap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_Trigger(void * jarg1, void * jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->Trigger(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Trap_GetHiddenTrigger(void * jarg1) {
  void * jresult ;
  Trap *arg1 = (Trap *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (Trap *)jarg1; 
  result = (NPC *)(arg1)->GetHiddenTrigger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_SetHiddenTrigger(void * jarg1, void * jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->SetHiddenTrigger(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_CreateHiddenTrigger(void * jarg1) {
  Trap *arg1 = (Trap *) 0 ;
  
  arg1 = (Trap *)jarg1; 
  (arg1)->CreateHiddenTrigger();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_DestroyHiddenTrigger(void * jarg1) {
  Trap *arg1 = (Trap *) 0 ;
  
  arg1 = (Trap *)jarg1; 
  (arg1)->DestroyHiddenTrigger();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_UpdateTrap__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Trap *arg1 = (Trap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->UpdateTrap(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_UpdateTrap__SWIG_1(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  bool arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->UpdateTrap(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_UpdateTrap__SWIG_2(void * jarg1) {
  Trap *arg1 = (Trap *) 0 ;
  
  arg1 = (Trap *)jarg1; 
  (arg1)->UpdateTrap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_trap_id_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->trap_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_trap_id_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint32) ((arg1)->trap_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_db_id_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->db_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_db_id_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint32) ((arg1)->db_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_maxzdiff_set(void * jarg1, float jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  float arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxzdiff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Trap_maxzdiff_get(void * jarg1) {
  float jresult ;
  Trap *arg1 = (Trap *) 0 ;
  float result;
  
  arg1 = (Trap *)jarg1; 
  result = (float) ((arg1)->maxzdiff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_radius_set(void * jarg1, float jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  float arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Trap_radius_get(void * jarg1) {
  float jresult ;
  Trap *arg1 = (Trap *) 0 ;
  float result;
  
  arg1 = (Trap *)jarg1; 
  result = (float) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_chance_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_chance_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_effect_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->effect = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_effect_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->effect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_effectvalue_set(void * jarg1, int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  int32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->effectvalue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trap_effectvalue_get(void * jarg1) {
  int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  int32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (int32) ((arg1)->effectvalue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_effectvalue2_set(void * jarg1, int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  int32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->effectvalue2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Trap_effectvalue2_get(void * jarg1) {
  int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  int32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (int32) ((arg1)->effectvalue2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_skill_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->skill = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_skill_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->skill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_level_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_level_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_detected_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  bool arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->detected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_detected_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  bool result;
  
  arg1 = (Trap *)jarg1; 
  result = (bool) ((arg1)->detected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_disarmed_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  bool arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->disarmed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_disarmed_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  bool result;
  
  arg1 = (Trap *)jarg1; 
  result = (bool) ((arg1)->disarmed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_respawn_time_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->respawn_time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_respawn_time_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint32) ((arg1)->respawn_time);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_respawn_var_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->respawn_var = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_respawn_var_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint32) ((arg1)->respawn_var);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_triggered_number_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->triggered_number = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_triggered_number_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->triggered_number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_times_triggered_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->times_triggered = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_times_triggered_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->times_triggered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_group_set(void * jarg1, unsigned char jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->group = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Trap_group_get(void * jarg1) {
  unsigned char jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint8 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint8) ((arg1)->group);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_despawn_when_triggered_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  bool arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->despawn_when_triggered = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_despawn_when_triggered_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  bool result;
  
  arg1 = (Trap *)jarg1; 
  result = (bool) ((arg1)->despawn_when_triggered);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_charid_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->charid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_charid_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  uint32 result;
  
  arg1 = (Trap *)jarg1; 
  result = (uint32) ((arg1)->charid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_undetectable_set(void * jarg1, unsigned int jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  bool arg2 ;
  
  arg1 = (Trap *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->undetectable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Trap_undetectable_get(void * jarg1) {
  unsigned int jresult ;
  Trap *arg1 = (Trap *) 0 ;
  bool result;
  
  arg1 = (Trap *)jarg1; 
  result = (bool) ((arg1)->undetectable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Trap_message_set(void * jarg1, const char * jarg2) {
  Trap *arg1 = (Trap *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Trap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->message = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Trap_message_get(void * jarg1) {
  const char * jresult ;
  Trap *arg1 = (Trap *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Trap *)jarg1; 
  result = (std::string *) & ((arg1)->message);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EXPModifier_aa_modifier_set(void * jarg1, float jarg2) {
  EXPModifier *arg1 = (EXPModifier *) 0 ;
  float arg2 ;
  
  arg1 = (EXPModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aa_modifier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EXPModifier_aa_modifier_get(void * jarg1) {
  float jresult ;
  EXPModifier *arg1 = (EXPModifier *) 0 ;
  float result;
  
  arg1 = (EXPModifier *)jarg1; 
  result = (float) ((arg1)->aa_modifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EXPModifier_exp_modifier_set(void * jarg1, float jarg2) {
  EXPModifier *arg1 = (EXPModifier *) 0 ;
  float arg2 ;
  
  arg1 = (EXPModifier *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->exp_modifier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EXPModifier_exp_modifier_get(void * jarg1) {
  float jresult ;
  EXPModifier *arg1 = (EXPModifier *) 0 ;
  float result;
  
  arg1 = (EXPModifier *)jarg1; 
  result = (float) ((arg1)->exp_modifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EXPModifier() {
  void * jresult ;
  EXPModifier *result = 0 ;
  
  result = (EXPModifier *)new EXPModifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EXPModifier(void * jarg1) {
  EXPModifier *arg1 = (EXPModifier *) 0 ;
  
  arg1 = (EXPModifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_x_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_x_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_y_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_y_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_z_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_z_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_heading_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_heading_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_number_set(void * jarg1, unsigned short jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  uint16 arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->number = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ZonePoint_number_get(void * jarg1) {
  unsigned short jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  uint16 result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (uint16) ((arg1)->number);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_target_x_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->target_x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_target_x_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->target_x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_target_y_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->target_y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_target_y_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->target_y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_target_z_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->target_z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_target_z_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->target_z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_target_heading_set(void * jarg1, float jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->target_heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZonePoint_target_heading_get(void * jarg1) {
  float jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  float result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (float) ((arg1)->target_heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_target_zone_id_set(void * jarg1, unsigned short jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  uint16 arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->target_zone_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ZonePoint_target_zone_id_get(void * jarg1) {
  unsigned short jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  uint16 result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (uint16) ((arg1)->target_zone_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_target_zone_instance_set(void * jarg1, int jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  int32 arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->target_zone_instance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZonePoint_target_zone_instance_get(void * jarg1) {
  int jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  int32 result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (int32) ((arg1)->target_zone_instance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_client_version_mask_set(void * jarg1, unsigned int jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->client_version_mask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZonePoint_client_version_mask_get(void * jarg1) {
  unsigned int jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  uint32 result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (uint32) ((arg1)->client_version_mask);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_is_virtual_set(void * jarg1, unsigned int jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  bool arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_virtual = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZonePoint_is_virtual_get(void * jarg1) {
  unsigned int jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  bool result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (bool) ((arg1)->is_virtual);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_height_set(void * jarg1, int jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  int arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZonePoint_height_get(void * jarg1) {
  int jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  int result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZonePoint_width_set(void * jarg1, int jarg2) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  int arg2 ;
  
  arg1 = (ZonePoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZonePoint_width_get(void * jarg1) {
  int jresult ;
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  int result;
  
  arg1 = (ZonePoint *)jarg1; 
  result = (int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZonePoint() {
  void * jresult ;
  ZonePoint *result = 0 ;
  
  result = (ZonePoint *)new ZonePoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZonePoint(void * jarg1) {
  ZonePoint *arg1 = (ZonePoint *) 0 ;
  
  arg1 = (ZonePoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_ip_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ip = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_ip_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (uint32) ((arg1)->ip);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_wid_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->wid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_wid_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (uint32) ((arg1)->wid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_accid_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->accid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_accid_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (uint32) ((arg1)->accid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_admin_set(void * jarg1, short jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->admin = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ZoneClientAuth_Struct_admin_get(void * jarg1) {
  short jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  int16 result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (int16) ((arg1)->admin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_charid_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->charid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_charid_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (uint32) ((arg1)->charid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_lsid_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->lsid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_lsid_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  uint32 result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (uint32) ((arg1)->lsid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_tellsoff_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tellsoff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_tellsoff_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (bool) ((arg1)->tellsoff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_charname_set(void * jarg1, char * jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->charname, (const char *)arg2, 64-1);
      arg1->charname[64-1] = 0;
    } else {
      arg1->charname[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ZoneClientAuth_Struct_charname_get(void * jarg1) {
  char * jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  char *result = 0 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (char *)(char *) ((arg1)->charname);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_lskey_set(void * jarg1, char * jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->lskey, (const char *)arg2, 30-1);
      arg1->lskey[30-1] = 0;
    } else {
      arg1->lskey[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ZoneClientAuth_Struct_lskey_get(void * jarg1) {
  char * jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  char *result = 0 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (char *)(char *) ((arg1)->lskey);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneClientAuth_Struct_stale_set(void * jarg1, unsigned int jarg2) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stale = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneClientAuth_Struct_stale_get(void * jarg1) {
  unsigned int jresult ;
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  result = (bool) ((arg1)->stale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneClientAuth_Struct() {
  void * jresult ;
  ZoneClientAuth_Struct *result = 0 ;
  
  result = (ZoneClientAuth_Struct *)new ZoneClientAuth_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneClientAuth_Struct(void * jarg1) {
  ZoneClientAuth_Struct *arg1 = (ZoneClientAuth_Struct *) 0 ;
  
  arg1 = (ZoneClientAuth_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneEXPModInfo_ExpMod_set(void * jarg1, float jarg2) {
  ZoneEXPModInfo *arg1 = (ZoneEXPModInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ZoneEXPModInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ExpMod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoneEXPModInfo_ExpMod_get(void * jarg1) {
  float jresult ;
  ZoneEXPModInfo *arg1 = (ZoneEXPModInfo *) 0 ;
  float result;
  
  arg1 = (ZoneEXPModInfo *)jarg1; 
  result = (float) ((arg1)->ExpMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneEXPModInfo_AAExpMod_set(void * jarg1, float jarg2) {
  ZoneEXPModInfo *arg1 = (ZoneEXPModInfo *) 0 ;
  float arg2 ;
  
  arg1 = (ZoneEXPModInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AAExpMod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoneEXPModInfo_AAExpMod_get(void * jarg1) {
  float jresult ;
  ZoneEXPModInfo *arg1 = (ZoneEXPModInfo *) 0 ;
  float result;
  
  arg1 = (ZoneEXPModInfo *)jarg1; 
  result = (float) ((arg1)->AAExpMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneEXPModInfo() {
  void * jresult ;
  ZoneEXPModInfo *result = 0 ;
  
  result = (ZoneEXPModInfo *)new ZoneEXPModInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneEXPModInfo(void * jarg1) {
  ZoneEXPModInfo *arg1 = (ZoneEXPModInfo *) 0 ;
  
  arg1 = (ZoneEXPModInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_Bootup__SWIG_0(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)Zone::Bootup(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_Bootup__SWIG_1(unsigned int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)Zone::Bootup(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_Shutdown__SWIG_0(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Zone::Shutdown(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_Shutdown__SWIG_1() {
  Zone::Shutdown();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Zone(unsigned int jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  Zone *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  result = (Zone *)new Zone(arg1,arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Zone(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetAlternateAdvancementAbility(void * jarg1, int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int arg2 ;
  AA::Ability *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (int)jarg2; 
  result = (AA::Ability *)(arg1)->GetAlternateAdvancementAbility(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetAlternateAdvancementAbilityByRank(void * jarg1, int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int arg2 ;
  AA::Ability *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (int)jarg2; 
  result = (AA::Ability *)(arg1)->GetAlternateAdvancementAbilityByRank(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetAlternateAdvancementRank(void * jarg1, int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int arg2 ;
  AA::Rank *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (int)jarg2; 
  result = (AA::Rank *)(arg1)->GetAlternateAdvancementRank(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_is_zone_time_localized_set(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->is_zone_time_localized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_is_zone_time_localized_get(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool) ((arg1)->is_zone_time_localized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_quest_idle_override_set(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->quest_idle_override = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_quest_idle_override_get(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool) ((arg1)->quest_idle_override);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsIdleWhenEmpty(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->IsIdleWhenEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetIdleWhenEmpty(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIdleWhenEmpty(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetSecondsBeforeIdle(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32)((Zone const *)arg1)->GetSecondsBeforeIdle();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetSecondsBeforeIdle(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetSecondsBeforeIdle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_AggroLimitReached(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->AggroLimitReached();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_AllowMercs(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->AllowMercs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CanBind(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->CanBind();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CanCastOutdoor(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->CanCastOutdoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CanDoCombat(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->CanDoCombat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CanLevitate(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->CanLevitate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_Depop__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Depop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_Depop__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->Depop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_did_adventure_actions_set(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->did_adventure_actions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_did_adventure_actions_get(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool) ((arg1)->did_adventure_actions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_HasGraveyard(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->HasGraveyard();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_HasWeather(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->HasWeather();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_Init(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->Init(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsCity(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->IsCity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsHotzone(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->IsHotzone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsLoaded(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsPVPZone(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->IsPVPZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsSpellBlocked(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  glm::vec3 *arg3 = 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsSpellBlocked(arg2,(glm::vec3 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsUCSServerAvailable(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->IsUCSServerAvailable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsZone(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)((Zone const *)arg1)->IsZone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_LoadGroundSpawns(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->LoadGroundSpawns();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_LoadZoneCFG(void * jarg1, char * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->LoadZoneCFG((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_LoadZoneObjects(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->LoadZoneObjects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsSpecialBindLocation(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec4 *arg2 = 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->IsSpecialBindLocation((glm::vec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_Process(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_SaveZoneCFG(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->SaveZoneCFG();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_DoesAlternateCurrencyExist(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DoesAlternateCurrencyExist(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zone_GetNpcPositionUpdateDistance(void * jarg1) {
  int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int result;
  
  arg1 = (Zone *)jarg1; 
  result = (int)((Zone const *)arg1)->GetNpcPositionUpdateDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetNpcPositionUpdateDistance(void * jarg1, int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  int arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetNpcPositionUpdateDistance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_adv_data_set(void * jarg1, char * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->adv_data;
    if (arg2) {
      arg1->adv_data = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->adv_data, (const char *)arg2);
    } else {
      arg1->adv_data = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Zone_adv_data_get(void * jarg1) {
  char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  char *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (char *) ((arg1)->adv_data);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Zone_GetSpellBlockedMessage(void * jarg1, unsigned int jarg2, void * jarg3) {
  char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  glm::vec3 *arg3 = 0 ;
  char *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  result = (char *)(arg1)->GetSpellBlockedMessage(arg2,(glm::vec3 const &)*arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_random_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  EQ::Random arg2 ;
  EQ::Random *argp2 ;
  
  arg1 = (Zone *)jarg1; 
  argp2 = (EQ::Random *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::Random", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->random = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_random_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  EQ::Random result;
  
  arg1 = (Zone *)jarg1; 
  result =  ((arg1)->random);
  jresult = new EQ::Random(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_zone_time_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  EQTime arg2 ;
  EQTime *argp2 ;
  
  arg1 = (Zone *)jarg1; 
  argp2 = (EQTime *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQTime", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->zone_time = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_zone_time_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  EQTime result;
  
  arg1 = (Zone *)jarg1; 
  result =  ((arg1)->zone_time);
  jresult = new EQTime(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetClosestZonePoint__SWIG_0(void * jarg1, void * jarg2, char * jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  Client *arg4 = (Client *) 0 ;
  float arg5 ;
  ZonePoint *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (float)jarg5; 
  result = (ZonePoint *)(arg1)->GetClosestZonePoint((glm::vec3 const &)*arg2,(char const *)arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetClosestZonePoint__SWIG_1(void * jarg1, void * jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec3 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  Client *arg4 = (Client *) 0 ;
  ZonePoint *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  arg4 = (Client *)jarg4; 
  result = (ZonePoint *)(arg1)->GetClosestZonePoint((glm::vec3 const &)*arg2,(char const *)arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_BuffTimersSuspended(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->BuffTimersSuspended();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_HasMap(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->HasMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_HasWaterMap(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->HasWaterMap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_InstantGrids(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->InstantGrids();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsStaticZone(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->IsStaticZone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsInstancePersistent(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->IsInstancePersistent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Zone_GetFileName(void * jarg1) {
  char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  char *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (char *)(arg1)->GetFileName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Zone_GetLongName(void * jarg1) {
  char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  char *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (char *)(arg1)->GetLongName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Zone_GetShortName(void * jarg1) {
  char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  char *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (char *)(arg1)->GetShortName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_GetZoneType(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8)((Zone const *)arg1)->GetZoneType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_Zone_GetInstanceVersion(void * jarg1) {
  unsigned short jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint16 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint16)((Zone const *)arg1)->GetInstanceVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetMaxClients(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32 *) &(arg1)->GetMaxClients();
  jresult = (unsigned int)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_graveyard_id(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32 *) &(arg1)->graveyard_id();
  jresult = (unsigned int)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_graveyard_zoneid(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32 *) &(arg1)->graveyard_zoneid();
  jresult = (unsigned int)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetInstanceID(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32)((Zone const *)arg1)->GetInstanceID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetZoneID(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32)((Zone const *)arg1)->GetZoneID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetSafePoint(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec4 result;
  
  arg1 = (Zone *)jarg1; 
  result = (arg1)->GetSafePoint();
  {
    jresult = new glm::vec4(result);
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetGraveyardPoint(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec4 result;
  
  arg1 = (Zone *)jarg1; 
  result = (arg1)->GetGraveyardPoint();
  {
    jresult = new glm::vec4(result);
  }
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetGlobalLootTables(void * jarg1, void * jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  std::vector< int > result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (NPC *)jarg2; 
  result = ((Zone const *)arg1)->GetGlobalLootTables(arg2);
  jresult = new std::vector< int >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_AddGlobalLootEntry(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  GlobalLootEntry *arg2 = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (GlobalLootEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GlobalLootEntry & is null", 0);
    return ;
  } 
  (arg1)->AddGlobalLootEntry(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetZoneHasCurrentTime(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetZoneHasCurrentTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ShowNPCGlobalLoot(void * jarg1, void * jarg2, void * jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  NPC *arg3 = (NPC *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (NPC *)jarg3; 
  (arg1)->ShowNPCGlobalLoot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ShowZoneGlobalLoot(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ShowZoneGlobalLoot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zone_GetZoneTotalBlockedSpells(void * jarg1) {
  int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int result;
  
  arg1 = (Zone *)jarg1; 
  result = (int)(arg1)->GetZoneTotalBlockedSpells();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zone_SaveTempItem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, unsigned int jarg6) {
  int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  int32 arg5 ;
  bool arg6 ;
  int result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (int)(arg1)->SaveTempItem(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zone_SaveTempItem__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5) {
  int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  int32 arg5 ;
  int result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (int32)jarg5; 
  result = (int)(arg1)->SaveTempItem(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Zone_MobsAggroCount(void * jarg1) {
  int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (int32)(arg1)->MobsAggroCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetDynamicZone(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  DynamicZone *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (DynamicZone *)(arg1)->GetDynamicZone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_pathing_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  IPathfinder *arg2 = (IPathfinder *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (IPathfinder *)jarg2; 
  if (arg1) (arg1)->pathing = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_pathing_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  IPathfinder *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (IPathfinder *) ((arg1)->pathing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_npc_emote_list_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< NPC_Emote_Struct * > *arg2 = (std::vector< NPC_Emote_Struct * > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< NPC_Emote_Struct * > *)jarg2; 
  if (arg1) (arg1)->npc_emote_list = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_npc_emote_list_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::vector< NPC_Emote_Struct * > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::vector< NPC_Emote_Struct * > *)& ((arg1)->npc_emote_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_spawn2_list_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  LinkedList< Spawn2 * > *arg2 = (LinkedList< Spawn2 * > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (LinkedList< Spawn2 * > *)jarg2; 
  if (arg1) (arg1)->spawn2_list = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_spawn2_list_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  LinkedList< Spawn2 * > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (LinkedList< Spawn2 * > *)& ((arg1)->spawn2_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_zone_point_list_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  LinkedList< ZonePoint * > *arg2 = (LinkedList< ZonePoint * > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (LinkedList< ZonePoint * > *)jarg2; 
  if (arg1) (arg1)->zone_point_list = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_zone_point_list_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  LinkedList< ZonePoint * > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (LinkedList< ZonePoint * > *)& ((arg1)->zone_point_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_virtual_zone_point_list_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< ZonePointsRepository::ZonePoints > *arg2 = (std::vector< ZonePointsRepository::ZonePoints > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< ZonePointsRepository::ZonePoints > *)jarg2; 
  if (arg1) (arg1)->virtual_zone_point_list = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_virtual_zone_point_list_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::vector< ZonePointsRepository::ZonePoints > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::vector< ZonePointsRepository::ZonePoints > *)& ((arg1)->virtual_zone_point_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_zonemap_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  Map *arg2 = (Map *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Map *)jarg2; 
  if (arg1) (arg1)->zonemap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_zonemap_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  Map *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (Map *) ((arg1)->zonemap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetMercTemplate(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  MercTemplate *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (MercTemplate *)(arg1)->GetMercTemplate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_newzone_data_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  NewZone_Struct arg2 ;
  NewZone_Struct *argp2 ;
  
  arg1 = (Zone *)jarg1; 
  argp2 = (NewZone_Struct *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null NewZone_Struct", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->newzone_data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_newzone_data_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  NewZone_Struct result;
  
  arg1 = (Zone *)jarg1; 
  result =  ((arg1)->newzone_data);
  jresult = new NewZone_Struct(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_CreateQGlobals(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  QGlobalCache *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (QGlobalCache *)(arg1)->CreateQGlobals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetQGlobals(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  QGlobalCache *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (QGlobalCache *)(arg1)->GetQGlobals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_spawn_conditions_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  SpawnConditionManager *arg2 = (SpawnConditionManager *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (SpawnConditionManager *)jarg2; 
  if (arg1) (arg1)->spawn_conditions = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_spawn_conditions_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  SpawnConditionManager *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (SpawnConditionManager *)& ((arg1)->spawn_conditions);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_spawn_group_list_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  SpawnGroupList *arg2 = (SpawnGroupList *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (SpawnGroupList *)jarg2; 
  if (arg1) (arg1)->spawn_group_list = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_spawn_group_list_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  SpawnGroupList *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (SpawnGroupList *)& ((arg1)->spawn_group_list);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_AlternateCurrencies_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::list< AltCurrencyDefinition_Struct > *arg2 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct > *)jarg2; 
  if (arg1) (arg1)->AlternateCurrencies = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_AlternateCurrencies_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::list< AltCurrencyDefinition_Struct > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::list< AltCurrencyDefinition_Struct > *)& ((arg1)->AlternateCurrencies);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_VeteranRewards_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::list< InternalVeteranReward > *arg2 = (std::list< InternalVeteranReward > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::list< InternalVeteranReward > *)jarg2; 
  if (arg1) (arg1)->VeteranRewards = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_VeteranRewards_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::list< InternalVeteranReward > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::list< InternalVeteranReward > *)& ((arg1)->VeteranRewards);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_merctable_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::map< uint32,NPCType * > *arg2 = (std::map< uint32,NPCType * > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::map< uint32,NPCType * > *)jarg2; 
  if (arg1) (arg1)->merctable = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_merctable_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::map< uint32,NPCType * > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::map< uint32,NPCType * > *)& ((arg1)->merctable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_npctable_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::map< uint32,NPCType * > *arg2 = (std::map< uint32,NPCType * > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::map< uint32,NPCType * > *)jarg2; 
  if (arg1) (arg1)->npctable = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_npctable_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::map< uint32,NPCType * > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::map< uint32,NPCType * > *)& ((arg1)->npctable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_level_exp_mod_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::map< uint32,ZoneEXPModInfo > *arg2 = (std::map< uint32,ZoneEXPModInfo > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::map< uint32,ZoneEXPModInfo > *)jarg2; 
  if (arg1) (arg1)->level_exp_mod = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_level_exp_mod_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::map< uint32,ZoneEXPModInfo > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::map< uint32,ZoneEXPModInfo > *)& ((arg1)->level_exp_mod);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_zone_grids_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< GridRepository::Grid > *arg2 = (std::vector< GridRepository::Grid > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< GridRepository::Grid > *)jarg2; 
  if (arg1) (arg1)->zone_grids = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_zone_grids_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::vector< GridRepository::Grid > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::vector< GridRepository::Grid > *)& ((arg1)->zone_grids);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_zone_grid_entries_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< GridEntriesRepository::GridEntries > *arg2 = (std::vector< GridEntriesRepository::GridEntries > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< GridEntriesRepository::GridEntries > *)jarg2; 
  if (arg1) (arg1)->zone_grid_entries = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_zone_grid_entries_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::vector< GridEntriesRepository::GridEntries > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::vector< GridEntriesRepository::GridEntries > *)& ((arg1)->zone_grid_entries);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_exp_modifiers_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::unordered_map< uint32,EXPModifier,std::hash< uint32 > > *arg2 = (std::unordered_map< uint32,EXPModifier,std::hash< uint32 > > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::unordered_map< uint32,EXPModifier,std::hash< uint32 > > *)jarg2; 
  if (arg1) (arg1)->exp_modifiers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_exp_modifiers_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::unordered_map< uint32,EXPModifier,std::hash< uint32 > > *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (std::unordered_map< uint32,EXPModifier,std::hash< uint32 > > *)& ((arg1)->exp_modifiers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_weather_timer_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  time_t arg2 ;
  time_t *argp2 ;
  
  arg1 = (Zone *)jarg1; 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->weather_timer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_weather_timer_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  time_t result;
  
  arg1 = (Zone *)jarg1; 
  result =  ((arg1)->weather_timer);
  jresult = new time_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_weather_intensity_set(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->weather_intensity = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_weather_intensity_get(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8) ((arg1)->weather_intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_zone_weather_set(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->zone_weather = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_zone_weather_get(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8) ((arg1)->zone_weather);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_loglevelvar_set(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->loglevelvar = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_loglevelvar_get(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8) ((arg1)->loglevelvar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_lootvar_set(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->lootvar = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_lootvar_get(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8) ((arg1)->lootvar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_merchantvar_set(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->merchantvar = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_merchantvar_get(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8) ((arg1)->merchantvar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_tradevar_set(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->tradevar = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_Zone_tradevar_get(void * jarg1) {
  unsigned char jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint8) ((arg1)->tradevar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_numzonepoints_set(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->numzonepoints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_numzonepoints_get(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32) ((arg1)->numzonepoints);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CountAuth(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32)(arg1)->CountAuth();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CountSpawn2(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32)(arg1)->CountSpawn2();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetSpawnKillCount(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetSpawnKillCount(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetTempMerchantQuantity(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (uint32)(arg1)->GetTempMerchantQuantity(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetCurrencyID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetCurrencyID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetCurrencyItemID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetCurrencyItemID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Zone_GetAAName(void * jarg1, int jarg2) {
  const char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetAAName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsRaining(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->IsRaining();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsSnowing(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)(arg1)->IsSnowing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_Zone_GetZoneDescription(void * jarg1) {
  const char * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  std::string result;
  
  arg1 = (Zone *)jarg1; 
  result = (arg1)->GetZoneDescription();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SendReloadMessage(void * jarg1, const char * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::string arg2 ;
  
  arg1 = (Zone *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SendReloadMessage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearEXPModifier(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->ClearEXPModifier(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearEXPModifierByCharacterID(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearEXPModifierByCharacterID(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_Zone_GetAAEXPModifier(void * jarg1, void * jarg2) {
  float jresult ;
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  float result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (float)(arg1)->GetAAEXPModifier(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Zone_GetAAEXPModifierByCharacterID(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetAAEXPModifierByCharacterID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Zone_GetEXPModifier(void * jarg1, void * jarg2) {
  float jresult ;
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  float result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (float)(arg1)->GetEXPModifier(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Zone_GetEXPModifierByCharacterID(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  float result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (float)(arg1)->GetEXPModifierByCharacterID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetAAEXPModifier(void * jarg1, void * jarg2, float jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  float arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetAAEXPModifier(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetAAEXPModifierByCharacterID(void * jarg1, unsigned int jarg2, float jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetAAEXPModifierByCharacterID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetEXPModifier(void * jarg1, void * jarg2, float jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  float arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetEXPModifier(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetEXPModifierByCharacterID(void * jarg1, unsigned int jarg2, float jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  float arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetEXPModifierByCharacterID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_AddAggroMob(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->AddAggroMob();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_AddAuth(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  ServerZoneIncomingClient_Struct *arg2 = (ServerZoneIncomingClient_Struct *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (ServerZoneIncomingClient_Struct *)jarg2; 
  (arg1)->AddAuth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ChangeWeather(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ChangeWeather();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearBlockedSpells(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ClearBlockedSpells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearNPCTypeCache(void * jarg1, int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  int arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ClearNPCTypeCache(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_CalculateNpcUpdateDistanceSpread(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->CalculateNpcUpdateDistanceSpread();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_DelAggroMob(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->DelAggroMob();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_DeleteQGlobal(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  Zone *arg1 = (Zone *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (Zone *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->DeleteQGlobal(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_Despawn(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->Despawn(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_DoAdventureActions(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->DoAdventureActions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_DoAdventureAssassinationCountIncrease(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->DoAdventureAssassinationCountIncrease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_DoAdventureCountIncrease(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->DoAdventureCountIncrease();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadMerchants(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadMerchants();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_GetTimeSync(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->GetTimeSync();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadAdventureFlavor(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadAdventureFlavor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadAlternateAdvancement(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadAlternateAdvancement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadAlternateCurrencies(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadAlternateCurrencies();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadDynamicZoneTemplates(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadDynamicZoneTemplates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadZoneBlockedSpells(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadZoneBlockedSpells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadLDoNTrapEntries(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadLDoNTrapEntries();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadLDoNTraps(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadLDoNTraps();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadLevelEXPMods(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadLevelEXPMods();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadGrids(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadGrids();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadMercenarySpells(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadMercenarySpells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadMercenaryTemplates(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadMercenaryTemplates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadNewMerchantData(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LoadNewMerchantData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadNPCEmotes(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< NPC_Emote_Struct * > *arg2 = (std::vector< NPC_Emote_Struct * > *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< NPC_Emote_Struct * > *)jarg2; 
  (arg1)->LoadNPCEmotes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadTempMerchantData(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadTempMerchantData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadVeteranRewards(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadVeteranRewards();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadZoneDoors(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadZoneDoors();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadStaticData(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ReloadStaticData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadWorld(void * jarg1, unsigned char jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->ReloadWorld(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_RemoveAuth__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->RemoveAuth((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_RemoveAuth__SWIG_1(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->RemoveAuth(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_Repop__SWIG_0(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Repop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_Repop__SWIG_1(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->Repop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_RequestUCSServerStatus(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->RequestUCSServerStatus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ResetAuth(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ResetAuth();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetDate(void * jarg1, unsigned short jarg2, unsigned char jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6) {
  Zone *arg1 = (Zone *) 0 ;
  uint16 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->SetDate(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetInstanceTimer(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetInstanceTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetStaticZone(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetStaticZone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetTime__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned int jarg4) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->SetTime(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetTime__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->SetTime(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetUCSServerAvailable(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  uint32 arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetUCSServerAvailable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SpawnConditionChanged(void * jarg1, void * jarg2, short jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  SpawnCondition *arg2 = 0 ;
  int16 arg3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (SpawnCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpawnCondition const & is null", 0);
    return ;
  } 
  arg3 = (int16)jarg3; 
  (arg1)->SpawnConditionChanged((SpawnCondition const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_StartShutdownTimer__SWIG_0(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->StartShutdownTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_StartShutdownTimer__SWIG_1(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->StartShutdownTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ResetShutdownTimer(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ResetShutdownTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_StopShutdownTimer(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->StopShutdownTimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_UpdateQGlobal(void * jarg1, unsigned int jarg2, void * jarg3) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  QGlobal arg3 ;
  QGlobal *argp3 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  argp3 = (QGlobal *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null QGlobal", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->UpdateQGlobal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_weatherSend__SWIG_0(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->weatherSend(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_weatherSend__SWIG_1(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->weatherSend();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearSpawnTimers(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ClearSpawnTimers();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_IsQuestHotReloadQueued(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  result = (bool)((Zone const *)arg1)->IsQuestHotReloadQueued();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetQuestHotReloadQueued(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetQuestHotReloadQueued(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_CompareDataBucket(void * jarg1, unsigned char jarg2, const char * jarg3, const char * jarg4) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->CompareDataBucket(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_watermap_set(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  WaterMap *arg2 = (WaterMap *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (WaterMap *)jarg2; 
  if (arg1) (arg1)->watermap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_watermap_get(void * jarg1) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  WaterMap *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  result = (WaterMap *) ((arg1)->watermap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetClosestZonePoint__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, float jarg5) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec3 *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  float arg5 ;
  ZonePoint *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (float)jarg5; 
  result = (ZonePoint *)(arg1)->GetClosestZonePoint((glm::vec3 const &)*arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetClosestZonePoint__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  glm::vec3 *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  ZonePoint *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return 0;
  } 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  result = (ZonePoint *)(arg1)->GetClosestZonePoint((glm::vec3 const &)*arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetClosestZonePointWithoutZone__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5, float jarg6) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Client *arg5 = (Client *) 0 ;
  float arg6 ;
  ZonePoint *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (float)jarg6; 
  result = (ZonePoint *)(arg1)->GetClosestZonePointWithoutZone(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetClosestZonePointWithoutZone__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Client *arg5 = (Client *) 0 ;
  ZonePoint *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (Client *)jarg5; 
  result = (ZonePoint *)(arg1)->GetClosestZonePointWithoutZone(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Zone_GetInstanceTimeRemaining(void * jarg1) {
  unsigned int jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 result;
  
  arg1 = (Zone *)jarg1; 
  result = (uint32)((Zone const *)arg1)->GetInstanceTimeRemaining();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetInstanceTimeRemaining(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetInstanceTimeRemaining(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_GMSayHookCallBackProcess(unsigned short jarg1, char * jarg2, const char * jarg3) {
  uint16 arg1 ;
  char *arg2 = (char *) 0 ;
  std::string arg3 ;
  
  arg1 = (uint16)jarg1; 
  arg2 = (char *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  Zone::GMSayHookCallBackProcess(arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SendDiscordMessage__SWIG_0(int jarg1, const char * jarg2) {
  int arg1 ;
  std::string *arg2 = 0 ;
  
  arg1 = (int)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Zone::SendDiscordMessage(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SendDiscordMessage__SWIG_1(const char * jarg1, const char * jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  Zone::SendDiscordMessage((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_DiscordWebhookMessageHandler(unsigned short jarg1, int jarg2, const char * jarg3) {
  uint16 arg1 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (uint16)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  Zone::DiscordWebhookMessageHandler(arg1,arg2,(std::string const &)*arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Zone_GetMaxMovementUpdateRange(void * jarg1) {
  double jresult ;
  Zone *arg1 = (Zone *) 0 ;
  double result;
  
  arg1 = (Zone *)jarg1; 
  result = (double)((Zone const *)arg1)->GetMaxMovementUpdateRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_SetIsHotzone(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  bool arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetIsHotzone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadContentFlags(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ReloadContentFlags();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadNPCFaction(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LoadNPCFaction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadNPCFactions(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< uint32 > *arg2 = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< uint32 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32 > const & is null", 0);
    return ;
  } 
  (arg1)->LoadNPCFactions((std::vector< uint32 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearNPCFactions(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ClearNPCFactions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadNPCFactions(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ReloadNPCFactions();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetNPCFaction(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  NpcFactionRepository::NpcFaction *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (NpcFactionRepository::NpcFaction *)(arg1)->GetNPCFaction(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetNPCFactionEntries(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< NpcFactionEntriesRepository::NpcFactionEntries > > result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = ((Zone const *)arg1)->GetNPCFactionEntries(arg2);
  jresult = new std::vector< NpcFactionEntriesRepository::NpcFactionEntries >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadNPCFactionAssociation(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LoadNPCFactionAssociation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadNPCFactionAssociations(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< uint32 > *arg2 = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< uint32 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32 > const & is null", 0);
    return ;
  } 
  (arg1)->LoadNPCFactionAssociations((std::vector< uint32 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadFactionAssociation(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LoadFactionAssociation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadFactionAssociations(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< uint32 > *arg2 = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< uint32 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32 > const & is null", 0);
    return ;
  } 
  (arg1)->LoadFactionAssociations((std::vector< uint32 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearFactionAssociations(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ClearFactionAssociations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadFactionAssociations(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ReloadFactionAssociations();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetFactionAssociation(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  FactionAssociationRepository::FactionAssociation *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (FactionAssociationRepository::FactionAssociation *)(arg1)->GetFactionAssociation(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadLootTable(void * jarg1, unsigned int jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LoadLootTable(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadLootTables(void * jarg1, void * jarg2) {
  Zone *arg1 = (Zone *) 0 ;
  std::vector< uint32 > *arg2 = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (std::vector< uint32 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint32 > const & is null", 0);
    return ;
  } 
  (arg1)->LoadLootTables((std::vector< uint32 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearLootTables(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ClearLootTables();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadLootTables(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ReloadLootTables();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetLootTable(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  LoottableRepository::Loottable *result = 0 ;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (LoottableRepository::Loottable *)(arg1)->GetLootTable(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetLootTableEntries(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< LoottableEntriesRepository::LoottableEntries > > result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = ((Zone const *)arg1)->GetLootTableEntries(arg2);
  jresult = new std::vector< LoottableEntriesRepository::LoottableEntries >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetLootdrop(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  LootdropRepository::Lootdrop result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = ((Zone const *)arg1)->GetLootdrop(arg2);
  jresult = new LootdropRepository::Lootdrop(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetLootdropEntries(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint32 arg2 ;
  SwigValueWrapper< std::vector< LootdropEntriesRepository::LootdropEntries > > result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = ((Zone const *)arg1)->GetLootdropEntries(arg2);
  jresult = new std::vector< LootdropEntriesRepository::LootdropEntries >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ClearBaseData(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ClearBaseData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zone_GetBaseData(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  Zone *arg1 = (Zone *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  BaseDataRepository::BaseData result;
  
  arg1 = (Zone *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (arg1)->GetBaseData(arg2,arg3);
  jresult = new BaseDataRepository::BaseData(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_LoadBaseData(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->LoadBaseData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Zone_ReloadBaseData(void * jarg1) {
  Zone *arg1 = (Zone *) 0 ;
  
  arg1 = (Zone *)jarg1; 
  (arg1)->ReloadBaseData();
}


SWIGEXPORT int SWIGSTDCALL CSharp_SC_AlwaysEnabled_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_0(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned short jarg12, short jarg13, unsigned int jarg14, void * jarg15) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  uint16 arg12 ;
  int16 arg13 ;
  bool arg14 ;
  EmuAppearance arg15 ;
  EmuAppearance *argp15 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  arg12 = (uint16)jarg12; 
  arg13 = (int16)jarg13; 
  arg14 = jarg14 ? true : false; 
  argp15 = (EmuAppearance *)jarg15; 
  if (!argp15) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EmuAppearance", 0);
    return 0;
  }
  arg15 = *argp15; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_1(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned short jarg12, short jarg13, unsigned int jarg14) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  uint16 arg12 ;
  int16 arg13 ;
  bool arg14 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  arg12 = (uint16)jarg12; 
  arg13 = (int16)jarg13; 
  arg14 = jarg14 ? true : false; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_2(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned short jarg12, short jarg13) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  uint16 arg12 ;
  int16 arg13 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  arg12 = (uint16)jarg12; 
  arg13 = (int16)jarg13; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_3(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned short jarg12) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  uint16 arg12 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  arg12 = (uint16)jarg12; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_4(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  bool arg11 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = jarg11 ? true : false; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_5(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_6(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Spawn2__SWIG_7(unsigned int jarg1, unsigned int jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  uint32 arg1 ;
  uint32 arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  Spawn2 *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (Spawn2 *)new Spawn2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Spawn2(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_LoadGrid__SWIG_0(void * jarg1, int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  int arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->LoadGrid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_LoadGrid__SWIG_1(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->LoadGrid();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_Enable(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->Enable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_Disable(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->Disable();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_Enabled(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  bool result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (bool)(arg1)->Enabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_Process(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  bool result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (bool)(arg1)->Process();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_Reset(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_Depop(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->Depop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_Repop__SWIG_0(void * jarg1, unsigned int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->Repop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_Repop__SWIG_1(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->Repop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_ForceDespawn(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->ForceDespawn();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_DeathReset__SWIG_0(void * jarg1, unsigned int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  bool arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->DeathReset(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_DeathReset__SWIG_1(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->DeathReset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SpawnConditionChanged(void * jarg1, void * jarg2, short jarg3) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  SpawnCondition *arg2 = 0 ;
  int16 arg3 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (SpawnCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpawnCondition const & is null", 0);
    return ;
  } 
  arg3 = (int16)jarg3; 
  (arg1)->SpawnConditionChanged((SpawnCondition const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_GetID(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)(arg1)->GetID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Spawn2_GetX(void * jarg1) {
  float jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  float result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (float)(arg1)->GetX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Spawn2_GetY(void * jarg1) {
  float jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  float result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (float)(arg1)->GetY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Spawn2_GetZ(void * jarg1) {
  float jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  float result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (float)(arg1)->GetZ();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Spawn2_GetHeading(void * jarg1) {
  float jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  float result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (float)(arg1)->GetHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_PathWhenZoneIdle(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  bool result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (bool)(arg1)->PathWhenZoneIdle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SetRespawnTimer(void * jarg1, unsigned int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetRespawnTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SetVariance(void * jarg1, unsigned int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetVariance(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_GetVariance(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)((Spawn2 const *)arg1)->GetVariance();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_RespawnTimer(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)(arg1)->RespawnTimer();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_SpawnGroupID(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)(arg1)->SpawnGroupID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_CurrentNPCID(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)(arg1)->CurrentNPCID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SetCurrentNPCID(void * jarg1, unsigned int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetCurrentNPCID(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_GetSpawnCondition(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)(arg1)->GetSpawnCondition();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_NPCPointerValid(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  bool result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (bool)(arg1)->NPCPointerValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SetNPCPointer(void * jarg1, void * jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  NPC *arg2 = (NPC *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (NPC *)jarg2; 
  (arg1)->SetNPCPointer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SetNPCPointerNull(void * jarg1) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  
  arg1 = (Spawn2 *)jarg1; 
  (arg1)->SetNPCPointerNull();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spawn2_SetTimer(void * jarg1, unsigned int jarg2) {
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 arg2 ;
  
  arg1 = (Spawn2 *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetTimer(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Spawn2_GetKillCount(void * jarg1) {
  unsigned int jresult ;
  Spawn2 *arg1 = (Spawn2 *) 0 ;
  uint32 result;
  
  arg1 = (Spawn2 *)jarg1; 
  result = (uint32)(arg1)->GetKillCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnCondition() {
  void * jresult ;
  SpawnCondition *result = 0 ;
  
  result = (SpawnCondition *)new SpawnCondition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnCondition_condition_id_set(void * jarg1, unsigned short jarg2) {
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  uint16 arg2 ;
  
  arg1 = (SpawnCondition *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->condition_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SpawnCondition_condition_id_get(void * jarg1) {
  unsigned short jresult ;
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  uint16 result;
  
  arg1 = (SpawnCondition *)jarg1; 
  result = (uint16) ((arg1)->condition_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnCondition_value_set(void * jarg1, short jarg2) {
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  int16 arg2 ;
  
  arg1 = (SpawnCondition *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_SpawnCondition_value_get(void * jarg1) {
  short jresult ;
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  int16 result;
  
  arg1 = (SpawnCondition *)jarg1; 
  result = (int16) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnCondition_on_change_set(void * jarg1, int jarg2) {
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  SpawnCondition::OnChange arg2 ;
  
  arg1 = (SpawnCondition *)jarg1; 
  arg2 = (SpawnCondition::OnChange)jarg2; 
  if (arg1) (arg1)->on_change = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpawnCondition_on_change_get(void * jarg1) {
  int jresult ;
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  SpawnCondition::OnChange result;
  
  arg1 = (SpawnCondition *)jarg1; 
  result = (SpawnCondition::OnChange) ((arg1)->on_change);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpawnCondition(void * jarg1) {
  SpawnCondition *arg1 = (SpawnCondition *) 0 ;
  
  arg1 = (SpawnCondition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnEvent() {
  void * jresult ;
  SpawnEvent *result = 0 ;
  
  result = (SpawnEvent *)new SpawnEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_id_set(void * jarg1, unsigned int jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnEvent_id_get(void * jarg1) {
  unsigned int jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  uint32 result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (uint32) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_condition_id_set(void * jarg1, unsigned short jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  uint16 arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->condition_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SpawnEvent_condition_id_get(void * jarg1) {
  unsigned short jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  uint16 result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (uint16) ((arg1)->condition_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_zone_name_set(void * jarg1, const char * jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->zone_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_SpawnEvent_zone_name_get(void * jarg1) {
  const char * jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (std::string *) & ((arg1)->zone_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_enabled_set(void * jarg1, unsigned int jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  bool arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnEvent_enabled_get(void * jarg1) {
  unsigned int jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  bool result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_action_set(void * jarg1, int jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  SpawnEvent::Action arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = (SpawnEvent::Action)jarg2; 
  if (arg1) (arg1)->action = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpawnEvent_action_get(void * jarg1) {
  int jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  SpawnEvent::Action result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (SpawnEvent::Action) ((arg1)->action);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_argument_set(void * jarg1, short jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  int16 arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->argument = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_SpawnEvent_argument_get(void * jarg1) {
  short jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  int16 result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (int16) ((arg1)->argument);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_strict_set(void * jarg1, unsigned int jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  bool arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->strict = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnEvent_strict_get(void * jarg1) {
  unsigned int jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  bool result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (bool) ((arg1)->strict);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_period_set(void * jarg1, unsigned int jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->period = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnEvent_period_get(void * jarg1) {
  unsigned int jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  uint32 result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result = (uint32) ((arg1)->period);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEvent_next_set(void * jarg1, void * jarg2) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  TimeOfDay_Struct arg2 ;
  TimeOfDay_Struct *argp2 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  argp2 = (TimeOfDay_Struct *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null TimeOfDay_Struct", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpawnEvent_next_get(void * jarg1) {
  void * jresult ;
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  TimeOfDay_Struct result;
  
  arg1 = (SpawnEvent *)jarg1; 
  result =  ((arg1)->next);
  jresult = new TimeOfDay_Struct(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpawnEvent(void * jarg1) {
  SpawnEvent *arg1 = (SpawnEvent *) 0 ;
  
  arg1 = (SpawnEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnConditionManager() {
  void * jresult ;
  SpawnConditionManager *result = 0 ;
  
  result = (SpawnConditionManager *)new SpawnConditionManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnConditionManager_Process(void * jarg1) {
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  (arg1)->Process();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnConditionManager_LoadSpawnConditions(void * jarg1, const char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->LoadSpawnConditions((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_SpawnConditionManager_GetCondition(void * jarg1, const char * jarg2, unsigned int jarg3, unsigned short jarg4) {
  short jresult ;
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  int16 result;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (int16)(arg1)->GetCondition((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnConditionManager_SetCondition__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned short jarg4, short jarg5, unsigned int jarg6) {
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  int16 arg5 ;
  bool arg6 ;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int16)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->SetCondition((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnConditionManager_SetCondition__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, unsigned short jarg4, short jarg5) {
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  int16 arg5 ;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (int16)jarg5; 
  (arg1)->SetCondition((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnConditionManager_ToggleEvent(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->ToggleEvent(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnConditionManager_Check(void * jarg1, unsigned short jarg2, short jarg3) {
  unsigned int jresult ;
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  uint16 arg2 ;
  int16 arg3 ;
  bool result;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (int16)jarg3; 
  result = (bool)(arg1)->Check(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnConditionManager_ReloadEvent(void * jarg1, unsigned int jarg2) {
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ReloadEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpawnConditionManager(void * jarg1) {
  SpawnConditionManager *arg1 = (SpawnConditionManager *) 0 ;
  
  arg1 = (SpawnConditionManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_format_as__SWIG_0(int jarg1) {
  int jresult ;
  SpawnCondition::OnChange arg1 ;
  int result;
  
  arg1 = (SpawnCondition::OnChange)jarg1; 
  result = (int)format_as(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_format_as__SWIG_1(int jarg1) {
  int jresult ;
  SpawnEvent::Action arg1 ;
  int result;
  
  arg1 = (SpawnEvent::Action)jarg1; 
  result = (int)format_as(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnEntry(unsigned int jarg1, int jarg2, unsigned short jarg3, unsigned char jarg4, unsigned char jarg5, unsigned char jarg6) {
  void * jresult ;
  uint32 arg1 ;
  int arg2 ;
  uint16 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  SpawnEntry *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  result = (SpawnEntry *)new SpawnEntry(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpawnEntry(void * jarg1) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEntry_NPCType_set(void * jarg1, unsigned int jarg2) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->NPCType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnEntry_NPCType_get(void * jarg1) {
  unsigned int jresult ;
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint32 result;
  
  arg1 = (SpawnEntry *)jarg1; 
  result = (uint32) ((arg1)->NPCType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEntry_chance_set(void * jarg1, int jarg2) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  int arg2 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpawnEntry_chance_get(void * jarg1) {
  int jresult ;
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  int result;
  
  arg1 = (SpawnEntry *)jarg1; 
  result = (int) ((arg1)->chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEntry_min_time_set(void * jarg1, unsigned char jarg2) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->min_time = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_SpawnEntry_min_time_get(void * jarg1) {
  unsigned char jresult ;
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint8 result;
  
  arg1 = (SpawnEntry *)jarg1; 
  result = (uint8) ((arg1)->min_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEntry_max_time_set(void * jarg1, unsigned char jarg2) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->max_time = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_SpawnEntry_max_time_get(void * jarg1) {
  unsigned char jresult ;
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint8 result;
  
  arg1 = (SpawnEntry *)jarg1; 
  result = (uint8) ((arg1)->max_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEntry_condition_value_filter_set(void * jarg1, unsigned short jarg2) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint16 arg2 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->condition_value_filter = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SpawnEntry_condition_value_filter_get(void * jarg1) {
  unsigned short jresult ;
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint16 result;
  
  arg1 = (SpawnEntry *)jarg1; 
  result = (uint16) ((arg1)->condition_value_filter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnEntry_npc_spawn_limit_set(void * jarg1, unsigned char jarg2) {
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (SpawnEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->npc_spawn_limit = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_SpawnEntry_npc_spawn_limit_get(void * jarg1) {
  unsigned char jresult ;
  SpawnEntry *arg1 = (SpawnEntry *) 0 ;
  uint8 result;
  
  arg1 = (SpawnEntry *)jarg1; 
  result = (uint8) ((arg1)->npc_spawn_limit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnGroup(unsigned int jarg1, char * jarg2, int jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, int jarg9, int jarg10, unsigned int jarg11, int jarg12, unsigned int jarg13) {
  void * jresult ;
  uint32 arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  int arg9 ;
  int arg10 ;
  uint32 arg11 ;
  int arg12 ;
  bool arg13 ;
  SpawnGroup *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = jarg13 ? true : false; 
  result = (SpawnGroup *)new SpawnGroup(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpawnGroup(void * jarg1) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnGroup_GetNPCType__SWIG_0(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint32)(arg1)->GetNPCType(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnGroup_GetNPCType__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  uint32 result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (uint32)(arg1)->GetNPCType();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_AddSpawnEntry(void * jarg1, void * jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  std::unique_ptr< SpawnEntry > *arg2 = 0 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (std::unique_ptr< SpawnEntry > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unique_ptr< SpawnEntry > & is null", 0);
    return ;
  } 
  (arg1)->AddSpawnEntry(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_id_set(void * jarg1, unsigned int jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnGroup_id_get(void * jarg1) {
  unsigned int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  uint32 result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (uint32) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_wp_spawns_set(void * jarg1, unsigned int jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  bool arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->wp_spawns = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnGroup_wp_spawns_get(void * jarg1) {
  unsigned int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  bool result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (bool) ((arg1)->wp_spawns);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_roamdist_set(void * jarg1, float jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  float arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->roamdist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SpawnGroup_roamdist_get(void * jarg1) {
  float jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  float result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (float) ((arg1)->roamdist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_roambox_set(void * jarg1, void * jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->roambox;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpawnGroup_roambox_get(void * jarg1) {
  void * jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  float *result = 0 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (float *)(float *) ((arg1)->roambox);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_min_delay_set(void * jarg1, int jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  int arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min_delay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpawnGroup_min_delay_get(void * jarg1) {
  int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  int result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (int) ((arg1)->min_delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_delay_set(void * jarg1, int jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  int arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->delay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpawnGroup_delay_get(void * jarg1) {
  int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  int result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (int) ((arg1)->delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_despawn_set(void * jarg1, int jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  int arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->despawn = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpawnGroup_despawn_get(void * jarg1) {
  int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  int result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (int) ((arg1)->despawn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroup_despawn_timer_set(void * jarg1, unsigned int jarg2) {
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  uint32 arg2 ;
  
  arg1 = (SpawnGroup *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->despawn_timer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnGroup_despawn_timer_get(void * jarg1) {
  unsigned int jresult ;
  SpawnGroup *arg1 = (SpawnGroup *) 0 ;
  uint32 result;
  
  arg1 = (SpawnGroup *)jarg1; 
  result = (uint32) ((arg1)->despawn_timer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnGroupList__SWIG_0() {
  void * jresult ;
  SpawnGroupList *result = 0 ;
  
  result = (SpawnGroupList *)new SpawnGroupList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpawnGroupList(void * jarg1) {
  SpawnGroupList *arg1 = (SpawnGroupList *) 0 ;
  
  arg1 = (SpawnGroupList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpawnGroupList__SWIG_1(void * jarg1) {
  void * jresult ;
  SpawnGroupList *arg1 = 0 ;
  SpawnGroupList *result = 0 ;
  
  arg1 = (SpawnGroupList *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "SpawnGroupList const & is null", 0);
    return 0;
  } 
  result = (SpawnGroupList *)new SpawnGroupList((SpawnGroupList const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroupList_AddSpawnGroup(void * jarg1, void * jarg2) {
  SpawnGroupList *arg1 = (SpawnGroupList *) 0 ;
  std::unique_ptr< SpawnGroup > *arg2 = 0 ;
  
  arg1 = (SpawnGroupList *)jarg1; 
  arg2 = (std::unique_ptr< SpawnGroup > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unique_ptr< SpawnGroup > & is null", 0);
    return ;
  } 
  (arg1)->AddSpawnGroup(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpawnGroupList_GetSpawnGroup(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SpawnGroupList *arg1 = (SpawnGroupList *) 0 ;
  uint32 arg2 ;
  SpawnGroup *result = 0 ;
  
  arg1 = (SpawnGroupList *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (SpawnGroup *)(arg1)->GetSpawnGroup(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroupList_ClearSpawnGroups(void * jarg1) {
  SpawnGroupList *arg1 = (SpawnGroupList *) 0 ;
  
  arg1 = (SpawnGroupList *)jarg1; 
  (arg1)->ClearSpawnGroups();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpawnGroupList_ReloadSpawnGroups(void * jarg1) {
  SpawnGroupList *arg1 = (SpawnGroupList *) 0 ;
  
  arg1 = (SpawnGroupList *)jarg1; 
  (arg1)->ReloadSpawnGroups();
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_index_set(void * jarg1, int jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  int arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_wplist_index_get(void * jarg1) {
  int jresult ;
  wplist *arg1 = (wplist *) 0 ;
  int result;
  
  arg1 = (wplist *)jarg1; 
  result = (int) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_x_set(void * jarg1, float jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  float arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_wplist_x_get(void * jarg1) {
  float jresult ;
  wplist *arg1 = (wplist *) 0 ;
  float result;
  
  arg1 = (wplist *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_y_set(void * jarg1, float jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  float arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_wplist_y_get(void * jarg1) {
  float jresult ;
  wplist *arg1 = (wplist *) 0 ;
  float result;
  
  arg1 = (wplist *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_z_set(void * jarg1, float jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  float arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_wplist_z_get(void * jarg1) {
  float jresult ;
  wplist *arg1 = (wplist *) 0 ;
  float result;
  
  arg1 = (wplist *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_pause_set(void * jarg1, int jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  int arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pause = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_wplist_pause_get(void * jarg1) {
  int jresult ;
  wplist *arg1 = (wplist *) 0 ;
  int result;
  
  arg1 = (wplist *)jarg1; 
  result = (int) ((arg1)->pause);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_heading_set(void * jarg1, float jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  float arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_wplist_heading_get(void * jarg1) {
  float jresult ;
  wplist *arg1 = (wplist *) 0 ;
  float result;
  
  arg1 = (wplist *)jarg1; 
  result = (float) ((arg1)->heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_wplist_centerpoint_set(void * jarg1, unsigned int jarg2) {
  wplist *arg1 = (wplist *) 0 ;
  bool arg2 ;
  
  arg1 = (wplist *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->centerpoint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_wplist_centerpoint_get(void * jarg1) {
  unsigned int jresult ;
  wplist *arg1 = (wplist *) 0 ;
  bool result;
  
  arg1 = (wplist *)jarg1; 
  result = (bool) ((arg1)->centerpoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_wplist() {
  void * jresult ;
  wplist *result = 0 ;
  
  result = (wplist *)new wplist();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_wplist(void * jarg1) {
  wplist *arg1 = (wplist *) 0 ;
  
  arg1 = (wplist *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_spellid_set(void * jarg1, unsigned short jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_spellid_get(void * jarg1) {
  unsigned short jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_minlevel_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->minlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_minlevel_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->minlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_maxlevel_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->maxlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_maxlevel_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->maxlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_type_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_type_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (uint32) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_manacost_set(void * jarg1, short jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->manacost = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_manacost_get(void * jarg1) {
  short jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->manacost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_priority_set(void * jarg1, short jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_priority_get(void * jarg1) {
  short jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_recast_delay_set(void * jarg1, int jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->recast_delay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_recast_delay_get(void * jarg1) {
  int jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int32 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (int32) ((arg1)->recast_delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_resist_adjust_set(void * jarg1, short jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->resist_adjust = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_resist_adjust_get(void * jarg1) {
  short jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->resist_adjust);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_min_hp_set(void * jarg1, signed char jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int8 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->min_hp = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_min_hp_get(void * jarg1) {
  signed char jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int8 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (int8) ((arg1)->min_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_max_hp_set(void * jarg1, signed char jarg2) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int8 arg2 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->max_hp = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_DBnpcspells_entries_Struct_max_hp_get(void * jarg1) {
  signed char jresult ;
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  int8 result;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  result = (int8) ((arg1)->max_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBnpcspells_entries_Struct() {
  void * jresult ;
  DBnpcspells_entries_Struct *result = 0 ;
  
  result = (DBnpcspells_entries_Struct *)new DBnpcspells_entries_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBnpcspells_entries_Struct(void * jarg1) {
  DBnpcspells_entries_Struct *arg1 = (DBnpcspells_entries_Struct *) 0 ;
  
  arg1 = (DBnpcspells_entries_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_spelleffectid_set(void * jarg1, short jarg2) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->spelleffectid = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_spelleffectid_get(void * jarg1) {
  short jresult ;
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->spelleffectid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_minlevel_set(void * jarg1, unsigned char jarg2) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->minlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_minlevel_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->minlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_maxlevel_set(void * jarg1, unsigned char jarg2) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->maxlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_maxlevel_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->maxlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_base_value_set(void * jarg1, int jarg2) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->base_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_base_value_get(void * jarg1) {
  int jresult ;
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int32 result;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  result = (int32) ((arg1)->base_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_limit_set(void * jarg1, int jarg2) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->limit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_limit_get(void * jarg1) {
  int jresult ;
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int32 result;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  result = (int32) ((arg1)->limit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_max_value_set(void * jarg1, int jarg2) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->max_value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBnpcspellseffects_entries_Struct_max_value_get(void * jarg1) {
  int jresult ;
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  int32 result;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  result = (int32) ((arg1)->max_value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBnpcspellseffects_entries_Struct() {
  void * jresult ;
  DBnpcspellseffects_entries_Struct *result = 0 ;
  
  result = (DBnpcspellseffects_entries_Struct *)new DBnpcspellseffects_entries_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBnpcspellseffects_entries_Struct(void * jarg1) {
  DBnpcspellseffects_entries_Struct *arg1 = (DBnpcspellseffects_entries_Struct *) 0 ;
  
  arg1 = (DBnpcspellseffects_entries_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_parent_list_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->parent_list = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_parent_list_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->parent_list);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_attack_proc_set(void * jarg1, unsigned short jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->attack_proc = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBnpcspells_Struct_attack_proc_get(void * jarg1) {
  unsigned short jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint16) ((arg1)->attack_proc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_proc_chance_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->proc_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_Struct_proc_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->proc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_range_proc_set(void * jarg1, unsigned short jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->range_proc = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBnpcspells_Struct_range_proc_get(void * jarg1) {
  unsigned short jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint16) ((arg1)->range_proc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_rproc_chance_set(void * jarg1, short jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->rproc_chance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBnpcspells_Struct_rproc_chance_get(void * jarg1) {
  short jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (int16) ((arg1)->rproc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_defensive_proc_set(void * jarg1, unsigned short jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->defensive_proc = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBnpcspells_Struct_defensive_proc_get(void * jarg1) {
  unsigned short jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint16) ((arg1)->defensive_proc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_dproc_chance_set(void * jarg1, short jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->dproc_chance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBnpcspells_Struct_dproc_chance_get(void * jarg1) {
  short jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (int16) ((arg1)->dproc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_fail_recast_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->fail_recast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_fail_recast_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->fail_recast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->engaged_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->engaged_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->engaged_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->engaged_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_beneficial_self_chance_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_beneficial_self_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_beneficial_self_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_beneficial_self_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_beneficial_other_chance_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_beneficial_other_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_beneficial_other_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_beneficial_other_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_detrimental_chance_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_detrimental_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_Struct_engaged_detrimental_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_detrimental_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_pursue_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->pursue_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_pursue_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->pursue_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_pursue_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->pursue_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_pursue_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->pursue_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_pursue_detrimental_chance_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->pursue_detrimental_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_Struct_pursue_detrimental_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->pursue_detrimental_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_idle_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->idle_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_idle_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->idle_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_idle_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->idle_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspells_Struct_idle_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->idle_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_idle_beneficial_chance_set(void * jarg1, unsigned char jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->idle_beneficial_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBnpcspells_Struct_idle_beneficial_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->idle_beneficial_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspells_Struct_entries_set(void * jarg1, void * jarg2) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  std::vector< DBnpcspells_entries_Struct > *arg2 = (std::vector< DBnpcspells_entries_Struct > *) 0 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  arg2 = (std::vector< DBnpcspells_entries_Struct > *)jarg2; 
  if (arg1) (arg1)->entries = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBnpcspells_Struct_entries_get(void * jarg1) {
  void * jresult ;
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  std::vector< DBnpcspells_entries_Struct > *result = 0 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  result = (std::vector< DBnpcspells_entries_Struct > *)& ((arg1)->entries);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBnpcspells_Struct() {
  void * jresult ;
  DBnpcspells_Struct *result = 0 ;
  
  result = (DBnpcspells_Struct *)new DBnpcspells_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBnpcspells_Struct(void * jarg1) {
  DBnpcspells_Struct *arg1 = (DBnpcspells_Struct *) 0 ;
  
  arg1 = (DBnpcspells_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_Struct_parent_list_set(void * jarg1, unsigned int jarg2) {
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->parent_list = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspellseffects_Struct_parent_list_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  result = (uint32) ((arg1)->parent_list);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_Struct_numentries_set(void * jarg1, unsigned int jarg2) {
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->numentries = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBnpcspellseffects_Struct_numentries_get(void * jarg1) {
  unsigned int jresult ;
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  result = (uint32) ((arg1)->numentries);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBnpcspellseffects_Struct_entries_set(void * jarg1, void * jarg2) {
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  DBnpcspellseffects_entries_Struct *arg2 = (DBnpcspellseffects_entries_Struct *) (DBnpcspellseffects_entries_Struct *)0 ;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  arg2 = (DBnpcspellseffects_entries_Struct *)jarg2; 
  {
    size_t ii;
    DBnpcspellseffects_entries_Struct *b = (DBnpcspellseffects_entries_Struct *) arg1->entries;
    for (ii = 0; ii < (size_t)0; ii++) b[ii] = *((DBnpcspellseffects_entries_Struct *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBnpcspellseffects_Struct_entries_get(void * jarg1) {
  void * jresult ;
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  DBnpcspellseffects_entries_Struct *result = 0 ;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  result = (DBnpcspellseffects_entries_Struct *)(DBnpcspellseffects_entries_Struct *) ((arg1)->entries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBnpcspellseffects_Struct() {
  void * jresult ;
  DBnpcspellseffects_Struct *result = 0 ;
  
  result = (DBnpcspellseffects_Struct *)new DBnpcspellseffects_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBnpcspellseffects_Struct(void * jarg1) {
  DBnpcspellseffects_Struct *arg1 = (DBnpcspellseffects_Struct *) 0 ;
  
  arg1 = (DBnpcspellseffects_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_spellid_set(void * jarg1, unsigned short jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBbotspells_entries_Struct_spellid_get(void * jarg1) {
  unsigned short jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_minlevel_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->minlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_entries_Struct_minlevel_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->minlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_maxlevel_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->maxlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_entries_Struct_maxlevel_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->maxlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_type_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_entries_Struct_type_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (uint32) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_manacost_set(void * jarg1, short jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->manacost = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBbotspells_entries_Struct_manacost_get(void * jarg1) {
  short jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->manacost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_priority_set(void * jarg1, short jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBbotspells_entries_Struct_priority_get(void * jarg1) {
  short jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_recast_delay_set(void * jarg1, int jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->recast_delay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DBbotspells_entries_Struct_recast_delay_get(void * jarg1) {
  int jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int32 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (int32) ((arg1)->recast_delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_resist_adjust_set(void * jarg1, short jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->resist_adjust = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBbotspells_entries_Struct_resist_adjust_get(void * jarg1) {
  short jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (int16) ((arg1)->resist_adjust);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_min_hp_set(void * jarg1, signed char jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int8 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->min_hp = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_DBbotspells_entries_Struct_min_hp_get(void * jarg1) {
  signed char jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int8 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (int8) ((arg1)->min_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_max_hp_set(void * jarg1, signed char jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int8 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->max_hp = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_DBbotspells_entries_Struct_max_hp_get(void * jarg1) {
  signed char jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  int8 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (int8) ((arg1)->max_hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_bucket_name_set(void * jarg1, const char * jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bucket_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DBbotspells_entries_Struct_bucket_name_get(void * jarg1) {
  const char * jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (std::string *) & ((arg1)->bucket_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_bucket_value_set(void * jarg1, const char * jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bucket_value = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DBbotspells_entries_Struct_bucket_value_get(void * jarg1) {
  const char * jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (std::string *) & ((arg1)->bucket_value);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_entries_Struct_bucket_comparison_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->bucket_comparison = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_entries_Struct_bucket_comparison_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  result = (uint8) ((arg1)->bucket_comparison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBbotspells_entries_Struct() {
  void * jresult ;
  DBbotspells_entries_Struct *result = 0 ;
  
  result = (DBbotspells_entries_Struct *)new DBbotspells_entries_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBbotspells_entries_Struct(void * jarg1) {
  DBbotspells_entries_Struct *arg1 = (DBbotspells_entries_Struct *) 0 ;
  
  arg1 = (DBbotspells_entries_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_parent_list_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->parent_list = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_parent_list_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->parent_list);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_attack_proc_set(void * jarg1, unsigned short jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->attack_proc = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBbotspells_Struct_attack_proc_get(void * jarg1) {
  unsigned short jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint16) ((arg1)->attack_proc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_proc_chance_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->proc_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_Struct_proc_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->proc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_range_proc_set(void * jarg1, unsigned short jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->range_proc = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBbotspells_Struct_range_proc_get(void * jarg1) {
  unsigned short jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint16) ((arg1)->range_proc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_rproc_chance_set(void * jarg1, short jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->rproc_chance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBbotspells_Struct_rproc_chance_get(void * jarg1) {
  short jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (int16) ((arg1)->rproc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_defensive_proc_set(void * jarg1, unsigned short jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->defensive_proc = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBbotspells_Struct_defensive_proc_get(void * jarg1) {
  unsigned short jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint16) ((arg1)->defensive_proc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_dproc_chance_set(void * jarg1, short jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->dproc_chance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBbotspells_Struct_dproc_chance_get(void * jarg1) {
  short jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (int16) ((arg1)->dproc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_fail_recast_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->fail_recast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_fail_recast_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->fail_recast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->engaged_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->engaged_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->engaged_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->engaged_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_beneficial_self_chance_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_beneficial_self_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_beneficial_self_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_beneficial_self_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_beneficial_other_chance_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_beneficial_other_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_beneficial_other_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_beneficial_other_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_detrimental_chance_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->engaged_detrimental_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_Struct_engaged_detrimental_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->engaged_detrimental_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_pursue_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->pursue_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_pursue_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->pursue_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_pursue_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->pursue_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_pursue_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->pursue_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_pursue_detrimental_chance_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->pursue_detrimental_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_Struct_pursue_detrimental_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->pursue_detrimental_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_idle_no_sp_recast_min_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->idle_no_sp_recast_min = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_idle_no_sp_recast_min_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->idle_no_sp_recast_min);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_idle_no_sp_recast_max_set(void * jarg1, unsigned int jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->idle_no_sp_recast_max = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBbotspells_Struct_idle_no_sp_recast_max_get(void * jarg1) {
  unsigned int jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint32) ((arg1)->idle_no_sp_recast_max);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_idle_beneficial_chance_set(void * jarg1, unsigned char jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->idle_beneficial_chance = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBbotspells_Struct_idle_beneficial_chance_get(void * jarg1) {
  unsigned char jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (uint8) ((arg1)->idle_beneficial_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBbotspells_Struct_entries_set(void * jarg1, void * jarg2) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  std::vector< DBbotspells_entries_Struct > *arg2 = (std::vector< DBbotspells_entries_Struct > *) 0 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  arg2 = (std::vector< DBbotspells_entries_Struct > *)jarg2; 
  if (arg1) (arg1)->entries = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBbotspells_Struct_entries_get(void * jarg1) {
  void * jresult ;
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  std::vector< DBbotspells_entries_Struct > *result = 0 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  result = (std::vector< DBbotspells_entries_Struct > *)& ((arg1)->entries);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBbotspells_Struct() {
  void * jresult ;
  DBbotspells_Struct *result = 0 ;
  
  result = (DBbotspells_Struct *)new DBbotspells_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBbotspells_Struct(void * jarg1) {
  DBbotspells_Struct *arg1 = (DBbotspells_Struct *) 0 ;
  
  arg1 = (DBbotspells_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_tradeskill_set(void * jarg1, void * jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  EQ::skills::SkillType arg2 ;
  EQ::skills::SkillType *argp2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  argp2 = (EQ::skills::SkillType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::skills::SkillType", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->tradeskill = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_tradeskill_get(void * jarg1) {
  void * jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  EQ::skills::SkillType result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result =  ((arg1)->tradeskill);
  jresult = new EQ::skills::SkillType(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_skill_needed_set(void * jarg1, short jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->skill_needed = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_skill_needed_get(void * jarg1) {
  short jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  int16 result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (int16) ((arg1)->skill_needed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_trivial_set(void * jarg1, unsigned short jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->trivial = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_trivial_get(void * jarg1) {
  unsigned short jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint16 result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (uint16) ((arg1)->trivial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_nofail_set(void * jarg1, unsigned int jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->nofail = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_nofail_get(void * jarg1) {
  unsigned int jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (bool) ((arg1)->nofail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_replace_container_set(void * jarg1, unsigned int jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->replace_container = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_replace_container_get(void * jarg1) {
  unsigned int jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (bool) ((arg1)->replace_container);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_onsuccess_set(void * jarg1, void * jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::vector< std::pair< uint32,uint8 > > *arg2 = (std::vector< std::pair< uint32,uint8 > > *) 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (std::vector< std::pair< uint32,uint8 > > *)jarg2; 
  if (arg1) (arg1)->onsuccess = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_onsuccess_get(void * jarg1) {
  void * jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::vector< std::pair< uint32,uint8 > > *result = 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (std::vector< std::pair< uint32,uint8 > > *)& ((arg1)->onsuccess);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_onfail_set(void * jarg1, void * jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::vector< std::pair< uint32,uint8 > > *arg2 = (std::vector< std::pair< uint32,uint8 > > *) 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (std::vector< std::pair< uint32,uint8 > > *)jarg2; 
  if (arg1) (arg1)->onfail = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_onfail_get(void * jarg1) {
  void * jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::vector< std::pair< uint32,uint8 > > *result = 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (std::vector< std::pair< uint32,uint8 > > *)& ((arg1)->onfail);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_salvage_set(void * jarg1, void * jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::vector< std::pair< uint32,uint8 > > *arg2 = (std::vector< std::pair< uint32,uint8 > > *) 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (std::vector< std::pair< uint32,uint8 > > *)jarg2; 
  if (arg1) (arg1)->salvage = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_salvage_get(void * jarg1) {
  void * jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::vector< std::pair< uint32,uint8 > > *result = 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (std::vector< std::pair< uint32,uint8 > > *)& ((arg1)->salvage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_name_set(void * jarg1, const char * jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_name_get(void * jarg1) {
  const char * jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_must_learn_set(void * jarg1, unsigned char jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->must_learn = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_must_learn_get(void * jarg1) {
  unsigned char jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint8 result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (uint8) ((arg1)->must_learn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_has_learnt_set(void * jarg1, unsigned int jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->has_learnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_has_learnt_get(void * jarg1) {
  unsigned int jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (bool) ((arg1)->has_learnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_madecount_set(void * jarg1, unsigned int jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->madecount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_madecount_get(void * jarg1) {
  unsigned int jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (uint32) ((arg1)->madecount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_recipe_id_set(void * jarg1, unsigned int jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint32 arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->recipe_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_recipe_id_get(void * jarg1) {
  unsigned int jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  uint32 result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (uint32) ((arg1)->recipe_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_quest_set(void * jarg1, unsigned int jarg2) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool arg2 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->quest = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DBTradeskillRecipe_Struct_quest_get(void * jarg1) {
  unsigned int jresult ;
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  bool result;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  result = (bool) ((arg1)->quest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DBTradeskillRecipe_Struct() {
  void * jresult ;
  DBTradeskillRecipe_Struct *result = 0 ;
  
  result = (DBTradeskillRecipe_Struct *)new DBTradeskillRecipe_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DBTradeskillRecipe_Struct(void * jarg1) {
  DBTradeskillRecipe_Struct *arg1 = (DBTradeskillRecipe_Struct *) 0 ;
  
  arg1 = (DBTradeskillRecipe_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_npc_type_set(void * jarg1, unsigned int jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint32 arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->npc_type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetRecord_npc_type_get(void * jarg1) {
  unsigned int jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint32 result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (uint32) ((arg1)->npc_type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_temporary_set(void * jarg1, unsigned int jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  bool arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->temporary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetRecord_temporary_get(void * jarg1) {
  unsigned int jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  bool result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (bool) ((arg1)->temporary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_petpower_set(void * jarg1, short jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  int16 arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->petpower = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_PetRecord_petpower_get(void * jarg1) {
  short jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  int16 result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (int16) ((arg1)->petpower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_petcontrol_set(void * jarg1, unsigned char jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint8 arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->petcontrol = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PetRecord_petcontrol_get(void * jarg1) {
  unsigned char jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint8 result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (uint8) ((arg1)->petcontrol);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_petnaming_set(void * jarg1, unsigned char jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint8 arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->petnaming = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PetRecord_petnaming_get(void * jarg1) {
  unsigned char jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint8 result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (uint8) ((arg1)->petnaming);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_monsterflag_set(void * jarg1, unsigned int jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  bool arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->monsterflag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetRecord_monsterflag_get(void * jarg1) {
  unsigned int jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  bool result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (bool) ((arg1)->monsterflag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetRecord_equipmentset_set(void * jarg1, unsigned int jarg2) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint32 arg2 ;
  
  arg1 = (PetRecord *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->equipmentset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetRecord_equipmentset_get(void * jarg1) {
  unsigned int jresult ;
  PetRecord *arg1 = (PetRecord *) 0 ;
  uint32 result;
  
  arg1 = (PetRecord *)jarg1; 
  result = (uint32) ((arg1)->equipmentset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PetRecord() {
  void * jresult ;
  PetRecord *result = 0 ;
  
  result = (PetRecord *)new PetRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PetRecord(void * jarg1) {
  PetRecord *arg1 = (PetRecord *) 0 ;
  
  arg1 = (PetRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_npc_type_set(void * jarg1, unsigned int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  uint32 arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->npc_type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AuraRecord_npc_type_get(void * jarg1) {
  unsigned int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  uint32 result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (uint32) ((arg1)->npc_type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_name_set(void * jarg1, char * jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 64-1);
      arg1->name[64-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AuraRecord_name_get(void * jarg1) {
  char * jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  char *result = 0 ;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_spell_id_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spell_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_spell_id_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->spell_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_distance_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_distance_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_aura_type_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->aura_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_aura_type_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->aura_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_spawn_type_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spawn_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_spawn_type_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->spawn_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_movement_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->movement = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_movement_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->movement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_duration_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_duration_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_icon_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->icon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_icon_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->icon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AuraRecord_cast_time_set(void * jarg1, int jarg2) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int arg2 ;
  
  arg1 = (AuraRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->cast_time = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AuraRecord_cast_time_get(void * jarg1) {
  int jresult ;
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  int result;
  
  arg1 = (AuraRecord *)jarg1; 
  result = (int) ((arg1)->cast_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AuraRecord() {
  void * jresult ;
  AuraRecord *result = 0 ;
  
  result = (AuraRecord *)new AuraRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AuraRecord(void * jarg1) {
  AuraRecord *arg1 = (AuraRecord *) 0 ;
  
  arg1 = (AuraRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_SpellID_set(void * jarg1, unsigned short jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint16 arg2 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PetInfo_SpellID_get(void * jarg1) {
  unsigned short jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint16 result;
  
  arg1 = (PetInfo *)jarg1; 
  result = (uint16) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_petpower_set(void * jarg1, short jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  int16 arg2 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->petpower = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_PetInfo_petpower_get(void * jarg1) {
  short jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  int16 result;
  
  arg1 = (PetInfo *)jarg1; 
  result = (int16) ((arg1)->petpower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_HP_set(void * jarg1, unsigned int jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->HP = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetInfo_HP_get(void * jarg1) {
  unsigned int jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint32 result;
  
  arg1 = (PetInfo *)jarg1; 
  result = (uint32) ((arg1)->HP);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_Mana_set(void * jarg1, unsigned int jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Mana = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetInfo_Mana_get(void * jarg1) {
  unsigned int jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint32 result;
  
  arg1 = (PetInfo *)jarg1; 
  result = (uint32) ((arg1)->Mana);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_size_set(void * jarg1, float jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  float arg2 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PetInfo_size_get(void * jarg1) {
  float jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  float result;
  
  arg1 = (PetInfo *)jarg1; 
  result = (float) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_Buffs_set(void * jarg1, void * jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  SpellBuff_Struct *arg2 = (SpellBuff_Struct *) (SpellBuff_Struct *)0 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (SpellBuff_Struct *)jarg2; 
  {
    size_t ii;
    SpellBuff_Struct *b = (SpellBuff_Struct *) arg1->Buffs;
    for (ii = 0; ii < (size_t)PET_BUFF_COUNT; ii++) b[ii] = *((SpellBuff_Struct *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PetInfo_Buffs_get(void * jarg1) {
  void * jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  SpellBuff_Struct *result = 0 ;
  
  arg1 = (PetInfo *)jarg1; 
  result = (SpellBuff_Struct *)(SpellBuff_Struct *) ((arg1)->Buffs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_Items_set(void * jarg1, void * jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->Items;
    for (ii = 0; ii < (size_t)EQ::invslot::EQUIPMENT_COUNT; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PetInfo_Items_get(void * jarg1) {
  void * jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (PetInfo *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->Items);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_Name_set(void * jarg1, char * jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 64-1);
      arg1->Name[64-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PetInfo_Name_get(void * jarg1) {
  char * jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (PetInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetInfo_taunting_set(void * jarg1, unsigned int jarg2) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (PetInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->taunting = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetInfo_taunting_get(void * jarg1) {
  unsigned int jresult ;
  PetInfo *arg1 = (PetInfo *) 0 ;
  bool result;
  
  arg1 = (PetInfo *)jarg1; 
  result = (bool) ((arg1)->taunting);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PetInfo() {
  void * jresult ;
  PetInfo *result = 0 ;
  
  result = (PetInfo *)new PetInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PetInfo(void * jarg1) {
  PetInfo *arg1 = (PetInfo *) 0 ;
  
  arg1 = (PetInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneSpellsBlocked_spellid_set(void * jarg1, unsigned int jarg2) {
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneSpellsBlocked_spellid_get(void * jarg1) {
  unsigned int jresult ;
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  uint32 result;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  result = (uint32) ((arg1)->spellid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneSpellsBlocked_type_set(void * jarg1, signed char jarg2) {
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  int8 arg2 ;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ZoneSpellsBlocked_type_get(void * jarg1) {
  signed char jresult ;
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  int8 result;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  result = (int8) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneSpellsBlocked_message_set(void * jarg1, char * jarg2) {
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->message, (const char *)arg2, 256-1);
      arg1->message[256-1] = 0;
    } else {
      arg1->message[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ZoneSpellsBlocked_message_get(void * jarg1) {
  char * jresult ;
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  char *result = 0 ;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  result = (char *)(char *) ((arg1)->message);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneSpellsBlocked() {
  void * jresult ;
  ZoneSpellsBlocked *result = 0 ;
  
  result = (ZoneSpellsBlocked *)new ZoneSpellsBlocked();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneSpellsBlocked(void * jarg1) {
  ZoneSpellsBlocked *arg1 = (ZoneSpellsBlocked *) 0 ;
  
  arg1 = (ZoneSpellsBlocked *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TraderCharges_Struct_ItemID_set(void * jarg1, void * jarg2) {
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->ItemID;
    for (ii = 0; ii < (size_t)80; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TraderCharges_Struct_ItemID_get(void * jarg1) {
  void * jresult ;
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->ItemID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TraderCharges_Struct_SerialNumber_set(void * jarg1, void * jarg2) {
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->SerialNumber;
    for (ii = 0; ii < (size_t)80; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TraderCharges_Struct_SerialNumber_get(void * jarg1) {
  void * jresult ;
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->SerialNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TraderCharges_Struct_ItemCost_set(void * jarg1, void * jarg2) {
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->ItemCost;
    for (ii = 0; ii < (size_t)80; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TraderCharges_Struct_ItemCost_get(void * jarg1) {
  void * jresult ;
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->ItemCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TraderCharges_Struct_Charges_set(void * jarg1, void * jarg2) {
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  int32 *arg2 = (int32 *) (int32 *)0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  arg2 = (int32 *)jarg2; 
  {
    size_t ii;
    int32 *b = (int32 *) arg1->Charges;
    for (ii = 0; ii < (size_t)80; ii++) b[ii] = *((int32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TraderCharges_Struct_Charges_get(void * jarg1) {
  void * jresult ;
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  int32 *result = 0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  result = (int32 *)(int32 *) ((arg1)->Charges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TraderCharges_Struct() {
  void * jresult ;
  TraderCharges_Struct *result = 0 ;
  
  result = (TraderCharges_Struct *)new TraderCharges_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TraderCharges_Struct(void * jarg1) {
  TraderCharges_Struct *arg1 = (TraderCharges_Struct *) 0 ;
  
  arg1 = (TraderCharges_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MaxMercStanceID_get() {
  int jresult ;
  int result;
  
  result = (int)(int)MaxMercStanceID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercStanceInfo_ProficiencyID_set(void * jarg1, unsigned char jarg2) {
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercStanceInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ProficiencyID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercStanceInfo_ProficiencyID_get(void * jarg1) {
  unsigned char jresult ;
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercStanceInfo *)jarg1; 
  result = (uint8) ((arg1)->ProficiencyID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercStanceInfo_ClassID_set(void * jarg1, unsigned char jarg2) {
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercStanceInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ClassID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercStanceInfo_ClassID_get(void * jarg1) {
  unsigned char jresult ;
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercStanceInfo *)jarg1; 
  result = (uint8) ((arg1)->ClassID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercStanceInfo_StanceID_set(void * jarg1, unsigned int jarg2) {
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercStanceInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->StanceID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercStanceInfo_StanceID_get(void * jarg1) {
  unsigned int jresult ;
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercStanceInfo *)jarg1; 
  result = (uint32) ((arg1)->StanceID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercStanceInfo_IsDefault_set(void * jarg1, unsigned char jarg2) {
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercStanceInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->IsDefault = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercStanceInfo_IsDefault_get(void * jarg1) {
  unsigned char jresult ;
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercStanceInfo *)jarg1; 
  result = (uint8) ((arg1)->IsDefault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercStanceInfo() {
  void * jresult ;
  MercStanceInfo *result = 0 ;
  
  result = (MercStanceInfo *)new MercStanceInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercStanceInfo(void * jarg1) {
  MercStanceInfo *arg1 = (MercStanceInfo *) 0 ;
  
  arg1 = (MercStanceInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercTemplateID_set(void * jarg1, unsigned int jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercTemplateID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercTemplate_MercTemplateID_get(void * jarg1) {
  unsigned int jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint32) ((arg1)->MercTemplateID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercType_set(void * jarg1, unsigned int jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercTemplate_MercType_get(void * jarg1) {
  unsigned int jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint32) ((arg1)->MercType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercSubType_set(void * jarg1, unsigned int jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercSubType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercTemplate_MercSubType_get(void * jarg1) {
  unsigned int jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint32) ((arg1)->MercSubType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_RaceID_set(void * jarg1, unsigned short jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->RaceID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercTemplate_RaceID_get(void * jarg1) {
  unsigned short jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint16 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint16) ((arg1)->RaceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_ClassID_set(void * jarg1, unsigned char jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ClassID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercTemplate_ClassID_get(void * jarg1) {
  unsigned char jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint8) ((arg1)->ClassID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercNPCID_set(void * jarg1, unsigned int jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercNPCID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercTemplate_MercNPCID_get(void * jarg1) {
  unsigned int jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint32) ((arg1)->MercNPCID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_ProficiencyID_set(void * jarg1, unsigned char jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ProficiencyID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercTemplate_ProficiencyID_get(void * jarg1) {
  unsigned char jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint8) ((arg1)->ProficiencyID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_TierID_set(void * jarg1, unsigned char jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->TierID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercTemplate_TierID_get(void * jarg1) {
  unsigned char jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint8) ((arg1)->TierID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_CostFormula_set(void * jarg1, unsigned char jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->CostFormula = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercTemplate_CostFormula_get(void * jarg1) {
  unsigned char jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint8) ((arg1)->CostFormula);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_ClientVersion_set(void * jarg1, unsigned int jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ClientVersion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercTemplate_ClientVersion_get(void * jarg1) {
  unsigned int jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint32) ((arg1)->ClientVersion);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercNameType_set(void * jarg1, unsigned char jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->MercNameType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercTemplate_MercNameType_get(void * jarg1) {
  unsigned char jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint8 result;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint8) ((arg1)->MercNameType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercNamePrefix_set(void * jarg1, char * jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->MercNamePrefix, (const char *)arg2, 25-1);
      arg1->MercNamePrefix[25-1] = 0;
    } else {
      arg1->MercNamePrefix[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MercTemplate_MercNamePrefix_get(void * jarg1) {
  char * jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  char *result = 0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (char *)(char *) ((arg1)->MercNamePrefix);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_MercNameSuffix_set(void * jarg1, char * jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->MercNameSuffix, (const char *)arg2, 25-1);
      arg1->MercNameSuffix[25-1] = 0;
    } else {
      arg1->MercNameSuffix[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MercTemplate_MercNameSuffix_get(void * jarg1) {
  char * jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  char *result = 0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (char *)(char *) ((arg1)->MercNameSuffix);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercTemplate_Stances_set(void * jarg1, void * jarg2) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 *arg2 = (uint32 *) (uint32 *)0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  arg2 = (uint32 *)jarg2; 
  {
    size_t ii;
    uint32 *b = (uint32 *) arg1->Stances;
    for (ii = 0; ii < (size_t)MaxMercStanceID; ii++) b[ii] = *((uint32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MercTemplate_Stances_get(void * jarg1) {
  void * jresult ;
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  uint32 *result = 0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  result = (uint32 *)(uint32 *) ((arg1)->Stances);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercTemplate() {
  void * jresult ;
  MercTemplate *result = 0 ;
  
  result = (MercTemplate *)new MercTemplate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercTemplate(void * jarg1) {
  MercTemplate *arg1 = (MercTemplate *) 0 ;
  
  arg1 = (MercTemplate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_mercid_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->mercid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_mercid_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->mercid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_slot_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->slot = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_slot_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_merc_name_set(void * jarg1, char * jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->merc_name, (const char *)arg2, 64-1);
      arg1->merc_name[64-1] = 0;
    } else {
      arg1->merc_name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MercInfo_merc_name_get(void * jarg1) {
  char * jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (MercInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->merc_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_MercTemplateID_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercTemplateID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_MercTemplateID_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->MercTemplateID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_myTemplate_set(void * jarg1, void * jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  MercTemplate *arg2 = (MercTemplate *) 0 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (MercTemplate *)jarg2; 
  if (arg1) (arg1)->myTemplate = (MercTemplate const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MercInfo_myTemplate_get(void * jarg1) {
  void * jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  MercTemplate *result = 0 ;
  
  arg1 = (MercInfo *)jarg1; 
  result = (MercTemplate *) ((arg1)->myTemplate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_SuspendedTime_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->SuspendedTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_SuspendedTime_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->SuspendedTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_IsSuspended_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsSuspended = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_IsSuspended_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  bool result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (bool) ((arg1)->IsSuspended);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_MercTimerRemaining_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->MercTimerRemaining = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_MercTimerRemaining_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->MercTimerRemaining);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_Gender_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_Gender_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->Gender);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_MercSize_set(void * jarg1, float jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  float arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MercSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MercInfo_MercSize_get(void * jarg1) {
  float jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  float result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (float) ((arg1)->MercSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_State_set(void * jarg1, int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->State = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercInfo_State_get(void * jarg1) {
  int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (int32) ((arg1)->State);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_Stance_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Stance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_Stance_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->Stance);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_hp_set(void * jarg1, int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->hp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercInfo_hp_get(void * jarg1) {
  int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (int32) ((arg1)->hp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_mana_set(void * jarg1, int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->mana = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercInfo_mana_get(void * jarg1) {
  int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (int32) ((arg1)->mana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_endurance_set(void * jarg1, int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->endurance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercInfo_endurance_get(void * jarg1) {
  int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  int32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (int32) ((arg1)->endurance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_face_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->face = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_face_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->face);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_luclinHairStyle_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->luclinHairStyle = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_luclinHairStyle_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->luclinHairStyle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_luclinHairColor_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->luclinHairColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_luclinHairColor_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->luclinHairColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_luclinEyeColor_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->luclinEyeColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_luclinEyeColor_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->luclinEyeColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_luclinEyeColor2_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->luclinEyeColor2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_luclinEyeColor2_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->luclinEyeColor2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_luclinBeardColor_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->luclinBeardColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_luclinBeardColor_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->luclinBeardColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_luclinBeard_set(void * jarg1, unsigned char jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->luclinBeard = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercInfo_luclinBeard_get(void * jarg1) {
  unsigned char jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint8 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint8) ((arg1)->luclinBeard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_drakkinHeritage_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkinHeritage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_drakkinHeritage_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->drakkinHeritage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_drakkinTattoo_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkinTattoo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_drakkinTattoo_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->drakkinTattoo);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercInfo_drakkinDetails_set(void * jarg1, unsigned int jarg2) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkinDetails = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercInfo_drakkinDetails_get(void * jarg1) {
  unsigned int jresult ;
  MercInfo *arg1 = (MercInfo *) 0 ;
  uint32 result;
  
  arg1 = (MercInfo *)jarg1; 
  result = (uint32) ((arg1)->drakkinDetails);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercInfo() {
  void * jresult ;
  MercInfo *result = 0 ;
  
  result = (MercInfo *)new MercInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercInfo(void * jarg1) {
  MercInfo *arg1 = (MercInfo *) 0 ;
  
  arg1 = (MercInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_proficiencyid_set(void * jarg1, unsigned char jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->proficiencyid = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercSpellEntry_proficiencyid_get(void * jarg1) {
  unsigned char jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint8 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint8) ((arg1)->proficiencyid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_spellid_set(void * jarg1, unsigned short jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->spellid = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercSpellEntry_spellid_get(void * jarg1) {
  unsigned short jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint16 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint16) ((arg1)->spellid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_type_set(void * jarg1, unsigned int jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercSpellEntry_type_get(void * jarg1) {
  unsigned int jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint32 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint32) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_stance_set(void * jarg1, short jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  int16 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->stance = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MercSpellEntry_stance_get(void * jarg1) {
  short jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  int16 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (int16) ((arg1)->stance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_minlevel_set(void * jarg1, unsigned char jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->minlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercSpellEntry_minlevel_get(void * jarg1) {
  unsigned char jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint8 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint8) ((arg1)->minlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_maxlevel_set(void * jarg1, unsigned char jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->maxlevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_MercSpellEntry_maxlevel_get(void * jarg1) {
  unsigned char jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint8 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint8) ((arg1)->maxlevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_slot_set(void * jarg1, short jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  int16 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->slot = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_MercSpellEntry_slot_get(void * jarg1) {
  short jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  int16 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (int16) ((arg1)->slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_proc_chance_set(void * jarg1, unsigned short jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint16 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->proc_chance = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MercSpellEntry_proc_chance_get(void * jarg1) {
  unsigned short jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint16 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint16) ((arg1)->proc_chance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSpellEntry_time_cancast_set(void * jarg1, unsigned int jarg2) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->time_cancast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MercSpellEntry_time_cancast_get(void * jarg1) {
  unsigned int jresult ;
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  uint32 result;
  
  arg1 = (MercSpellEntry *)jarg1; 
  result = (uint32) ((arg1)->time_cancast);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercSpellEntry() {
  void * jresult ;
  MercSpellEntry *result = 0 ;
  
  result = (MercSpellEntry *)new MercSpellEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercSpellEntry(void * jarg1) {
  MercSpellEntry *arg1 = (MercSpellEntry *) 0 ;
  
  arg1 = (MercSpellEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientMercEntry_id_set(void * jarg1, unsigned int jarg2) {
  ClientMercEntry *arg1 = (ClientMercEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ClientMercEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientMercEntry_id_get(void * jarg1) {
  unsigned int jresult ;
  ClientMercEntry *arg1 = (ClientMercEntry *) 0 ;
  uint32 result;
  
  arg1 = (ClientMercEntry *)jarg1; 
  result = (uint32) ((arg1)->id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientMercEntry_npcid_set(void * jarg1, unsigned int jarg2) {
  ClientMercEntry *arg1 = (ClientMercEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ClientMercEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->npcid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientMercEntry_npcid_get(void * jarg1) {
  unsigned int jresult ;
  ClientMercEntry *arg1 = (ClientMercEntry *) 0 ;
  uint32 result;
  
  arg1 = (ClientMercEntry *)jarg1; 
  result = (uint32) ((arg1)->npcid);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientMercEntry() {
  void * jresult ;
  ClientMercEntry *result = 0 ;
  
  result = (ClientMercEntry *)new ClientMercEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientMercEntry(void * jarg1) {
  ClientMercEntry *arg1 = (ClientMercEntry *) 0 ;
  
  arg1 = (ClientMercEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_item_id_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->item_id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_item_id_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->item_id);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_equip_slot_set(void * jarg1, short jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  int16 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->equip_slot = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_CharacterCorpseItemEntry_equip_slot_get(void * jarg1) {
  short jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  int16 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (int16) ((arg1)->equip_slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_charges_set(void * jarg1, unsigned short jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint16 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->charges = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CharacterCorpseItemEntry_charges_get(void * jarg1) {
  unsigned short jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint16 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint16) ((arg1)->charges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_lootslot_set(void * jarg1, unsigned short jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint16 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->lootslot = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CharacterCorpseItemEntry_lootslot_get(void * jarg1) {
  unsigned short jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint16 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint16) ((arg1)->lootslot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_1_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->aug_1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_1_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->aug_1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_2_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->aug_2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_2_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->aug_2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_3_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->aug_3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_3_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->aug_3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_4_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->aug_4 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_4_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->aug_4);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_5_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->aug_5 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_5_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->aug_5);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_6_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->aug_6 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_aug_6_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->aug_6);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_attuned_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->attuned = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_attuned_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  bool result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (bool) ((arg1)->attuned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_custom_data_set(void * jarg1, const char * jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->custom_data = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_CharacterCorpseItemEntry_custom_data_get(void * jarg1) {
  const char * jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (std::string *) & ((arg1)->custom_data);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_ornamenticon_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ornamenticon = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_ornamenticon_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->ornamenticon);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_ornamentidfile_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ornamentidfile = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_ornamentidfile_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->ornamentidfile);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseItemEntry_ornament_hero_model_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ornament_hero_model = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseItemEntry_ornament_hero_model_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  result = (uint32) ((arg1)->ornament_hero_model);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharacterCorpseItemEntry() {
  void * jresult ;
  CharacterCorpseItemEntry *result = 0 ;
  
  result = (CharacterCorpseItemEntry *)new CharacterCorpseItemEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharacterCorpseItemEntry(void * jarg1) {
  CharacterCorpseItemEntry *arg1 = (CharacterCorpseItemEntry *) 0 ;
  
  arg1 = (CharacterCorpseItemEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_locked_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->locked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_locked_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  bool result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (bool) ((arg1)->locked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_exp_set(void * jarg1, unsigned long long jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint64 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint64)jarg2; 
  if (arg1) (arg1)->exp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CharacterCorpseEntry_exp_get(void * jarg1) {
  unsigned long long jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint64 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint64) ((arg1)->exp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_gm_exp_set(void * jarg1, unsigned long long jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint64 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint64)jarg2; 
  if (arg1) (arg1)->gm_exp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_CharacterCorpseEntry_gm_exp_get(void * jarg1) {
  unsigned long long jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint64 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint64) ((arg1)->gm_exp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_size_set(void * jarg1, float jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  float arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CharacterCorpseEntry_size_get(void * jarg1) {
  float jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  float result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (float) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_level_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_level_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_race_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->race = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_race_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->race);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_gender_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->gender = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_gender_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->gender);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_class__set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->class_ = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_class__get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->class_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_deity_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->deity = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_deity_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->deity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_texture_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->texture = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_texture_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->texture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_helmtexture_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->helmtexture = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_helmtexture_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->helmtexture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_copper_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->copper = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_copper_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->copper);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_silver_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->silver = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_silver_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->silver);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_gold_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->gold = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_gold_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->gold);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_plat_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->plat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_plat_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->plat);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_item_tint_set(void * jarg1, void * jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  EQ::TintProfile arg2 ;
  EQ::TintProfile *argp2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  argp2 = (EQ::TintProfile *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQ::TintProfile", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->item_tint = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharacterCorpseEntry_item_tint_get(void * jarg1) {
  void * jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  EQ::TintProfile result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result =  ((arg1)->item_tint);
  jresult = new EQ::TintProfile(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_haircolor_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->haircolor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_haircolor_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->haircolor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_beardcolor_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->beardcolor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_beardcolor_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->beardcolor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_eyecolor1_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->eyecolor1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_eyecolor1_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->eyecolor1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_eyecolor2_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->eyecolor2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_eyecolor2_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->eyecolor2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_hairstyle_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->hairstyle = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_hairstyle_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->hairstyle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_face_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->face = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_face_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->face);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_beard_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->beard = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_beard_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->beard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_killed_by_set(void * jarg1, unsigned char jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->killed_by = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharacterCorpseEntry_killed_by_get(void * jarg1) {
  unsigned char jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint8 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint8) ((arg1)->killed_by);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_rezzable_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rezzable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_rezzable_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  bool result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (bool) ((arg1)->rezzable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_rez_time_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->rez_time = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_rez_time_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->rez_time);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_drakkin_heritage_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkin_heritage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_drakkin_heritage_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->drakkin_heritage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_drakkin_tattoo_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkin_tattoo = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_drakkin_tattoo_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->drakkin_tattoo);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_drakkin_details_set(void * jarg1, unsigned int jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 arg2 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->drakkin_details = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharacterCorpseEntry_drakkin_details_get(void * jarg1) {
  unsigned int jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  uint32 result;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (uint32) ((arg1)->drakkin_details);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharacterCorpseEntry_items_set(void * jarg1, void * jarg2) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  std::vector< CharacterCorpseItemEntry > *arg2 = (std::vector< CharacterCorpseItemEntry > *) 0 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  arg2 = (std::vector< CharacterCorpseItemEntry > *)jarg2; 
  if (arg1) (arg1)->items = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharacterCorpseEntry_items_get(void * jarg1) {
  void * jresult ;
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  std::vector< CharacterCorpseItemEntry > *result = 0 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  result = (std::vector< CharacterCorpseItemEntry > *)& ((arg1)->items);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharacterCorpseEntry() {
  void * jresult ;
  CharacterCorpseEntry *result = 0 ;
  
  result = (CharacterCorpseEntry *)new CharacterCorpseEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharacterCorpseEntry(void * jarg1) {
  CharacterCorpseEntry *arg1 = (CharacterCorpseEntry *) 0 ;
  
  arg1 = (CharacterCorpseEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetStruct_race_id_set(void * jarg1, unsigned short jarg2) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint16 arg2 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->race_id = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_PetStruct_race_id_get(void * jarg1) {
  unsigned short jresult ;
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint16 result;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  result = (uint16) ((arg1)->race_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetStruct_texture_set(void * jarg1, unsigned char jarg2) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->texture = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PetStruct_texture_get(void * jarg1) {
  unsigned char jresult ;
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 result;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  result = (uint8) ((arg1)->texture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetStruct_helm_texture_set(void * jarg1, unsigned char jarg2) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->helm_texture = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PetStruct_helm_texture_get(void * jarg1) {
  unsigned char jresult ;
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 result;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  result = (uint8) ((arg1)->helm_texture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetStruct_gender_set(void * jarg1, unsigned char jarg2) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->gender = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PetStruct_gender_get(void * jarg1) {
  unsigned char jresult ;
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 result;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  result = (uint8) ((arg1)->gender);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetStruct_size_modifier_set(void * jarg1, float jarg2) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  float arg2 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size_modifier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PetStruct_size_modifier_get(void * jarg1) {
  float jresult ;
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  float result;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  result = (float) ((arg1)->size_modifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetStruct_face_set(void * jarg1, unsigned char jarg2) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->face = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PetStruct_face_get(void * jarg1) {
  unsigned char jresult ;
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  uint8 result;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  result = (uint8) ((arg1)->face);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PetStruct() {
  void * jresult ;
  BeastlordPetData::PetStruct *result = 0 ;
  
  result = (BeastlordPetData::PetStruct *)new BeastlordPetData::PetStruct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PetStruct(void * jarg1) {
  BeastlordPetData::PetStruct *arg1 = (BeastlordPetData::PetStruct *) 0 ;
  
  arg1 = (BeastlordPetData::PetStruct *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CreateNewSpawn_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::CreateNewSpawn;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddNewSpawngroup_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::AddNewSpawngroup;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpdateAppearance_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::UpdateAppearance;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveSpawn_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::RemoveSpawn;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DeleteSpawn_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::DeleteSpawn;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddSpawnFromSpawngroup_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::AddSpawnFromSpawngroup;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CreateNewNPC_get() {
  int jresult ;
  int result;
  
  result = (int)NPCSpawnTypes::CreateNewNPC;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RaidLeader_get() {
  int jresult ;
  int result;
  
  result = (int)RaidLootTypes::RaidLeader;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GroupLeader_get() {
  int jresult ;
  int result;
  
  result = (int)RaidLootTypes::GroupLeader;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Selected_get() {
  int jresult ;
  int result;
  
  result = (int)RaidLootTypes::Selected;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_All_get() {
  int jresult ;
  int result;
  
  result = (int)RaidLootTypes::All;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneDatabase__SWIG_0() {
  void * jresult ;
  ZoneDatabase *result = 0 ;
  
  result = (ZoneDatabase *)new ZoneDatabase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneDatabase__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  ZoneDatabase *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (ZoneDatabase *)new ZoneDatabase((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneDatabase(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadWorldContainer(void * jarg1, unsigned int jarg2, void * jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  (arg1)->LoadWorldContainer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveWorldContainer(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  (arg1)->SaveWorldContainer(arg2,arg3,(EQ::ItemInstance const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteWorldContainer(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->DeleteWorldContainer(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_AddObject(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  Object_Struct *arg4 = 0 ;
  EQ::ItemInstance *arg5 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (Object_Struct *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Object_Struct const & is null", 0);
    return 0;
  } 
  arg5 = (EQ::ItemInstance *)jarg5; 
  result = (uint32)(arg1)->AddObject(arg2,arg3,(Object_Struct const &)*arg4,(EQ::ItemInstance const *)arg5);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateObject(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  Object_Struct *arg5 = 0 ;
  EQ::ItemInstance *arg6 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (Object_Struct *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Object_Struct const & is null", 0);
    return ;
  } 
  arg6 = (EQ::ItemInstance *)jarg6; 
  (arg1)->UpdateObject(arg2,arg3,arg4,(Object_Struct const &)*arg5,(EQ::ItemInstance const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteObject(void * jarg1, unsigned int jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DeleteObject(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadGroundSpawns(void * jarg1, unsigned int jarg2, short jarg3, void * jarg4) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  GroundSpawns *arg4 = (GroundSpawns *) 0 ;
  GroundSpawns *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (GroundSpawns *)jarg4; 
  result = (GroundSpawns *)(arg1)->LoadGroundSpawns(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveTraderItem(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, int jarg5, unsigned int jarg6, unsigned char jarg7) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  int32 arg5 ;
  uint32 arg6 ;
  uint8 arg7 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (int32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint8)jarg7; 
  (arg1)->SaveTraderItem(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateTraderItemCharges(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int arg2 ;
  uint32 arg3 ;
  int32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int32)jarg4; 
  (arg1)->UpdateTraderItemCharges(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateTraderItemPrice(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->UpdateTraderItemPrice(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteTraderItem__SWIG_0(void * jarg1, unsigned int jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DeleteTraderItem(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteTraderItem__SWIG_1(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->DeleteTraderItem(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadSingleTraderItem(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  result = (EQ::ItemInstance *)(arg1)->LoadSingleTraderItem(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadTraderItem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  Trader_Struct *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Trader_Struct *)(arg1)->LoadTraderItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadTraderItemWithCharges(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  TraderCharges_Struct *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (TraderCharges_Struct *)(arg1)->LoadTraderItemWithCharges(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_AddBuyLine(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->AddBuyLine(arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_RemoveBuyLine(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->RemoveBuyLine(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteBuyLines(void * jarg1, unsigned int jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->DeleteBuyLines(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateBuyLine(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->UpdateBuyLine(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateGMStatus(void * jarg1, unsigned int jarg2, int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->UpdateGMStatus(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveBuffs(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SaveBuffs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadBuffs(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->LoadBuffs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveAuras(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SaveAuras(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadAuras(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->LoadAuras(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadPetInfo(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->LoadPetInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SavePetInfo(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SavePetInfo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_RemoveTempFactions(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->RemoveTempFactions(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateItemRecast(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->UpdateItemRecast(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteItemRecast(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->DeleteItemRecast(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterAAs(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DeleteCharacterAAs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterBandolier(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->DeleteCharacterBandolier(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterDiscipline(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->DeleteCharacterDiscipline(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterMaterialColor(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DeleteCharacterMaterialColor(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterLeadershipAbilities(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DeleteCharacterLeadershipAbilities(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterMemorizedSpell(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->DeleteCharacterMemorizedSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterSpell(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->DeleteCharacterSpell(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterBandolier(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterBandolier(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterBindPoint(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterBindPoint(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterCurrency(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterCurrency(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterData(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  ExtendedProfile_Struct *arg4 = (ExtendedProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  arg4 = (ExtendedProfile_Struct *)jarg4; 
  result = (bool)(arg1)->LoadCharacterData(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterDisciplines(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterDisciplines(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterFactionValues(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  faction_map *arg3 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (faction_map *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "faction_map & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadCharacterFactionValues(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterLanguages(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterLanguages(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterLeadershipAbilities(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterLeadershipAbilities(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterMaterialColor(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterMaterialColor(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterMemmedSpells(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterMemmedSpells(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterPotionBelt(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterPotionBelt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterSkills(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterSkills(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterSpellBook(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->LoadCharacterSpellBook(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterBandolier(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned char jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)(arg1)->SaveCharacterBandolier(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterCurrency(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->SaveCharacterCurrency(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterData(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  ExtendedProfile_Struct *arg4 = (ExtendedProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  arg4 = (ExtendedProfile_Struct *)jarg4; 
  result = (bool)(arg1)->SaveCharacterData(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterDiscipline(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SaveCharacterDiscipline(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterLanguage(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SaveCharacterLanguage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterLeadershipAbilities(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  PlayerProfile_Struct *arg3 = (PlayerProfile_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (PlayerProfile_Struct *)jarg3; 
  result = (bool)(arg1)->SaveCharacterLeadershipAbilities(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterMaterialColor(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SaveCharacterMaterialColor(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterMemorizedSpell(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SaveCharacterMemorizedSpell(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterPotionBelt(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->SaveCharacterPotionBelt(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterSkill(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SaveCharacterSkill(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterSpell(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SaveCharacterSpell(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ZeroPlayerProfileCurrency(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  PlayerProfile_Struct *arg2 = (PlayerProfile_Struct *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (PlayerProfile_Struct *)jarg2; 
  (arg1)->ZeroPlayerProfileCurrency(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterEXPModifier(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->LoadCharacterEXPModifier(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterEXPModifier(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->SaveCharacterEXPModifier(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoneDatabase_GetAAEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, short jarg4) {
  float jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int16 arg4 ;
  float result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int16)jarg4; 
  result = (float)(arg1)->GetAAEXPModifierByCharID(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoneDatabase_GetAAEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (float)(arg1)->GetAAEXPModifierByCharID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoneDatabase_GetEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, short jarg4) {
  float jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int16 arg4 ;
  float result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int16)jarg4; 
  result = (float)(arg1)->GetEXPModifierByCharID(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ZoneDatabase_GetEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (float)(arg1)->GetEXPModifierByCharID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SetAAEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, short jarg5) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  int16 arg5 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int16)jarg5; 
  (arg1)->SetAAEXPModifierByCharID(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SetAAEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetAAEXPModifierByCharID(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SetEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, short jarg5) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  int16 arg5 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int16)jarg5; 
  (arg1)->SetEXPModifierByCharID(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SetEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetEXPModifierByCharID(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_NoRentExpired(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->NoRentExpired((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterInvSnapshot(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->SaveCharacterInvSnapshot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneDatabase_CountCharacterInvSnapshots(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->CountCharacterInvSnapshots(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ClearCharacterInvSnapshots__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ClearCharacterInvSnapshots(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ClearCharacterInvSnapshots__SWIG_1(void * jarg1, unsigned int jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearCharacterInvSnapshots(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ListCharacterInvSnapshots(void * jarg1, unsigned int jarg2, void * jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  std::list< std::pair< uint32,int > > *arg3 = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (std::list< std::pair< uint32,int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::pair< uint32,int > > & is null", 0);
    return ;
  } 
  (arg1)->ListCharacterInvSnapshots(arg2,*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_ValidateCharacterInvSnapshotTimestamp(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->ValidateCharacterInvSnapshotTimestamp(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ParseCharacterInvSnapshot(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::list< std::pair< int16,uint32 > > *arg4 = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (std::list< std::pair< int16,uint32 > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::pair< int16,uint32 > > & is null", 0);
    return ;
  } 
  (arg1)->ParseCharacterInvSnapshot(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DivergeCharacterInvSnapshotFromInventory(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::list< std::pair< int16,uint32 > > *arg4 = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (std::list< std::pair< int16,uint32 > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::pair< int16,uint32 > > & is null", 0);
    return ;
  } 
  (arg1)->DivergeCharacterInvSnapshotFromInventory(arg2,arg3,*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DivergeCharacterInventoryFromInvSnapshot(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::list< std::pair< int16,uint32 > > *arg4 = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (std::list< std::pair< int16,uint32 > > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::pair< int16,uint32 > > & is null", 0);
    return ;
  } 
  (arg1)->DivergeCharacterInventoryFromInvSnapshot(arg2,arg3,*arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_RestoreCharacterInvSnapshot(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->RestoreCharacterInvSnapshot(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_BuryAllCharacterCorpses(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->BuryAllCharacterCorpses(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_BuryCharacterCorpse(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->BuryCharacterCorpse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ZoneDatabase_CountCharacterCorpses(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int64 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int64)(arg1)->CountCharacterCorpses(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ZoneDatabase_CountCharacterCorpsesByZoneID(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  long long jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int64 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int64)(arg1)->CountCharacterCorpsesByZoneID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteCharacterCorpse(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DeleteCharacterCorpse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteItemOffCharacterCorpse(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->DeleteItemOffCharacterCorpse(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetCharacterBuriedCorpseCount(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetCharacterBuriedCorpseCount(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ZoneDatabase_GetCharacterCorpseCount(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int64 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int64)(arg1)->GetCharacterCorpseCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetCharacterCorpseDecayTimer(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetCharacterCorpseDecayTimer(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetCharacterCorpseID(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint32)(arg1)->GetCharacterCorpseID(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetCharacterCorpseItemAt(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (uint32)(arg1)->GetCharacterCorpseItemAt(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetDecayTimes(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  npcDecayTimes_Struct *arg2 = (npcDecayTimes_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (npcDecayTimes_Struct *)jarg2; 
  result = (bool)(arg1)->GetDecayTimes(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetFirstCorpseID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetFirstCorpseID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterCorpse(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  Corpse *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Corpse *)(arg1)->LoadCharacterCorpse(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterCorpses(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)(arg1)->LoadCharacterCorpses(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_MarkCorpseAsResurrected(void * jarg1, unsigned int jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->MarkCorpseAsResurrected(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterCorpse(void * jarg1, unsigned int jarg2, const char * jarg3, unsigned int jarg4, unsigned short jarg5, void * jarg6, void * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  std::string *arg3 = 0 ;
  uint32 arg4 ;
  uint16 arg5 ;
  CharacterCorpseEntry *arg6 = 0 ;
  glm::vec4 *arg7 = 0 ;
  uint32 arg8 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (CharacterCorpseEntry *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CharacterCorpseEntry const & is null", 0);
    return 0;
  } 
  arg7 = (glm::vec4 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg8 = (uint32)jarg8; 
  result = (uint32)(arg1)->SaveCharacterCorpse(arg2,(std::string const &)*arg3,arg4,arg5,(CharacterCorpseEntry const &)*arg6,(glm::vec4 const &)*arg7,arg8);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SendCharacterCorpseToGraveyard(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  glm::vec4 *arg5 = 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 & is null", 0);
    return 0;
  } 
  result = (uint32)(arg1)->SendCharacterCorpseToGraveyard(arg2,arg3,arg4,*arg5);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SendCharacterCorpseToNonInstance(void * jarg1, unsigned int jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SendCharacterCorpseToNonInstance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_SummonBuriedCharacterCorpses(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, void * jarg5) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  glm::vec4 *arg5 = 0 ;
  Corpse *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (Corpse *)(arg1)->SummonBuriedCharacterCorpses(arg2,arg3,arg4,(glm::vec4 const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SummonAllCharacterCorpses(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  glm::vec4 *arg5 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SummonAllCharacterCorpses(arg2,arg3,arg4,(glm::vec4 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_UnburyCharacterCorpse(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned short jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint16 arg4 ;
  glm::vec4 *arg5 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->UnburyCharacterCorpse(arg2,arg3,arg4,(glm::vec4 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_UpdateCharacterCorpse__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, const char * jarg4, unsigned int jarg5, unsigned short jarg6, void * jarg7, void * jarg8, unsigned int jarg9, unsigned int jarg10) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::string *arg4 = 0 ;
  uint32 arg5 ;
  uint16 arg6 ;
  CharacterCorpseEntry *arg7 = 0 ;
  glm::vec4 *arg8 = 0 ;
  uint32 arg9 ;
  bool arg10 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint16)jarg6; 
  arg7 = (CharacterCorpseEntry *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CharacterCorpseEntry const & is null", 0);
    return 0;
  } 
  arg8 = (glm::vec4 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (uint32)(arg1)->UpdateCharacterCorpse(arg2,arg3,(std::string const &)*arg4,arg5,arg6,(CharacterCorpseEntry const &)*arg7,(glm::vec4 const &)*arg8,arg9,arg10);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_UpdateCharacterCorpse__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, const char * jarg4, unsigned int jarg5, unsigned short jarg6, void * jarg7, void * jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  std::string *arg4 = 0 ;
  uint32 arg5 ;
  uint16 arg6 ;
  CharacterCorpseEntry *arg7 = 0 ;
  glm::vec4 *arg8 = 0 ;
  uint32 arg9 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint16)jarg6; 
  arg7 = (CharacterCorpseEntry *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CharacterCorpseEntry const & is null", 0);
    return 0;
  } 
  arg8 = (glm::vec4 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg9 = (uint32)jarg9; 
  result = (uint32)(arg1)->UpdateCharacterCorpse(arg2,arg3,(std::string const &)*arg4,arg5,arg6,(CharacterCorpseEntry const &)*arg7,(glm::vec4 const &)*arg8,arg9);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_UpdateCharacterCorpseConsent(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (uint32)(arg1)->UpdateCharacterCorpseConsent(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetFactionData(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, int jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  FactionMods *arg2 = (FactionMods *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  int32 arg6 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (FactionMods *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int32)jarg6; 
  result = (bool)(arg1)->GetFactionData(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetFactionName__SWIG_0(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->GetFactionName(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ZoneDatabase_GetFactionName__SWIG_1(void * jarg1, int jarg2) {
  const char * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetFactionName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetFactionIDsForNPC__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  std::list< NpcFactionEntriesRepository::NpcFactionEntries > *arg3 = (std::list< NpcFactionEntriesRepository::NpcFactionEntries > *) 0 ;
  int32 *arg4 = (int32 *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (std::list< NpcFactionEntriesRepository::NpcFactionEntries > *)jarg3; 
  arg4 = (int32 *)jarg4; 
  result = (bool)(arg1)->GetFactionIDsForNPC(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetFactionIDsForNPC__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  std::list< NpcFactionEntriesRepository::NpcFactionEntries > *arg3 = (std::list< NpcFactionEntriesRepository::NpcFactionEntries > *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (std::list< NpcFactionEntriesRepository::NpcFactionEntries > *)jarg3; 
  result = (bool)(arg1)->GetFactionIDsForNPC(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SetCharacterFactionLevel(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, unsigned char jarg5, void * jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  uint8 arg5 ;
  faction_map *arg6 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (faction_map *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "faction_map & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->SetCharacterFactionLevel(arg2,arg3,arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadFactionData(void * jarg1) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result = (bool)(arg1)->LoadFactionData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetMaxFaction(void * jarg1) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result = (uint32)(arg1)->GetMaxFaction();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadAlternateAdvancementAbilities(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::unordered_map< int,std::unique_ptr< AA::Ability >,std::hash< int > > *arg2 = 0 ;
  std::unordered_map< int,std::unique_ptr< AA::Rank >,std::hash< int > > *arg3 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (std::unordered_map< int,std::unique_ptr< AA::Ability >,std::hash< int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< int,std::unique_ptr< AA::Ability >,std::hash< int > > & is null", 0);
    return 0;
  } 
  arg3 = (std::unordered_map< int,std::unique_ptr< AA::Rank >,std::hash< int > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< int,std::unique_ptr< AA::Rank >,std::hash< int > > & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->LoadAlternateAdvancementAbilities(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadAlternateAdvancement(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->LoadAlternateAdvancement(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveZoneCFG(void * jarg1, unsigned int jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  NewZone_Struct *arg4 = (NewZone_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (NewZone_Struct *)jarg4; 
  result = (bool)(arg1)->SaveZoneCFG(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadStaticZonePoints(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  LinkedList< ZonePoint * > *arg2 = (LinkedList< ZonePoint * > *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (LinkedList< ZonePoint * > *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->LoadStaticZonePoints(arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneDatabase_getZoneShutDownDelay(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int)(arg1)->getZoneShutDownDelay(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadSpawnGroups(void * jarg1, char * jarg2, unsigned short jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  char *arg2 = (char *) 0 ;
  uint16 arg3 ;
  SpawnGroupList *arg4 = (SpawnGroupList *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (SpawnGroupList *)jarg4; 
  result = (bool)(arg1)->LoadSpawnGroups((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadSpawnGroupsByID(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int arg2 ;
  SpawnGroupList *arg3 = (SpawnGroupList *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SpawnGroupList *)jarg3; 
  result = (bool)(arg1)->LoadSpawnGroupsByID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_PopulateZoneSpawnList(void * jarg1, unsigned int jarg2, void * jarg3, short jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  LinkedList< Spawn2 * > *arg3 = 0 ;
  int16 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (LinkedList< Spawn2 * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LinkedList< Spawn2 * > & is null", 0);
    return 0;
  } 
  arg4 = (int16)jarg4; 
  result = (bool)(arg1)->PopulateZoneSpawnList(arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_CreateSpawn2(void * jarg1, void * jarg2, unsigned int jarg3, const char * jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7, unsigned short jarg8, short jarg9) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  std::string *arg4 = 0 ;
  glm::vec4 *arg5 = 0 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint16 arg8 ;
  int16 arg9 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint16)jarg8; 
  arg9 = (int16)jarg9; 
  result = (bool)(arg1)->CreateSpawn2(arg2,arg3,(std::string const &)*arg4,(glm::vec4 const &)*arg5,arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateRespawnTime(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->UpdateRespawnTime(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetSpawnTimeLeft(void * jarg1, unsigned int jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (uint32)(arg1)->GetSpawnTimeLeft(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateSpawn2Status(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->UpdateSpawn2Status(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetFreeGrid(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetFreeGrid(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteWaypoint(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->DeleteWaypoint(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_AddWaypoint(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6, unsigned int jarg7) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  glm::vec4 *arg5 = 0 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->AddWaypoint(arg2,arg3,arg4,(glm::vec4 const &)*arg5,arg6,arg7);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_AddWaypointForSpawn(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  glm::vec4 *arg4 = 0 ;
  uint32 arg5 ;
  int arg6 ;
  int arg7 ;
  uint32 arg8 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (glm::vec4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (uint32)(arg1)->AddWaypointForSpawn(arg2,arg3,(glm::vec4 const &)*arg4,arg5,arg6,arg7,arg8);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ModifyGrid__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned char jarg5, unsigned char jarg6, unsigned int jarg7) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  uint32 arg7 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->ModifyGrid(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ModifyGrid__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned char jarg5, unsigned char jarg6) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->ModifyGrid(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ModifyGrid__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned char jarg5) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  uint8 arg5 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->ModifyGrid(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ModifyGrid__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  (arg1)->ModifyGrid(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GridExistsInZone(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->GridExistsInZone(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneDatabase_GetHighestGrid(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetHighestGrid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneDatabase_GetHighestWaypoint(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int)(arg1)->GetHighestWaypoint(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneDatabase_GetRandomWaypointFromGrid(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  glm::vec4 *arg2 = 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  int result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 & is null", 0);
    return 0;
  } 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (int)(arg1)->GetRandomWaypointFromGrid(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_NPCSpawnDB__SWIG_0(void * jarg1, unsigned char jarg2, const char * jarg3, unsigned int jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint8 arg2 ;
  std::string *arg3 = 0 ;
  uint32 arg4 ;
  Client *arg5 = (Client *) 0 ;
  NPC *arg6 = (NPC *) 0 ;
  uint32 arg7 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint32)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (NPC *)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (uint32)(arg1)->NPCSpawnDB(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_NPCSpawnDB__SWIG_1(void * jarg1, unsigned char jarg2, const char * jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint8 arg2 ;
  std::string *arg3 = 0 ;
  uint32 arg4 ;
  Client *arg5 = (Client *) 0 ;
  NPC *arg6 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint32)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (NPC *)jarg6; 
  result = (uint32)(arg1)->NPCSpawnDB(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_NPCSpawnDB__SWIG_2(void * jarg1, unsigned char jarg2, const char * jarg3, unsigned int jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint8 arg2 ;
  std::string *arg3 = 0 ;
  uint32 arg4 ;
  Client *arg5 = (Client *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (uint32)jarg4; 
  arg5 = (Client *)jarg5; 
  result = (uint32)(arg1)->NPCSpawnDB(arg2,(std::string const &)*arg3,arg4,arg5);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_CreateNewNPCCommand(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  NPC *arg5 = (NPC *) 0 ;
  uint32 arg6 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (NPC *)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (uint32)(arg1)->CreateNewNPCCommand((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_AddNewNPCSpawnGroupCommand(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  NPC *arg5 = (NPC *) 0 ;
  uint32 arg6 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (NPC *)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (uint32)(arg1)->AddNewNPCSpawnGroupCommand((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteSpawnLeaveInNPCTypeTable(void * jarg1, const char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  Client *arg3 = (Client *) 0 ;
  NPC *arg4 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Client *)jarg3; 
  arg4 = (NPC *)jarg4; 
  result = (uint32)(arg1)->DeleteSpawnLeaveInNPCTypeTable((std::string const &)*arg2,arg3,arg4);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteSpawnRemoveFromNPCTypeTable(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  NPC *arg5 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (NPC *)jarg5; 
  result = (uint32)(arg1)->DeleteSpawnRemoveFromNPCTypeTable((std::string const &)*arg2,arg3,arg4,arg5);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_AddSpawnFromSpawnGroup(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  NPC *arg5 = (NPC *) 0 ;
  uint32 arg6 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (NPC *)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (uint32)(arg1)->AddSpawnFromSpawnGroup((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_AddNPCTypes(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Client *arg4 = (Client *) 0 ;
  NPC *arg5 = (NPC *) 0 ;
  uint32 arg6 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Client *)jarg4; 
  arg5 = (NPC *)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (uint32)(arg1)->AddNPCTypes((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_UpdateNPCTypeAppearance(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  NPC *arg3 = (NPC *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (NPC *)jarg3; 
  result = (uint32)(arg1)->UpdateNPCTypeAppearance(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SetSpecialAttkFlag(void * jarg1, unsigned char jarg2, char * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetSpecialAttkFlag(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetPetEntry(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  PetRecord *arg3 = (PetRecord *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (PetRecord *)jarg3; 
  result = (bool)(arg1)->GetPetEntry((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetPoweredPetEntry(void * jarg1, const char * jarg2, short jarg3, void * jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  int16 arg3 ;
  PetRecord *arg4 = (PetRecord *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int16)jarg3; 
  arg4 = (PetRecord *)jarg4; 
  result = (bool)(arg1)->GetPoweredPetEntry((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetBasePetItems(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int32 arg2 ;
  uint32 *arg3 = (uint32 *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint32 *)jarg3; 
  result = (bool)(arg1)->GetBasePetItems(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_GetBeastlordPetData(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint16 arg2 ;
  BeastlordPetData::PetStruct result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (arg1)->GetBeastlordPetData(arg2);
  jresult = new BeastlordPetData::PetStruct(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetMaxNPCSpellsID(void * jarg1) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result = (uint32)(arg1)->GetMaxNPCSpellsID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetMaxNPCSpellsEffectsID(void * jarg1) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result = (uint32)(arg1)->GetMaxNPCSpellsEffectsID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetAuraEntry(void * jarg1, unsigned short jarg2, void * jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint16 arg2 ;
  AuraRecord *arg3 = 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (AuraRecord *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AuraRecord & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetAuraEntry(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadGlobalLoot(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  (arg1)->LoadGlobalLoot();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_GetNPCSpells(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  DBnpcspells_Struct *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (DBnpcspells_Struct *)(arg1)->GetNPCSpells(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_GetNPCSpellsEffects(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  DBnpcspellseffects_Struct *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (DBnpcspellseffects_Struct *)(arg1)->GetNPCSpellsEffects(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ClearNPCSpells(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  (arg1)->ClearNPCSpells();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadNPCTypesData__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  NPCType *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (NPCType *)(arg1)->LoadNPCTypesData(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadNPCTypesData__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  NPCType *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (NPCType *)(arg1)->LoadNPCTypesData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_GetBotSpells(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  DBbotspells_Struct *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (DBbotspells_Struct *)(arg1)->GetBotSpells(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ClearBotSpells(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  (arg1)->ClearBotSpells();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_GetMercenaryType(void * jarg1, unsigned int jarg2, unsigned short jarg3, unsigned int jarg4) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint16 arg3 ;
  uint32 arg4 ;
  NPCType *result = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (NPCType *)(arg1)->GetMercenaryType(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadMercenaryEquipment(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Merc *)jarg2; 
  (arg1)->LoadMercenaryEquipment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveMercenaryBuffs(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Merc *)jarg2; 
  (arg1)->SaveMercenaryBuffs(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadMercenaryBuffs(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Merc *)jarg2; 
  (arg1)->LoadMercenaryBuffs(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadMercenaryInfo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->LoadMercenaryInfo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadCurrentMercenary(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  result = (bool)(arg1)->LoadCurrentMercenary(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SaveMercenary(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Merc *arg2 = (Merc *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Merc *)jarg2; 
  result = (bool)(arg1)->SaveMercenary(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DeleteMercenary(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DeleteMercenary(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeletePetitionFromDB(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Petition *arg2 = (Petition *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Petition *)jarg2; 
  (arg1)->DeletePetitionFromDB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdatePetitionToDB(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Petition *arg2 = (Petition *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Petition *)jarg2; 
  (arg1)->UpdatePetitionToDB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_InsertPetitionToDB(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Petition *arg2 = (Petition *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Petition *)jarg2; 
  (arg1)->InsertPetitionToDB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_RefreshPetitionsFromDB(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  (arg1)->RefreshPetitionsFromDB();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveMerchantTemp(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  (arg1)->SaveMerchantTemp(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_DeleteMerchantTemp(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->DeleteMerchantTemp(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetTradeRecipe__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  uint8 arg3 ;
  uint32 arg4 ;
  Client *arg5 = (Client *) 0 ;
  DBTradeskillRecipe_Struct *arg6 = (DBTradeskillRecipe_Struct *) 0 ;
  bool *arg7 = (bool *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (DBTradeskillRecipe_Struct *)jarg6; 
  arg7 = (bool *)jarg7; 
  result = (bool)(arg1)->GetTradeRecipe((EQ::ItemInstance const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetTradeRecipe__SWIG_1(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 arg4 ;
  Client *arg5 = (Client *) 0 ;
  DBTradeskillRecipe_Struct *arg6 = (DBTradeskillRecipe_Struct *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (Client *)jarg5; 
  arg6 = (DBTradeskillRecipe_Struct *)jarg6; 
  result = (bool)(arg1)->GetTradeRecipe(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadForage(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint32)(arg1)->LoadForage(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadFishing(void * jarg1, unsigned int jarg2, unsigned char jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint32 *arg4 = 0 ;
  uint8 *arg5 = 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint32 & is null", 0);
    return 0;
  } 
  arg5 = (uint8 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "uint8 & is null", 0);
    return 0;
  } 
  result = (uint32)(arg1)->LoadFishing(arg2,arg3,*arg4,*arg5);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateRecipeMadecount(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->UpdateRecipeMadecount(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_EnableRecipe(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->EnableRecipe(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_DisableRecipe(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DisableRecipe(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_GetRecipeComponentItemIDs(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  RecipeCountType arg2 ;
  uint32 arg3 ;
  RecipeCountType *argp2 ;
  std::vector< uint32 > result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  argp2 = (RecipeCountType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RecipeCountType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint32)jarg3; 
  result = (arg1)->GetRecipeComponentItemIDs(arg2,arg3);
  jresult = new std::vector< uint32 >(result); 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ZoneDatabase_GetRecipeComponentCount(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  signed char jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  RecipeCountType arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  RecipeCountType *argp2 ;
  int8 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  argp2 = (RecipeCountType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RecipeCountType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (int8)(arg1)->GetRecipeComponentCount(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadTributes(void * jarg1) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result = (bool)(arg1)->LoadTributes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_LoadDoors(void * jarg1, const char * jarg2, short jarg3) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  int16 arg3 ;
  SwigValueWrapper< std::vector< DoorsRepository::Doors > > result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int16)jarg3; 
  result = (arg1)->LoadDoors((std::string const &)*arg2,arg3);
  jresult = new std::vector< DoorsRepository::Doors >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetDoorsCountPlusOne(void * jarg1) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result = (uint32)(arg1)->GetDoorsCountPlusOne();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneDatabase_GetDoorsDBCountPlusOne(void * jarg1, const char * jarg2, short jarg3) {
  int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string arg2 ;
  int16 arg3 ;
  int result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int16)jarg3; 
  result = (int)(arg1)->GetDoorsDBCountPlusOne(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ZoneDatabase_GetBlockedSpellsCount(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  int64 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int64)(arg1)->GetBlockedSpellsCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadBlockedSpells(void * jarg1, long long jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  int64 arg2 ;
  ZoneSpellsBlocked *arg3 = (ZoneSpellsBlocked *) 0 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (int64)jarg2; 
  arg3 = (ZoneSpellsBlocked *)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->LoadBlockedSpells(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_LoadTraps(void * jarg1, const char * jarg2, short jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  std::string *arg2 = 0 ;
  int16 arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int16)jarg3; 
  result = (bool)(arg1)->LoadTraps((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SetTrapData__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Trap *arg2 = (Trap *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Trap *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->SetTrapData(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SetTrapData__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Trap *arg2 = (Trap *) 0 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Trap *)jarg2; 
  result = (bool)(arg1)->SetTrapData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetZoneTimezone(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (uint32)(arg1)->GetZoneTimezone(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_SetZoneTimezone(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  bool result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (bool)(arg1)->SetZoneTimezone(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_RefreshGroupFromDB(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  (arg1)->RefreshGroupFromDB(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_ListAllInstances(void * jarg1, void * jarg2, unsigned int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->ListAllInstances(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_QGlobalPurge(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  (arg1)->QGlobalPurge();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadAltCurrencyValues(void * jarg1, unsigned int jarg2, void * jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  std::map< uint32,uint32 > *arg3 = 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (std::map< uint32,uint32 > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< uint32,uint32 > & is null", 0);
    return ;
  } 
  (arg1)->LoadAltCurrencyValues(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateAltCurrencyValue(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->UpdateAltCurrencyValue(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ZoneDatabase_GetKarma(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->GetKarma(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_UpdateKarma(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->UpdateKarma(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_botdb_set(void * jarg1, void * jarg2) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  BotDatabase arg2 ;
  BotDatabase *argp2 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  argp2 = (BotDatabase *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BotDatabase", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->botdb = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDatabase_botdb_get(void * jarg1) {
  void * jresult ;
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  BotDatabase result;
  
  arg1 = (ZoneDatabase *)jarg1; 
  result =  ((arg1)->botdb);
  jresult = new BotDatabase(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_LoadCharacterTribute(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  ZoneDatabase::LoadCharacterTribute(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterBinds(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  ZoneDatabase::SaveCharacterBinds(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDatabase_SaveCharacterTribute(void * jarg1) {
  Client *arg1 = (Client *) 0 ;
  
  arg1 = (Client *)jarg1; 
  ZoneDatabase::SaveCharacterTribute(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_database_set(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  database = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_database_get() {
  void * jresult ;
  ZoneDatabase *result = 0 ;
  
  result = (ZoneDatabase *)&database;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_content_db_set(void * jarg1) {
  ZoneDatabase *arg1 = (ZoneDatabase *) 0 ;
  
  arg1 = (ZoneDatabase *)jarg1; 
  content_db = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_content_db_get() {
  void * jresult ;
  ZoneDatabase *result = 0 ;
  
  result = (ZoneDatabase *)&content_db;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WorldServer() {
  void * jresult ;
  WorldServer *result = 0 ;
  
  result = (WorldServer *)new WorldServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WorldServer(void * jarg1) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_Connect(void * jarg1) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  (arg1)->Connect();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_SendPacket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  ServerPacket *arg2 = (ServerPacket *) 0 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (ServerPacket *)jarg2; 
  result = (bool)(arg1)->SendPacket(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_WorldServer_GetIP(void * jarg1) {
  const char * jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  std::string result;
  
  arg1 = (WorldServer *)jarg1; 
  result = ((WorldServer const *)arg1)->GetIP();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_WorldServer_GetPort(void * jarg1) {
  unsigned short jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint16 result;
  
  arg1 = (WorldServer *)jarg1; 
  result = (uint16)((WorldServer const *)arg1)->GetPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_Connected(void * jarg1) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  result = (bool)((WorldServer const *)arg1)->Connected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_HandleMessage(void * jarg1, unsigned short jarg2, void * jarg3) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint16 arg2 ;
  EQ::Net::Packet *arg3 = 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (EQ::Net::Packet *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::Net::Packet const & is null", 0);
    return ;
  } 
  (arg1)->HandleMessage(arg2,(EQ::Net::Packet const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_SendChannelMessage(void * jarg1, void * jarg2, char * jarg3, unsigned char jarg4, unsigned int jarg5, unsigned char jarg6, unsigned char jarg7, char * jarg8) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  Client *arg2 = (Client *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint8 arg6 ;
  uint8 arg7 ;
  char *arg8 = (char *) 0 ;
  void *arg9 = 0 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (uint8)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)(arg1)->SendChannelMessage(arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_SendEmoteMessage__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, char * jarg5) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->SendEmoteMessage((char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_SendEmoteMessage__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3, short jarg4, unsigned int jarg5, char * jarg6) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  int16 arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int16)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)(arg1)->SendEmoteMessage((char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_SendVoiceMacro__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  uint32 arg6 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (bool)(arg1)->SendVoiceMacro(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_SendVoiceMacro__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint32 arg3 ;
  char *arg4 = (char *) 0 ;
  uint32 arg5 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (bool)(arg1)->SendVoiceMacro(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SetZoneData__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SetZoneData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SetZoneData__SWIG_1(void * jarg1, unsigned int jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint32 arg2 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetZoneData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_RezzPlayer(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned short jarg5) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  EQApplicationPacket *arg2 = (EQApplicationPacket *) 0 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint16 arg5 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (EQApplicationPacket *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint16)jarg5; 
  result = (bool)(arg1)->RezzPlayer(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_IsOOCMuted(void * jarg1) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  bool result;
  
  arg1 = (WorldServer *)jarg1; 
  result = (bool)((WorldServer const *)arg1)->IsOOCMuted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WorldServer_NextGroupID(void * jarg1) {
  unsigned int jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint32 result;
  
  arg1 = (WorldServer *)jarg1; 
  result = (uint32)(arg1)->NextGroupID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SetLaunchedName(void * jarg1, char * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLaunchedName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SetLauncherName(void * jarg1, char * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetLauncherName((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SendReloadTasks__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->SendReloadTasks(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SendReloadTasks__SWIG_1(void * jarg1, unsigned char jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint8 arg2 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->SendReloadTasks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_HandleReloadTasks(void * jarg1, void * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  ServerPacket *arg2 = (ServerPacket *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (ServerPacket *)jarg2; 
  (arg1)->HandleReloadTasks(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_UpdateLFP__SWIG_0(void * jarg1, unsigned int jarg2, unsigned char jarg3, unsigned char jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, char * jarg8, void * jarg9) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  char *arg8 = (char *) 0 ;
  GroupLFPMemberEntry *arg9 = (GroupLFPMemberEntry *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (GroupLFPMemberEntry *)jarg9; 
  (arg1)->UpdateLFP(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_UpdateLFP__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint32 arg2 ;
  GroupLFPMemberEntry *arg3 = (GroupLFPMemberEntry *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (GroupLFPMemberEntry *)jarg3; 
  (arg1)->UpdateLFP(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_StopLFP(void * jarg1, unsigned int jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  uint32 arg2 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->StopLFP(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_HandleLFGMatches(void * jarg1, void * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  ServerPacket *arg2 = (ServerPacket *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (ServerPacket *)jarg2; 
  (arg1)->HandleLFGMatches(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_HandleLFPMatches(void * jarg1, void * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  ServerPacket *arg2 = (ServerPacket *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (ServerPacket *)jarg2; 
  (arg1)->HandleLFPMatches(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_RequestTellQueue(void * jarg1, char * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->RequestTellQueue((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WorldServer_GetScheduler(void * jarg1) {
  void * jresult ;
  WorldServer *arg1 = (WorldServer *) 0 ;
  ZoneEventScheduler *result = 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  result = (ZoneEventScheduler *)((WorldServer const *)arg1)->GetScheduler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WorldServer_SetScheduler(void * jarg1, void * jarg2) {
  WorldServer *arg1 = (WorldServer *) 0 ;
  ZoneEventScheduler *arg2 = (ZoneEventScheduler *) 0 ;
  
  arg1 = (WorldServer *)jarg1; 
  arg2 = (ZoneEventScheduler *)jarg2; 
  (arg1)->SetScheduler(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_QuestManager() {
  void * jresult ;
  QuestManager *result = 0 ;
  
  result = (QuestManager *)new QuestManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_QuestManager(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_StartQuest__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, const char * jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Client *arg3 = (Client *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  SPDat_Spell_Struct *arg5 = (SPDat_Spell_Struct *) 0 ;
  std::string arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (SPDat_Spell_Struct *)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  (arg1)->StartQuest(arg2,arg3,arg4,(SPDat_Spell_Struct const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_StartQuest__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Client *arg3 = (Client *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  SPDat_Spell_Struct *arg5 = (SPDat_Spell_Struct *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  arg5 = (SPDat_Spell_Struct *)jarg5; 
  (arg1)->StartQuest(arg2,arg3,arg4,(SPDat_Spell_Struct const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_StartQuest__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Client *arg3 = (Client *) 0 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Client *)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  (arg1)->StartQuest(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_StartQuest__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  Client *arg3 = (Client *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Mob *)jarg2; 
  arg3 = (Client *)jarg3; 
  (arg1)->StartQuest(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_StartQuest__SWIG_4(void * jarg1, void * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->StartQuest(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_EndQuest(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->EndQuest();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_QuestsRunning(void * jarg1) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (bool)(arg1)->QuestsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_Process(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->Process();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ClearAllTimers(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->ClearAllTimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_echo(void * jarg1, int jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->echo(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_say(void * jarg1, char * jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  Journal::Options *arg3 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (Journal::Options *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Journal::Options & is null", 0);
    return ;
  } 
  (arg1)->say((char const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_me(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->me((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_summonitem__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->summonitem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_summonitem__SWIG_1(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->summonitem(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_1(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_2(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_3(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_4(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_5(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_6(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_7(void * jarg1, unsigned int jarg2, short jarg3) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_CreateItem__SWIG_8(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->CreateItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_write(void * jarg1, char * jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->write((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_spawn2(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  glm::vec4 *arg5 = 0 ;
  Mob *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (Mob *)(arg1)->spawn2(arg2,arg3,arg4,(glm::vec4 const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_unique_spawn(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  glm::vec4 *arg5 = 0 ;
  Mob *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (glm::vec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (Mob *)(arg1)->unique_spawn(arg2,arg3,arg4,(glm::vec4 const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_spawn_from_spawn2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  Mob *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (Mob *)(arg1)->spawn_from_spawn2(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_enable_spawn2(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->enable_spawn2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_disable_spawn2(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->disable_spawn2(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setstat(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setstat(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_incstat(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->incstat(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_castspell(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  (arg1)->castspell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_selfcast(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->selfcast(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9, int jarg10) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  (arg1)->addloot(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, int jarg9) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  arg9 = (int)jarg9; 
  (arg1)->addloot(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_2(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7, int jarg8) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->addloot(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_3(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6, int jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->addloot(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_4(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5, int jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->addloot(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_5(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  int arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (int)jarg5; 
  (arg1)->addloot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_6(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->addloot(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_7(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addloot(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addloot__SWIG_8(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addloot(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_Zone(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Zone((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ZoneGroup(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ZoneGroup((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ZoneRaid(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ZoneRaid((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settimer__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->settimer((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settimer__SWIG_1(void * jarg1, const char * jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  (arg1)->settimer((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settimerMS__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  (arg1)->settimerMS((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settimerMS__SWIG_1(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  EQ::ItemInstance *arg4 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (EQ::ItemInstance *)jarg4; 
  (arg1)->settimerMS((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settimerMS__SWIG_2(void * jarg1, const char * jarg2, unsigned int jarg3, void * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 arg3 ;
  Mob *arg4 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint32)jarg3; 
  arg4 = (Mob *)jarg4; 
  (arg1)->settimerMS((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stoptimer__SWIG_0(void * jarg1, const char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->stoptimer((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stoptimer__SWIG_1(void * jarg1, const char * jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  EQ::ItemInstance *arg3 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (EQ::ItemInstance *)jarg3; 
  (arg1)->stoptimer((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stoptimer__SWIG_2(void * jarg1, const char * jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  (arg1)->stoptimer((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stopalltimers__SWIG_0(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->stopalltimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stopalltimers__SWIG_1(void * jarg1, void * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  (arg1)->stopalltimers(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stopalltimers__SWIG_2(void * jarg1, void * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *arg2 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Mob *)jarg2; 
  (arg1)->stopalltimers(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_pausetimer__SWIG_0(void * jarg1, const char * jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  (arg1)->pausetimer((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_pausetimer__SWIG_1(void * jarg1, const char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->pausetimer((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_resumetimer__SWIG_0(void * jarg1, const char * jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  (arg1)->resumetimer((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_resumetimer__SWIG_1(void * jarg1, const char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->resumetimer((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_ispausedtimer__SWIG_0(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->ispausedtimer((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_ispausedtimer__SWIG_1(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->ispausedtimer((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_hastimer__SWIG_0(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  result = (bool)(arg1)->hastimer((std::string const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_hastimer__SWIG_1(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->hastimer((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_getremainingtimeMS__SWIG_0(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  result = (uint32)(arg1)->getremainingtimeMS((std::string const &)*arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_getremainingtimeMS__SWIG_1(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (uint32)(arg1)->getremainingtimeMS((std::string const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_gettimerdurationMS__SWIG_0(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  Mob *arg3 = (Mob *) 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Mob *)jarg3; 
  result = (uint32)(arg1)->gettimerdurationMS((std::string const &)*arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_gettimerdurationMS__SWIG_1(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (uint32)(arg1)->gettimerdurationMS((std::string const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_emote(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->emote((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_shout(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->shout((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_shout2(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->shout2((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_gmsay(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  bool arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->gmsay((char const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depop__SWIG_0(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->depop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depop__SWIG_1(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->depop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depop_withtimer__SWIG_0(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->depop_withtimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depop_withtimer__SWIG_1(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->depop_withtimer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depopall__SWIG_0(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->depopall(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depopall__SWIG_1(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->depopall();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depopzone__SWIG_0(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->depopzone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_depopzone__SWIG_1(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->depopzone();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_repopzone__SWIG_0(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->repopzone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_repopzone__SWIG_1(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->repopzone();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_processmobswhilezoneempty(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->processmobswhilezoneempty(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settarget(void * jarg1, char * jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->settarget((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_follow(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->follow(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_sfollow(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->sfollow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_changedeity(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->changedeity(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_exp(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->exp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_level(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->level(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_traindisc(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->traindisc(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_isdisctome(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->isdisctome(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getracename(void * jarg1, unsigned short jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (arg1)->getracename(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getspellname(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getspellname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getskillname(void * jarg1, int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getskillname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getldonthemename(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getldonthemename(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getfactionname(void * jarg1, int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getfactionname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getlanguagename(void * jarg1, unsigned char jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (arg1)->getlanguagename(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getbodytypename(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getbodytypename(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getconsiderlevelname(void * jarg1, unsigned char jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (arg1)->getconsiderlevelname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_safemove(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->safemove();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_rain(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->rain(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_snow(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->snow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_rename(void * jarg1, const char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->rename(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_surname(void * jarg1, const char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->surname(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_permaclass(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->permaclass(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_permarace(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->permarace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_permagender(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->permagender(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_scribespells__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint16)(arg1)->scribespells(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_scribespells__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint16)(arg1)->scribespells(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_traindiscs__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (uint16)(arg1)->traindiscs(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_traindiscs__SWIG_1(void * jarg1, unsigned char jarg2) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint16)(arg1)->traindiscs(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_unscribespells(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->unscribespells();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_untraindiscs(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->untraindiscs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_givecash__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->givecash(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_givecash__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->givecash(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_givecash__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->givecash(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_givecash__SWIG_3(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->givecash(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_pvp(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->pvp((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_movepc(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->movepc(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_gmmove(void * jarg1, float jarg2, float jarg3, float jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->gmmove(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_movegrp(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->movegrp(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_doanim__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  eqFilterType arg5 ;
  eqFilterType *argp5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  argp5 = (eqFilterType *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqFilterType", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->doanim(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_doanim__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->doanim(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_doanim__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->doanim(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_doanim__SWIG_3(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->doanim(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addskill(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addskill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setlanguage(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->setlanguage(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setskill(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setskill(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setallskill(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setallskill(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_attack(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->attack((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_attacknpc(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->attacknpc(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_attacknpctype(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->attacknpctype(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_save(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->save();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_faction(void * jarg1, int jarg2, int jarg3, int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->faction(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_rewardfaction(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->rewardfaction(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setsky(void * jarg1, unsigned char jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->setsky(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setguild(void * jarg1, unsigned int jarg2, unsigned char jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint8 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->setguild(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CreateGuild(void * jarg1, char * jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->CreateGuild((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settime__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  bool arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->settime(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_settime__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->settime(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_itemlink(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->itemlink(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_signal__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->signal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_signal__SWIG_1(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->signal(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_signalwith__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->signalwith(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_signalwith__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->signalwith(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setglobal(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->setglobal((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_targlobal(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, int jarg6, int jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->targlobal((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_delglobal(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->delglobal((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ding(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->ding();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_rebind__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  glm::vec3 *arg3 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  (arg1)->rebind(arg2,(glm::vec3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_rebind__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  glm::vec4 *arg3 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->rebind(arg2,(glm::vec4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_start(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->start(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_stop(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_pause(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->pause(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_moveto(void * jarg1, void * jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  glm::vec4 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (glm::vec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->moveto((glm::vec4 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_resume(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->resume();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addldonpoints(void * jarg1, unsigned int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addldonpoints(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addldonloss(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->addldonloss(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_addldonwin(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->addldonwin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_removeldonloss(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->removeldonloss(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_removeldonwin(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->removeldonwin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setnexthpevent(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setnexthpevent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setnextinchpevent(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setnextinchpevent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_respawn(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->respawn(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, unsigned int jarg8) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->set_proximity(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->set_proximity(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->set_proximity(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->set_proximity(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity_range__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->set_proximity_range(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity_range__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->set_proximity_range(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_proximity_range__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set_proximity_range(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_clear_proximity(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->clear_proximity();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_enable_proximity_say(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->enable_proximity_say();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_disable_proximity_say(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->disable_proximity_say();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_setanim(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setanim(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_showgrid(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->showgrid(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_spawn_condition(void * jarg1, char * jarg2, unsigned int jarg3, unsigned short jarg4, short jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  short arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (short)jarg5; 
  (arg1)->spawn_condition((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT short SWIGSTDCALL CSharp_QuestManager_get_spawn_condition(void * jarg1, char * jarg2, unsigned int jarg3, unsigned short jarg4) {
  short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 arg3 ;
  uint16 arg4 ;
  short result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint16)jarg4; 
  result = (short)(arg1)->get_spawn_condition((char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_toggle_spawn_event(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->toggle_spawn_event(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_has_zone_flag(void * jarg1, int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->has_zone_flag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_set_zone_flag(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set_zone_flag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_clear_zone_flag(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->clear_zone_flag(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_sethp(void * jarg1, long long jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int64 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int64)jarg2; 
  (arg1)->sethp(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_summonburiedplayercorpse(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  glm::vec4 *arg3 = 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->summonburiedplayercorpse(arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_summonallplayercorpses(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  glm::vec4 *arg3 = 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->summonallplayercorpses(arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QuestManager_getplayerburiedcorpsecount(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int64 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int64)(arg1)->getplayerburiedcorpsecount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QuestManager_getplayercorpsecount(void * jarg1, unsigned int jarg2) {
  long long jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int64 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int64)(arg1)->getplayercorpsecount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_QuestManager_getplayercorpsecountbyzoneid(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  long long jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int64 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int64)(arg1)->getplayercorpsecountbyzoneid(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_buryplayercorpse(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->buryplayercorpse(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_forcedooropen(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->forcedooropen(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_forcedoorclose(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->forcedoorclose(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_toggledoorstate(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->toggledoorstate(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_isdooropen(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->isdooropen(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_npcrace(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->npcrace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_npcgender(void * jarg1, unsigned char jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->npcgender(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_npcsize(void * jarg1, float jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->npcsize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_npctexture(void * jarg1, unsigned char jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->npctexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_playerrace(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->playerrace(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_playergender(void * jarg1, unsigned char jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->playergender(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_playersize(void * jarg1, float jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  float arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->playersize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_playertexture(void * jarg1, unsigned char jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->playertexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_playerfeature(void * jarg1, char * jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->playerfeature((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_npcfeature(void * jarg1, char * jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->npcfeature((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_popup(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  (arg1)->popup((char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_taskselector__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::vector< int > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->taskselector((std::vector< int > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_taskselector__SWIG_1(void * jarg1, void * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  (arg1)->taskselector((std::vector< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_tasksetselector__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->tasksetselector(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_tasksetselector__SWIG_1(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->tasksetselector(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_enabletask(void * jarg1, int jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->enabletask(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_disabletask(void * jarg1, int jarg2, void * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  (arg1)->disabletask(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_istaskenabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->istaskenabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_istaskactive(void * jarg1, int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->istaskactive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_istaskactivityactive(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->istaskactivityactive(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_gettaskactivitydonecount(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->gettaskactivitydonecount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_updatetaskactivity__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->updatetaskactivity(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_updatetaskactivity__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->updatetaskactivity(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_resettaskactivity(void * jarg1, int jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->resettaskactivity(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_assigntask__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->assigntask(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_assigntask__SWIG_1(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->assigntask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_failtask(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->failtask(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_tasktimeleft(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->tasktimeleft(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_istaskcompleted(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->istaskcompleted(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_enabledtaskcount(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->enabledtaskcount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_firsttaskinset(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->firsttaskinset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_lasttaskinset(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->lasttaskinset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_nexttaskinset(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->nexttaskinset(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_activespeaktask(void * jarg1) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (int)(arg1)->activespeaktask();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_activespeakactivity(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->activespeakactivity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_activetasksinset(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->activetasksinset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_completedtasksinset(void * jarg1, int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->completedtasksinset(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_istaskappropriate(void * jarg1, int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->istaskappropriate(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_gettaskname(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->gettaskname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_GetCurrentDzTaskID(void * jarg1) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (int)(arg1)->GetCurrentDzTaskID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_EndCurrentDzTask__SWIG_0(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EndCurrentDzTask(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_EndCurrentDzTask__SWIG_1(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->EndCurrentDzTask();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_clearspawntimers(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->clearspawntimers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ze(void * jarg1, int jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ze(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_we(void * jarg1, int jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->we(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_marquee__SWIG_0(void * jarg1, unsigned int jarg2, const char * jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  uint32 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (uint32)jarg4; 
  (arg1)->marquee(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_marquee__SWIG_1(void * jarg1, unsigned int jarg2, const char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->marquee(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_marquee__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, const char * jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  std::string arg7 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->marquee(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_message(void * jarg1, unsigned int jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->message(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_whisper(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->whisper((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getlevel(void * jarg1, unsigned char jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int)(arg1)->getlevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_collectitems(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->collectitems(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_collectitems_processSlot(void * jarg1, short jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int16 arg2 ;
  uint32 arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int16)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)(arg1)->collectitems_processSlot(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_countitem(void * jarg1, unsigned int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->countitem(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_removeitem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->removeitem(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_removeitem__SWIG_1(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->removeitem(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getitemcomment(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getitemcomment(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getitemlore(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getitemlore(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getitemname(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getitemname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_enabletitle(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enabletitle(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_checktitle(void * jarg1, int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->checktitle(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_removetitle(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removetitle(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateGroundObject__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  glm::vec4 *arg3 = 0 ;
  uint32 arg4 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint32)jarg4; 
  result = (uint16)(arg1)->CreateGroundObject(arg2,(glm::vec4 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateGroundObject__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  glm::vec4 *arg3 = 0 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (uint16)(arg1)->CreateGroundObject(arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateGroundObjectFromModel__SWIG_0(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4, unsigned int jarg5) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (uint16)(arg1)->CreateGroundObjectFromModel((char const *)arg2,(glm::vec4 const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateGroundObjectFromModel__SWIG_1(void * jarg1, char * jarg2, void * jarg3, unsigned char jarg4) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint8 arg4 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  arg4 = (uint8)jarg4; 
  result = (uint16)(arg1)->CreateGroundObjectFromModel((char const *)arg2,(glm::vec4 const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateGroundObjectFromModel__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (glm::vec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return 0;
  } 
  result = (uint16)(arg1)->CreateGroundObjectFromModel((char const *)arg2,(glm::vec4 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ModifyNPCStat(void * jarg1, const char * jarg2, const char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->ModifyNPCStat(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_UpdateSpawnTimer(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->UpdateSpawnTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_MerchantSetItem__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->MerchantSetItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_MerchantSetItem__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->MerchantSetItem(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_MerchantCountItem(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (uint32)(arg1)->MerchantCountItem(arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateInstance(void * jarg1, const char * jarg2, short jarg3, unsigned int jarg4) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (uint16)(arg1)->CreateInstance((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_UpdateInstanceTimer(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->UpdateInstanceTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_UpdateZoneHeader(void * jarg1, const char * jarg2, const char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->UpdateZoneHeader(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_GetInstanceTimer(void * jarg1) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (uint32)(arg1)->GetInstanceTimer();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_GetInstanceTimerByID__SWIG_0(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint32)(arg1)->GetInstanceTimerByID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_GetInstanceTimerByID__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (uint32)(arg1)->GetInstanceTimerByID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_DestroyInstance(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->DestroyInstance(arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_GetInstanceID(void * jarg1, char * jarg2, short jarg3) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int16 arg3 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int16)jarg3; 
  result = (uint16)(arg1)->GetInstanceID((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetInstanceIDs__SWIG_0(void * jarg1, const char * jarg2, unsigned int jarg3) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  std::vector< uint16 > result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  result = (arg1)->GetInstanceIDs(arg2,arg3);
  jresult = new std::vector< uint16 >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetInstanceIDs__SWIG_1(void * jarg1, const char * jarg2) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  std::vector< uint16 > result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->GetInstanceIDs(arg2);
  jresult = new std::vector< uint16 >(result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_GetInstanceIDByCharID(void * jarg1, const char * jarg2, short jarg3, unsigned int jarg4) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string *arg2 = 0 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (uint16)(arg1)->GetInstanceIDByCharID((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_AssignToInstance(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->AssignToInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_AssignToInstanceByCharID(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->AssignToInstanceByCharID(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_AssignGroupToInstance(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->AssignGroupToInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_AssignRaidToInstance(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->AssignRaidToInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_RemoveFromInstance(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveFromInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_RemoveFromInstanceByCharID(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->RemoveFromInstanceByCharID(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_CheckInstanceByCharID(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->CheckInstanceByCharID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_RemoveAllFromInstance(void * jarg1, unsigned short jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint16 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint16)jarg2; 
  (arg1)->RemoveAllFromInstance(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_MovePCInstance(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  int arg3 ;
  glm::vec4 *arg4 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (glm::vec4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec4 const & is null", 0);
    return ;
  } 
  (arg1)->MovePCInstance(arg2,arg3,(glm::vec4 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_FlagInstanceByGroupLeader(void * jarg1, unsigned int jarg2, short jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->FlagInstanceByGroupLeader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_FlagInstanceByRaidLeader(void * jarg1, unsigned int jarg2, short jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  (arg1)->FlagInstanceByRaidLeader(arg2,arg3);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_0(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  bool arg10 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = jarg10 ? true : false; 
  result = (arg1)->varlink(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_1(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  result = (arg1)->varlink(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_2(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  result = (arg1)->varlink(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_3(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  result = (arg1)->varlink(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_4(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  result = (arg1)->varlink(arg2,arg3,arg4,arg5,arg6);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_5(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4, unsigned int jarg5) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  result = (arg1)->varlink(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_6(void * jarg1, unsigned int jarg2, short jarg3, unsigned int jarg4) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  uint32 arg4 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  arg4 = (uint32)jarg4; 
  result = (arg1)->varlink(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_7(void * jarg1, unsigned int jarg2, short jarg3) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (arg1)->varlink(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_varlink__SWIG_8(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->varlink(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getcharnamebyid(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getcharnamebyid(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_getcharidbyname(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (uint32)(arg1)->getcharidbyname((char const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getclassname__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (arg1)->getclassname(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getclassname__SWIG_1(void * jarg1, unsigned char jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (arg1)->getclassname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_getcurrencyid(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->getcurrencyid(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_getcurrencyitemid(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (uint32)(arg1)->getcurrencyitemid(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_QuestManager_getguildnamebyid(void * jarg1, int jarg2) {
  char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->getguildnamebyid(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getguildidbycharid(void * jarg1, unsigned int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->getguildidbycharid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getgroupidbycharid(void * jarg1, unsigned int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->getgroupidbycharid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getnpcnamebyid(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getnpcnamebyid(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getcleannpcnamebyid(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getcleannpcnamebyid(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getraididbycharid(void * jarg1, unsigned int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->getraididbycharid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SetRunning(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetRunning(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_IsRunning(void * jarg1) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (bool)(arg1)->IsRunning();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_FlyMode(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  GravityBehavior arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (GravityBehavior)jarg2; 
  (arg1)->FlyMode(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_QuestManager_FactionValue(void * jarg1) {
  unsigned char jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (uint8)(arg1)->FactionValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_wearchange__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->wearchange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_wearchange__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->wearchange(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_wearchange__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->wearchange(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_voicetell(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->voicetell((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_LearnRecipe(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->LearnRecipe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SendMail(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->SendMail((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_QuestManager_CreateDoor(void * jarg1, char * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, unsigned char jarg7, unsigned short jarg8) {
  unsigned short jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  uint8 arg7 ;
  uint16 arg8 ;
  uint16 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (uint8)jarg7; 
  arg8 = (uint16)jarg8; 
  result = (uint16)(arg1)->CreateDoor((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_GetZoneID(void * jarg1, char * jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  int32 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int32)(arg1)->GetZoneID((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_GetZoneLongName(const char * jarg1) {
  const char * jresult ;
  std::string arg1 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = QuestManager::GetZoneLongName(SWIG_STD_MOVE(arg1));
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_GetZoneLongNameByID(unsigned int jarg1) {
  const char * jresult ;
  uint32 arg1 ;
  std::string result;
  
  arg1 = (uint32)jarg1; 
  result = QuestManager::GetZoneLongNameByID(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_GetZoneShortName(unsigned int jarg1) {
  const char * jresult ;
  uint32 arg1 ;
  std::string result;
  
  arg1 = (uint32)jarg1; 
  result = QuestManager::GetZoneShortName(arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneDialogueWindow__SWIG_0(void * jarg1, unsigned char jarg2, int jarg3, char * jarg4, char * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->CrossZoneDialogueWindow(arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneDialogueWindow__SWIG_1(void * jarg1, unsigned char jarg2, int jarg3, char * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->CrossZoneDialogueWindow(arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneLDoNUpdate__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, int jarg6, char * jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->CrossZoneLDoNUpdate(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneLDoNUpdate__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, int jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->CrossZoneLDoNUpdate(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneLDoNUpdate__SWIG_2(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->CrossZoneLDoNUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneMarquee__SWIG_0(void * jarg1, unsigned char jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, char * jarg9, char * jarg10) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  (arg1)->CrossZoneMarquee(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9,(char const *)arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneMarquee__SWIG_1(void * jarg1, unsigned char jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, char * jarg9) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (char *)jarg9; 
  (arg1)->CrossZoneMarquee(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneMessage__SWIG_0(void * jarg1, unsigned char jarg2, int jarg3, unsigned int jarg4, char * jarg5, char * jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->CrossZoneMessage(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneMessage__SWIG_1(void * jarg1, unsigned char jarg2, int jarg3, unsigned int jarg4, char * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  uint32 arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->CrossZoneMessage(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneMove(void * jarg1, void * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  CZMove_Struct *arg2 = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (CZMove_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CZMove_Struct const & is null", 0);
    return ;
  } 
  (arg1)->CrossZoneMove((CZMove_Struct const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneSetEntityVariable__SWIG_0(void * jarg1, unsigned char jarg2, int jarg3, char * jarg4, char * jarg5, char * jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->CrossZoneSetEntityVariable(arg2,arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneSetEntityVariable__SWIG_1(void * jarg1, unsigned char jarg2, int jarg3, char * jarg4, char * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->CrossZoneSetEntityVariable(arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneSignal__SWIG_0(void * jarg1, unsigned char jarg2, int jarg3, int jarg4, char * jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->CrossZoneSignal(arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneSignal__SWIG_1(void * jarg1, unsigned char jarg2, int jarg3, int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->CrossZoneSignal(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneSpell__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, char * jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->CrossZoneSpell(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneSpell__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->CrossZoneSpell(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneTaskUpdate__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, int jarg6, int jarg7, unsigned int jarg8, char * jarg9) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  char *arg9 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  arg9 = (char *)jarg9; 
  (arg1)->CrossZoneTaskUpdate(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(char const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneTaskUpdate__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, int jarg6, int jarg7, unsigned int jarg8) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->CrossZoneTaskUpdate(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneTaskUpdate__SWIG_2(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, int jarg6, int jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->CrossZoneTaskUpdate(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneTaskUpdate__SWIG_3(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5, int jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  int arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->CrossZoneTaskUpdate(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_CrossZoneTaskUpdate__SWIG_4(void * jarg1, unsigned char jarg2, unsigned char jarg3, int jarg4, unsigned int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  int arg4 ;
  uint32 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32)jarg5; 
  (arg1)->CrossZoneTaskUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideDialogueWindow__SWIG_0(void * jarg1, char * jarg2, unsigned char jarg3, unsigned char jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  uint8 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->WorldWideDialogueWindow((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideDialogueWindow__SWIG_1(void * jarg1, char * jarg2, unsigned char jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  uint8 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint8)jarg3; 
  (arg1)->WorldWideDialogueWindow((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideDialogueWindow__SWIG_2(void * jarg1, char * jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->WorldWideDialogueWindow((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideLDoNUpdate__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4, unsigned char jarg5, unsigned char jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->WorldWideLDoNUpdate(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideLDoNUpdate__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4, unsigned char jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  uint8 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->WorldWideLDoNUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideLDoNUpdate__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->WorldWideLDoNUpdate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideLDoNUpdate__SWIG_3(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->WorldWideLDoNUpdate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMarquee__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, unsigned char jarg8, unsigned char jarg9) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  uint8 arg8 ;
  uint8 arg9 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (uint8)jarg8; 
  arg9 = (uint8)jarg9; 
  (arg1)->WorldWideMarquee(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMarquee__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7, unsigned char jarg8) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  uint8 arg8 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (uint8)jarg8; 
  (arg1)->WorldWideMarquee(arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMarquee__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, char * jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->WorldWideMarquee(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMessage__SWIG_0(void * jarg1, unsigned int jarg2, char * jarg3, unsigned char jarg4, unsigned char jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->WorldWideMessage(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMessage__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3, unsigned char jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->WorldWideMessage(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMessage__SWIG_2(void * jarg1, unsigned int jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->WorldWideMessage(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMove__SWIG_0(void * jarg1, unsigned char jarg2, char * jarg3, unsigned short jarg4, unsigned char jarg5, unsigned char jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  uint16 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->WorldWideMove(arg2,(char const *)arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMove__SWIG_1(void * jarg1, unsigned char jarg2, char * jarg3, unsigned short jarg4, unsigned char jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  uint16 arg4 ;
  uint8 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint16)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->WorldWideMove(arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMove__SWIG_2(void * jarg1, unsigned char jarg2, char * jarg3, unsigned short jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  uint16 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint16)jarg4; 
  (arg1)->WorldWideMove(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideMove__SWIG_3(void * jarg1, unsigned char jarg2, char * jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->WorldWideMove(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSetEntityVariable__SWIG_0(void * jarg1, unsigned char jarg2, char * jarg3, char * jarg4, unsigned char jarg5, unsigned char jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  uint8 arg5 ;
  uint8 arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  (arg1)->WorldWideSetEntityVariable(arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSetEntityVariable__SWIG_1(void * jarg1, unsigned char jarg2, char * jarg3, char * jarg4, unsigned char jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  uint8 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->WorldWideSetEntityVariable(arg2,(char const *)arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSetEntityVariable__SWIG_2(void * jarg1, unsigned char jarg2, char * jarg3, char * jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->WorldWideSetEntityVariable(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSignal__SWIG_0(void * jarg1, unsigned char jarg2, int jarg3, unsigned char jarg4, unsigned char jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->WorldWideSignal(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSignal__SWIG_1(void * jarg1, unsigned char jarg2, int jarg3, unsigned char jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  uint8 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->WorldWideSignal(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSignal__SWIG_2(void * jarg1, unsigned char jarg2, int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->WorldWideSignal(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSpell__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned char jarg4, unsigned char jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->WorldWideSpell(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSpell__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned char jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint8 arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint8)jarg4; 
  (arg1)->WorldWideSpell(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideSpell__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->WorldWideSpell(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideTaskUpdate__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4, int jarg5, unsigned int jarg6, unsigned char jarg7, unsigned char jarg8) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  uint8 arg7 ;
  uint8 arg8 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (uint8)jarg7; 
  arg8 = (uint8)jarg8; 
  (arg1)->WorldWideTaskUpdate(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideTaskUpdate__SWIG_1(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4, int jarg5, unsigned int jarg6, unsigned char jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  uint8 arg7 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (uint8)jarg7; 
  (arg1)->WorldWideTaskUpdate(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideTaskUpdate__SWIG_2(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->WorldWideTaskUpdate(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideTaskUpdate__SWIG_3(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4, int jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->WorldWideTaskUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideTaskUpdate__SWIG_4(void * jarg1, unsigned char jarg2, unsigned int jarg3, int jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  int arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->WorldWideTaskUpdate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_WorldWideTaskUpdate__SWIG_5(void * jarg1, unsigned char jarg2, unsigned int jarg3) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  (arg1)->WorldWideTaskUpdate(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_EnableRecipe(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->EnableRecipe(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_DisableRecipe(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->DisableRecipe(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ClearNPCTypeCache(void * jarg1, int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  int arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ClearNPCTypeCache(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_ReloadZoneStaticData(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->ReloadZoneStaticData();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_gethexcolorcode(void * jarg1, const char * jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->gethexcolorcode(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuestManager_GetAAEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, short jarg4) {
  float jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int16 arg4 ;
  float result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int16)jarg4; 
  result = (float)((QuestManager const *)arg1)->GetAAEXPModifierByCharID(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuestManager_GetAAEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (float)((QuestManager const *)arg1)->GetAAEXPModifierByCharID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuestManager_GetEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, short jarg4) {
  float jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  int16 arg4 ;
  float result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (int16)jarg4; 
  result = (float)((QuestManager const *)arg1)->GetEXPModifierByCharID(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_QuestManager_GetEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (float)((QuestManager const *)arg1)->GetEXPModifierByCharID(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SetAAEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, short jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  int16 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int16)jarg5; 
  (arg1)->SetAAEXPModifierByCharID(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SetAAEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetAAEXPModifierByCharID(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SetEXPModifierByCharID__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4, short jarg5) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  int16 arg5 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int16)jarg5; 
  (arg1)->SetEXPModifierByCharID(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SetEXPModifierByCharID__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, float jarg4) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  float arg4 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetEXPModifierByCharID(arg2,arg3,arg4);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getgendername(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getgendername(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getdeityname(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->getdeityname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getinventoryslotname(void * jarg1, short jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int16 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (int16)jarg2; 
  result = (arg1)->getinventoryslotname(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getitemstat(void * jarg1, unsigned int jarg2, const char * jarg3) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (int)(arg1)->getitemstat(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getspellstat__SWIG_0(void * jarg1, unsigned int jarg2, const char * jarg3, unsigned char jarg4) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  uint8 arg4 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = (uint8)jarg4; 
  result = (int)(arg1)->getspellstat(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_getspellstat__SWIG_1(void * jarg1, unsigned int jarg2, const char * jarg3) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string arg3 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (int)(arg1)->getspellstat(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_getspell(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  SPDat_Spell_Struct *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (SPDat_Spell_Struct *)(arg1)->getspell(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_getenvironmentaldamagename(void * jarg1, unsigned char jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (arg1)->getenvironmentaldamagename(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_TrackNPC(void * jarg1, unsigned int jarg2) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->TrackNPC(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_GetRecipeMadeCount(void * jarg1, unsigned int jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->GetRecipeMadeCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_GetRecipeName(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (arg1)->GetRecipeName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_HasRecipeLearned(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->HasRecipeLearned(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_DoAugmentSlotsMatch(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint32 arg2 ;
  uint32 arg3 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (bool)(arg1)->DoAugmentSlotsMatch(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_QuestManager_DoesAugmentFit__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned char jarg4) {
  signed char jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  uint32 arg3 ;
  uint8 arg4 ;
  int8 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint8)jarg4; 
  result = (int8)(arg1)->DoesAugmentFit(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_QuestManager_DoesAugmentFit__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  signed char jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  uint32 arg3 ;
  int8 result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  arg3 = (uint32)jarg3; 
  result = (int8)(arg1)->DoesAugmentFit(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SendPlayerHandinEvent(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  (arg1)->SendPlayerHandinEvent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SendChannelMessage__SWIG_0(void * jarg1, unsigned char jarg2, unsigned int jarg3, unsigned char jarg4, unsigned char jarg5, char * jarg6) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  uint32 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint32)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->SendChannelMessage(arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SendChannelMessage__SWIG_1(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4, unsigned char jarg5, unsigned char jarg6, char * jarg7) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Client *arg2 = (Client *) 0 ;
  uint8 arg3 ;
  uint32 arg4 ;
  uint8 arg5 ;
  uint8 arg6 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint8)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->SendChannelMessage(arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuestManager_SendChannelMessage__SWIG_2(void * jarg1, void * jarg2, char * jarg3, unsigned char jarg4, unsigned int jarg5, unsigned char jarg6, unsigned char jarg7, char * jarg8) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  Client *arg2 = (Client *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint32 arg5 ;
  uint8 arg6 ;
  uint8 arg7 ;
  char *arg8 = (char *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (Client *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (uint8)jarg7; 
  arg8 = (char *)jarg8; 
  (arg1)->SendChannelMessage(arg2,(char const *)arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetBot(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  Bot *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (Bot *)((QuestManager const *)arg1)->GetBot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetInitiator(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  Client *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (Client *)((QuestManager const *)arg1)->GetInitiator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetNPC(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  NPC *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (NPC *)((QuestManager const *)arg1)->GetNPC();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetOwner(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  Mob *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (Mob *)((QuestManager const *)arg1)->GetOwner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetInventory(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  EQ::InventoryProfile *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (EQ::InventoryProfile *)((QuestManager const *)arg1)->GetInventory();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetQuestItem(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (EQ::ItemInstance *)((QuestManager const *)arg1)->GetQuestItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_QuestManager_GetQuestSpell(void * jarg1) {
  void * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  SPDat_Spell_Struct *result = 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  result = (SPDat_Spell_Struct *)(arg1)->GetQuestSpell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_QuestManager_GetEncounter(void * jarg1) {
  const char * jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  std::string result;
  
  arg1 = (QuestManager *)jarg1; 
  result = ((QuestManager const *)arg1)->GetEncounter();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_ProximitySayInUse(void * jarg1) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (bool)(arg1)->ProximitySayInUse();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_createbotcount__SWIG_0(void * jarg1, unsigned char jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int)(arg1)->createbotcount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_createbotcount__SWIG_1(void * jarg1) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (int)(arg1)->createbotcount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_spawnbotcount__SWIG_0(void * jarg1, unsigned char jarg2) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  uint8 arg2 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (int)(arg1)->spawnbotcount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QuestManager_spawnbotcount__SWIG_1(void * jarg1) {
  int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  int result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (int)(arg1)->spawnbotcount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_botquest(void * jarg1) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  result = (bool)(arg1)->botquest();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_QuestManager_createBot(void * jarg1, char * jarg2, char * jarg3, unsigned char jarg4, unsigned short jarg5, unsigned char jarg6, unsigned char jarg7) {
  unsigned int jresult ;
  QuestManager *arg1 = (QuestManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  uint8 arg4 ;
  uint16 arg5 ;
  uint8 arg6 ;
  uint8 arg7 ;
  bool result;
  
  arg1 = (QuestManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint16)jarg5; 
  arg6 = (uint8)jarg6; 
  arg7 = (uint8)jarg7; 
  result = (bool)(arg1)->createBot((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_quest_manager_set(void * jarg1) {
  QuestManager *arg1 = (QuestManager *) 0 ;
  
  arg1 = (QuestManager *)jarg1; 
  quest_manager = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_quest_manager_get() {
  void * jresult ;
  QuestManager *result = 0 ;
  
  result = (QuestManager *)&quest_manager;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_0(void * jarg1, short jarg2) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int16 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int16)jarg2; 
  result = (EQ::ItemInstance *)new EQ::ItemInstance((EQ::ItemData const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_1(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::ItemInstance *)new EQ::ItemInstance((EQ::ItemData const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_2() {
  void * jresult ;
  EQ::ItemInstance *result = 0 ;
  
  result = (EQ::ItemInstance *)new EQ::ItemInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_3(void * jarg1, unsigned int jarg2, short jarg3) {
  void * jresult ;
  SharedDatabase *arg1 = (SharedDatabase *) 0 ;
  uint32 arg2 ;
  int16 arg3 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (SharedDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  arg3 = (int16)jarg3; 
  result = (EQ::ItemInstance *)new EQ::ItemInstance(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_4(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  SharedDatabase *arg1 = (SharedDatabase *) 0 ;
  uint32 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (SharedDatabase *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (EQ::ItemInstance *)new EQ::ItemInstance(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_5(int jarg1) {
  void * jresult ;
  ItemInstTypes arg1 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (ItemInstTypes)jarg1; 
  result = (EQ::ItemInstance *)new EQ::ItemInstance(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemInstance__SWIG_6(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = 0 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return 0;
  } 
  result = (EQ::ItemInstance *)new EQ::ItemInstance((EQ::ItemInstance const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemInstance(void * jarg1) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsType(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  item::ItemClass arg2 ;
  item::ItemClass *argp2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  argp2 = (item::ItemClass *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null item::ItemClass", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsClassCommon(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsClassCommon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsClassBag(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsClassBag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsClassBook(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsClassBook();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsStackable(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsStackable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsCharged(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsCharged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsEquipable__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsEquipable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsClassEquipable(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsClassEquipable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsRaceEquipable(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsRaceEquipable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsEquipable__SWIG_1(void * jarg1, short jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int16)jarg2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsEquipable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsAugmentable(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsAugmentable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_AvailableWearSlot(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->AvailableWearSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemInstance_AvailableAugmentSlot(void * jarg1, int jarg2) {
  signed char jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 arg2 ;
  int8 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (int8)((EQ::ItemInstance const *)arg1)->AvailableAugmentSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsAugmentSlotAvailable(void * jarg1, int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 arg2 ;
  uint8 arg3 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (uint8)jarg3; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsAugmentSlotAvailable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetAugmentType(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetAugmentType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetAugmentRestriction(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetAugmentRestriction();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsExpendable(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsExpendable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetItem__SWIG_0(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (EQ::ItemInstance *)((EQ::ItemInstance const *)arg1)->GetItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetItemID(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetItemID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_PutItem__SWIG_0(void * jarg1, unsigned char jarg2, void * jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *arg3 = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return ;
  } 
  (arg1)->PutItem(arg2,(EQ::ItemInstance const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_PutItem__SWIG_1(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  SharedDatabase *arg2 = (SharedDatabase *) 0 ;
  uint8 arg3 ;
  uint32 arg4 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (SharedDatabase *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->PutItem(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_DeleteItem(void * jarg1, unsigned char jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->DeleteItem(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_PopItem(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (EQ::ItemInstance *)(arg1)->PopItem(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_Clear(void * jarg1) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_ClearByFlags(void * jarg1, int jarg2, int jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  byFlagSetting arg2 ;
  byFlagSetting arg3 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (byFlagSetting)jarg2; 
  arg3 = (byFlagSetting)jarg3; 
  (arg1)->ClearByFlags(arg2,arg3);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemInstance_FirstOpenSlot(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint8)((EQ::ItemInstance const *)arg1)->FirstOpenSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemInstance_GetTotalItemCount(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint8)((EQ::ItemInstance const *)arg1)->GetTotalItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsNoneEmptyContainer(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)(arg1)->IsNoneEmptyContainer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetContents(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::map< uint8,EQ::ItemInstance * > *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (std::map< uint8,EQ::ItemInstance * > *)(arg1)->GetContents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetAugment(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (EQ::ItemInstance *)((EQ::ItemInstance const *)arg1)->GetAugment(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetAugmentItemID(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetAugmentItemID(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_PutAugment__SWIG_0(void * jarg1, unsigned char jarg2, void * jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *arg3 = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (EQ::ItemInstance *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ::ItemInstance const & is null", 0);
    return ;
  } 
  (arg1)->PutAugment(arg2,(EQ::ItemInstance const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_PutAugment__SWIG_1(void * jarg1, void * jarg2, unsigned char jarg3, unsigned int jarg4) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  SharedDatabase *arg2 = (SharedDatabase *) 0 ;
  uint8 arg3 ;
  uint32 arg4 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (SharedDatabase *)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint32)jarg4; 
  (arg1)->PutAugment(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_DeleteAugment(void * jarg1, unsigned char jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  (arg1)->DeleteAugment(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_RemoveAugment(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (EQ::ItemInstance *)(arg1)->RemoveAugment(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsAugmented(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)(arg1)->IsAugmented();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_ContainsAugmentByID(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (bool)(arg1)->ContainsAugmentByID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_CountAugmentByID(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  result = (int)(arg1)->CountAugmentByID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsOrnamentationAugment(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *arg2 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (EQ::ItemInstance *)jarg2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsOrnamentationAugment(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetOrnamentationAugment(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (EQ::ItemInstance *)((EQ::ItemInstance const *)arg1)->GetOrnamentationAugment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_UpdateOrnamentationInfo(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)(arg1)->UpdateOrnamentationInfo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_CanTransform__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)EQ::ItemInstance::CanTransform((EQ::ItemData const *)arg1,(EQ::ItemData const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_CanTransform__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  result = (bool)EQ::ItemInstance::CanTransform((EQ::ItemData const *)arg1,(EQ::ItemData const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsWeapon(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsWeapon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsAmmo(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsAmmo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetID(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetItemScriptID(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetItemScriptID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetItem__SWIG_1(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (EQ::ItemData *)((EQ::ItemInstance const *)arg1)->GetItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetUnscaledItem(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  EQ::ItemData *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (EQ::ItemData *)((EQ::ItemInstance const *)arg1)->GetUnscaledItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemInstance_GetItemType(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint8)((EQ::ItemInstance const *)arg1)->GetItemType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemInstance_GetCharges(void * jarg1) {
  short jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int16)((EQ::ItemInstance const *)arg1)->GetCharges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCharges(void * jarg1, short jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->SetCharges(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetPrice(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetPrice();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetPrice(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetPrice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetColor(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetColor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetColor(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetColor();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetMerchantSlot(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetMerchantSlot();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetMerchantSlot(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetMerchantSlot(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetMerchantCount(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int32)((EQ::ItemInstance const *)arg1)->GetMerchantCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetMerchantCount(void * jarg1, int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetMerchantCount(arg2);
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemInstance_GetCurrentSlot(void * jarg1) {
  short jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int16)((EQ::ItemInstance const *)arg1)->GetCurrentSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCurrentSlot(void * jarg1, short jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int16)jarg2; 
  (arg1)->SetCurrentSlot(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsAttuned(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsAttuned();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetAttuned(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAttuned(arg2);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ItemInstance_GetCustomDataString(void * jarg1) {
  const char * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = ((EQ::ItemInstance const *)arg1)->GetCustomDataString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ItemInstance_GetCustomData(void * jarg1, const char * jarg2) {
  const char * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->GetCustomData((std::string const &)*arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCustomDataString(void * jarg1, const char * jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetCustomDataString((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCustomData__SWIG_0(void * jarg1, const char * jarg2, const char * jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetCustomData((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCustomData__SWIG_1(void * jarg1, const char * jarg2, int jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  (arg1)->SetCustomData((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCustomData__SWIG_2(void * jarg1, const char * jarg2, float jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  (arg1)->SetCustomData((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetCustomData__SWIG_3(void * jarg1, const char * jarg2, unsigned int jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetCustomData((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_DeleteCustomData(void * jarg1, const char * jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->DeleteCustomData((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_Clone(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (EQ::ItemInstance *)((EQ::ItemInstance const *)arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsSlotAllowed(void * jarg1, short jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int16)jarg2; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsSlotAllowed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsDroppable__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsDroppable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsDroppable__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsDroppable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsScaling(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsScaling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsEvolving(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->IsEvolving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetExp(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetExp();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetExp(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetExp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_AddExp(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AddExp(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_IsActivated(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)(arg1)->IsActivated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetActivated(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetActivated(arg2);
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemInstance_GetEvolveLvl(void * jarg1) {
  signed char jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int8)((EQ::ItemInstance const *)arg1)->GetEvolveLvl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetScaling(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetScaling(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetOrnamentationIcon(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetOrnamentationIcon();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetOrnamentIcon(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetOrnamentIcon(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetOrnamentationIDFile(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetOrnamentationIDFile();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetOrnamentationIDFile(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetOrnamentationIDFile(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetNewIDFile(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetNewIDFile();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetNewIDFile(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetNewIDFile(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetOrnamentHeroModel__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 arg2 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int32)jarg2; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetOrnamentHeroModel(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetOrnamentHeroModel__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetOrnamentHeroModel();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetOrnamentHeroModel(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetOrnamentHeroModel(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetRecastTimestamp(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetRecastTimestamp();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetRecastTimestamp(void * jarg1, unsigned int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetRecastTimestamp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_Initialize__SWIG_0(void * jarg1, void * jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  SharedDatabase *arg2 = (SharedDatabase *) 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (SharedDatabase *)jarg2; 
  (arg1)->Initialize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_Initialize__SWIG_1(void * jarg1) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  (arg1)->Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_ScaleItem(void * jarg1) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  (arg1)->ScaleItem();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_EvolveOnAllKills(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (bool)((EQ::ItemInstance const *)arg1)->EvolveOnAllKills();
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemInstance_GetMaxEvolveLvl(void * jarg1) {
  signed char jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int8)((EQ::ItemInstance const *)arg1)->GetMaxEvolveLvl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetKillsNeeded(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint8 arg2 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint8)jarg2; 
  result = (uint32)(arg1)->GetKillsNeeded(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_ItemInstance_Serialize__SWIG_0(void * jarg1, short jarg2) {
  const char * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int16 arg2 ;
  std::string result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int16)jarg2; 
  result = ((EQ::ItemInstance const *)arg1)->Serialize(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_Serialize__SWIG_1(void * jarg1, void * jarg2, short jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  OutBuffer *arg2 = 0 ;
  int16 arg3 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (OutBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "OutBuffer & is null", 0);
    return ;
  } 
  arg3 = (int16)jarg3; 
  ((EQ::ItemInstance const *)arg1)->Serialize(*arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetSerialNumber(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int32)((EQ::ItemInstance const *)arg1)->GetSerialNumber();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetSerialNumber(void * jarg1, int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetSerialNumber(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetTimers(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::map< std::string,::Timer > *result = 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (std::map< std::string,::Timer > *) &(arg1)->GetTimers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetTimer(void * jarg1, const char * jarg2, unsigned int jarg3) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string arg2 ;
  uint32 arg3 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (uint32)jarg3; 
  (arg1)->SetTimer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_StopTimer(void * jarg1, const char * jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::string arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->StopTimer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_ClearTimers(void * jarg1) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  (arg1)->ClearTimers();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetTaskDeliveredCount(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetTaskDeliveredCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemInstance_SetTaskDeliveredCount(void * jarg1, int jarg2) {
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int arg2 ;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTaskDeliveredCount(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_RemoveTaskDeliveredItems(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)(arg1)->RemoveTaskDeliveredItems();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemArmorClass__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemArmorClass(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemArmorClass__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemArmorClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemElementalDamage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, unsigned int jarg11) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  int *arg9 = 0 ;
  int *arg10 = 0 ;
  bool arg11 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg9 = (int *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg10 = (int *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg11 = jarg11 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemElementalDamage(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemElementalDamage__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  int *arg8 = 0 ;
  int *arg9 = 0 ;
  int *arg10 = 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (int *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg5 = (int *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg6 = (int *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg7 = (int *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg8 = (int *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg9 = (int *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  arg10 = (int *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemElementalDamage(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8,*arg9,*arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemElementalFlag__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemElementalFlag(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemElementalFlag__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemElementalFlag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemElementalDamage__SWIG_2(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemElementalDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemElementalDamage__SWIG_3(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemElementalDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemRecommendedLevel__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemRecommendedLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemRecommendedLevel__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemRecommendedLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemRequiredLevel__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemRequiredLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemRequiredLevel__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemRequiredLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemWeaponDamage__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemWeaponDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemWeaponDamage__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemWeaponDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBackstabDamage__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBackstabDamage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBackstabDamage__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBackstabDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageBody__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageBody(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageBody__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageBody();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageRace__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageRace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageRace__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageBody__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bodyType arg2 ;
  bool arg3 ;
  bodyType *argp2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  argp2 = (bodyType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null bodyType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageBody(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageBody__SWIG_3(void * jarg1, void * jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bodyType arg2 ;
  bodyType *argp2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  argp2 = (bodyType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null bodyType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageBody(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageRace__SWIG_2(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint16 arg2 ;
  bool arg3 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageRace(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemBaneDamageRace__SWIG_3(void * jarg1, unsigned short jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint16 arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemBaneDamageRace(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemMagical__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemMagical(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemMagical__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemMagical();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHP__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHP(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHP__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemMana__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemMana(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemMana__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemEndur__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemEndur(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemEndur__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemEndur();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemAttack__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemAttack(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemAttack__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemStr__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemStr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemStr__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemStr();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemSta__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemSta(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemSta__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemSta();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemDex__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemDex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemDex__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemDex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemAgi__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemAgi(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemAgi__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemAgi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemInt__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemInt__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemWis__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemWis(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemWis__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemWis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemCha__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemCha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemCha__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemCha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemMR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemMR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemMR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemFR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemFR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemFR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemCR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemCR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemCR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemPR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemPR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemPR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemDR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemDR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemDR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemCorrup__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemCorrup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemCorrup__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicStr__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicStr(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicStr__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicStr();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicSta__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicSta(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicSta__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicSta();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicDex__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicDex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicDex__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicDex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicAgi__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicAgi(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicAgi__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicAgi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicInt__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicInt__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicInt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicWis__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicWis(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicWis__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicWis();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicCha__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicCha(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicCha__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicCha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicMR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicMR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicMR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicMR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicFR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicFR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicFR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicFR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicCR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicCR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicCR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicCR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicPR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicPR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicPR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicPR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicDR__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicDR(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicDR__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicDR();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicCorrup__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicCorrup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHeroicCorrup__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHeroicCorrup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHaste__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHaste(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemInstance_GetItemHaste__SWIG_1(void * jarg1) {
  int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  int result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (int)((EQ::ItemInstance const *)arg1)->GetItemHaste();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemInstance_GetItemGuildFavor(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = (uint32)((EQ::ItemInstance const *)arg1)->GetItemGuildFavor();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemInstance_GetAugmentIDs(void * jarg1) {
  void * jresult ;
  EQ::ItemInstance *arg1 = (EQ::ItemInstance *) 0 ;
  std::vector< uint32 > result;
  
  arg1 = (EQ::ItemInstance *)jarg1; 
  result = ((EQ::ItemInstance const *)arg1)->GetAugmentIDs();
  jresult = new std::vector< uint32 >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EvolveInfo_LvlKills_set(void * jarg1, void * jarg2) {
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  uint16 *arg2 = (uint16 *) (uint16 *)0 ;
  
  arg1 = (EvolveInfo *)jarg1; 
  arg2 = (uint16 *)jarg2; 
  {
    size_t ii;
    uint16 *b = (uint16 *) arg1->LvlKills;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((uint16 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EvolveInfo_LvlKills_get(void * jarg1) {
  void * jresult ;
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  uint16 *result = 0 ;
  
  arg1 = (EvolveInfo *)jarg1; 
  result = (uint16 *)(uint16 *) ((arg1)->LvlKills);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EvolveInfo_FirstItem_set(void * jarg1, unsigned int jarg2) {
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EvolveInfo *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->FirstItem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EvolveInfo_FirstItem_get(void * jarg1) {
  unsigned int jresult ;
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  uint32 result;
  
  arg1 = (EvolveInfo *)jarg1; 
  result = (uint32) ((arg1)->FirstItem);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EvolveInfo_MaxLvl_set(void * jarg1, unsigned char jarg2) {
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EvolveInfo *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->MaxLvl = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EvolveInfo_MaxLvl_get(void * jarg1) {
  unsigned char jresult ;
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  uint8 result;
  
  arg1 = (EvolveInfo *)jarg1; 
  result = (uint8) ((arg1)->MaxLvl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EvolveInfo_AllKills_set(void * jarg1, unsigned int jarg2) {
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (EvolveInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AllKills = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EvolveInfo_AllKills_get(void * jarg1) {
  unsigned int jresult ;
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  bool result;
  
  arg1 = (EvolveInfo *)jarg1; 
  result = (bool) ((arg1)->AllKills);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EvolveInfo__SWIG_0() {
  void * jresult ;
  EvolveInfo *result = 0 ;
  
  result = (EvolveInfo *)new EvolveInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EvolveInfo__SWIG_1(unsigned int jarg1, unsigned char jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8, unsigned int jarg9, unsigned int jarg10, unsigned int jarg11, unsigned int jarg12) {
  void * jresult ;
  uint32 arg1 ;
  uint8 arg2 ;
  bool arg3 ;
  uint32 arg4 ;
  uint32 arg5 ;
  uint32 arg6 ;
  uint32 arg7 ;
  uint32 arg8 ;
  uint32 arg9 ;
  uint32 arg10 ;
  uint32 arg11 ;
  uint32 arg12 ;
  EvolveInfo *result = 0 ;
  
  arg1 = (uint32)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (uint32)jarg4; 
  arg5 = (uint32)jarg5; 
  arg6 = (uint32)jarg6; 
  arg7 = (uint32)jarg7; 
  arg8 = (uint32)jarg8; 
  arg9 = (uint32)jarg9; 
  arg10 = (uint32)jarg10; 
  arg11 = (uint32)jarg11; 
  arg12 = (uint32)jarg12; 
  result = (EvolveInfo *)new EvolveInfo(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EvolveInfo(void * jarg1) {
  EvolveInfo *arg1 = (EvolveInfo *) 0 ;
  
  arg1 = (EvolveInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemEffect_Struct_Effect_set(void * jarg1, int jarg2) {
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Effect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemEffect_Struct_Effect_get(void * jarg1) {
  int jresult ;
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  int32 result;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  result = (int32) ((arg1)->Effect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemEffect_Struct_Type_set(void * jarg1, unsigned char jarg2) {
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemEffect_Struct_Type_get(void * jarg1) {
  unsigned char jresult ;
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  uint8 result;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  result = (uint8) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemEffect_Struct_Level_set(void * jarg1, unsigned char jarg2) {
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemEffect_Struct_Level_get(void * jarg1) {
  unsigned char jresult ;
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  uint8 result;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  result = (uint8) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemEffect_Struct_Level2_set(void * jarg1, unsigned char jarg2) {
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Level2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemEffect_Struct_Level2_get(void * jarg1) {
  unsigned char jresult ;
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  uint8 result;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  result = (uint8) ((arg1)->Level2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemEffect_Struct() {
  void * jresult ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  result = (EQ::item::ItemEffect_Struct *)new EQ::item::ItemEffect_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemEffect_Struct(void * jarg1) {
  EQ::item::ItemEffect_Struct *arg1 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::item::ItemEffect_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConvertAugTypeToAugTypeBit(unsigned char jarg1) {
  unsigned int jresult ;
  uint8 arg1 ;
  uint32 result;
  
  arg1 = (uint8)jarg1; 
  result = (uint32)EQ::item::ConvertAugTypeToAugTypeBit(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ConvertAugTypeBitToAugType(unsigned int jarg1) {
  unsigned char jresult ;
  uint32 arg1 ;
  uint8 result;
  
  arg1 = (uint32)jarg1; 
  result = (uint8)EQ::item::ConvertAugTypeBitToAugType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalSerializedItem_Struct_slot_id_set(void * jarg1, short jarg2) {
  EQ::InternalSerializedItem_Struct *arg1 = (EQ::InternalSerializedItem_Struct *) 0 ;
  int16 arg2 ;
  
  arg1 = (EQ::InternalSerializedItem_Struct *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->slot_id = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_InternalSerializedItem_Struct_slot_id_get(void * jarg1) {
  short jresult ;
  EQ::InternalSerializedItem_Struct *arg1 = (EQ::InternalSerializedItem_Struct *) 0 ;
  int16 result;
  
  arg1 = (EQ::InternalSerializedItem_Struct *)jarg1; 
  result = (int16) ((arg1)->slot_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalSerializedItem_Struct_inst_set(void * jarg1, void * jarg2) {
  EQ::InternalSerializedItem_Struct *arg1 = (EQ::InternalSerializedItem_Struct *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (EQ::InternalSerializedItem_Struct *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->inst = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalSerializedItem_Struct_inst_get(void * jarg1) {
  void * jresult ;
  EQ::InternalSerializedItem_Struct *arg1 = (EQ::InternalSerializedItem_Struct *) 0 ;
  void *result = 0 ;
  
  arg1 = (EQ::InternalSerializedItem_Struct *)jarg1; 
  result = (void *) ((arg1)->inst);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InternalSerializedItem_Struct() {
  void * jresult ;
  EQ::InternalSerializedItem_Struct *result = 0 ;
  
  result = (EQ::InternalSerializedItem_Struct *)new EQ::InternalSerializedItem_Struct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InternalSerializedItem_Struct(void * jarg1) {
  EQ::InternalSerializedItem_Struct *arg1 = (EQ::InternalSerializedItem_Struct *) 0 ;
  
  arg1 = (EQ::InternalSerializedItem_Struct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_MinStatus_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->MinStatus = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_MinStatus_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->MinStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Comment_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Comment, (const char *)arg2, 255-1);
      arg1->Comment[255-1] = 0;
    } else {
      arg1->Comment[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_Comment_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->Comment);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ItemClass_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ItemClass = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_ItemClass_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->ItemClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Name_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 64-1);
      arg1->Name[64-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_Name_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Lore_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Lore, (const char *)arg2, 80-1);
      arg1->Lore[80-1] = 0;
    } else {
      arg1->Lore[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_Lore_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->Lore);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_IDFile_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->IDFile, (const char *)arg2, 30-1);
      arg1->IDFile[30-1] = 0;
    } else {
      arg1->IDFile[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_IDFile_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->IDFile);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ID_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_ID_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->ID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Weight_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Weight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_Weight_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->Weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_NoRent_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->NoRent = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_NoRent_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->NoRent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_NoDrop_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->NoDrop = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_NoDrop_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->NoDrop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Size_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_Size_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->Size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Slots_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Slots = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Slots_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Slots);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Price_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Price = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Price_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Price);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Icon_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Icon = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Icon_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Icon);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_LoreGroup_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->LoreGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_LoreGroup_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->LoreGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_LoreFlag_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->LoreFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_LoreFlag_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->LoreFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_PendingLoreFlag_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PendingLoreFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_PendingLoreFlag_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->PendingLoreFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ArtifactFlag_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ArtifactFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_ArtifactFlag_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->ArtifactFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SummonedFlag_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SummonedFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_SummonedFlag_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->SummonedFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FVNoDrop_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->FVNoDrop = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_FVNoDrop_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->FVNoDrop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Favor_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Favor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Favor_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Favor);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_GuildFavor_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->GuildFavor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_GuildFavor_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->GuildFavor);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_PointType_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->PointType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_PointType_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->PointType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BagType_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->BagType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_BagType_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->BagType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BagSlots_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->BagSlots = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_BagSlots_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->BagSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BagSize_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->BagSize = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_BagSize_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->BagSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BagWR_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->BagWR = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_BagWR_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->BagWR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BenefitFlag_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BenefitFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BenefitFlag_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->BenefitFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Tradeskills_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Tradeskills = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Tradeskills_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->Tradeskills);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_CR_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->CR = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_CR_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->CR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_DR_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->DR = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_DR_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->DR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_PR_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->PR = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_PR_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->PR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_MR_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->MR = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_MR_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->MR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FR_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->FR = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_FR_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->FR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AStr_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->AStr = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_AStr_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->AStr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ASta_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->ASta = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_ASta_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->ASta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AAgi_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->AAgi = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_AAgi_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->AAgi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ADex_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->ADex = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_ADex_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->ADex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ACha_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->ACha = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_ACha_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->ACha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AInt_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->AInt = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_AInt_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->AInt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AWis_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->AWis = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_AWis_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->AWis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HP_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HP_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Mana_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Mana = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_Mana_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->Mana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AC_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->AC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_AC_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->AC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Deity_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Deity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Deity_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Deity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SkillModValue_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SkillModValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_SkillModValue_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->SkillModValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SkillModMax_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SkillModMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_SkillModMax_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->SkillModMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SkillModType_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->SkillModType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_SkillModType_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->SkillModType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BaneDmgRace_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->BaneDmgRace = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BaneDmgRace_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->BaneDmgRace);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BaneDmgAmt_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->BaneDmgAmt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_BaneDmgAmt_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->BaneDmgAmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BaneDmgBody_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->BaneDmgBody = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BaneDmgBody_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->BaneDmgBody);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Magic_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Magic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Magic_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->Magic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_CastTime__set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->CastTime_ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_CastTime__get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->CastTime_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ReqLevel_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ReqLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_ReqLevel_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->ReqLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BardType_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->BardType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BardType_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->BardType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BardValue_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->BardValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_BardValue_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->BardValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Light_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->Light = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_Light_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->Light);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Delay_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Delay = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_Delay_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->Delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_RecLevel_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->RecLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_RecLevel_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->RecLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_RecSkill_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->RecSkill = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_RecSkill_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->RecSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ElemDmgType_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ElemDmgType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_ElemDmgType_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->ElemDmgType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ElemDmgAmt_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ElemDmgAmt = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_ElemDmgAmt_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->ElemDmgAmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Range_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_Range_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->Range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Damage_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Damage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Damage_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Damage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Color_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Color = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Color_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Color);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Classes_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Classes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Classes_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Classes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Races_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Races = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Races_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Races);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_MaxCharges_set(void * jarg1, short jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int16 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->MaxCharges = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemData_MaxCharges_get(void * jarg1) {
  short jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int16 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int16) ((arg1)->MaxCharges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ItemType_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->ItemType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_ItemType_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->ItemType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SubType_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SubType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_SubType_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->SubType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Material_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Material = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_Material_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->Material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HerosForgeModel_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->HerosForgeModel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_HerosForgeModel_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->HerosForgeModel);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SellRate_set(void * jarg1, float jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  float arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SellRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemData_SellRate_get(void * jarg1) {
  float jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  float result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (float) ((arg1)->SellRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Fulfilment_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Fulfilment = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Fulfilment_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Fulfilment);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_CastTime_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->CastTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_CastTime_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->CastTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_EliteMaterial_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->EliteMaterial = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_EliteMaterial_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->EliteMaterial);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ProcRate_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ProcRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_ProcRate_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->ProcRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_CombatEffects_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->CombatEffects = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_CombatEffects_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->CombatEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Shielding_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->Shielding = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_Shielding_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->Shielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_StunResist_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->StunResist = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_StunResist_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->StunResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_StrikeThrough_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->StrikeThrough = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_StrikeThrough_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->StrikeThrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ExtraDmgSkill_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ExtraDmgSkill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_ExtraDmgSkill_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->ExtraDmgSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ExtraDmgAmt_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ExtraDmgAmt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_ExtraDmgAmt_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->ExtraDmgAmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SpellShield_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->SpellShield = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_SpellShield_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->SpellShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Avoidance_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->Avoidance = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_Avoidance_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->Avoidance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Accuracy_set(void * jarg1, signed char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int8)jarg2; 
  if (arg1) (arg1)->Accuracy = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemData_Accuracy_get(void * jarg1) {
  signed char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int8) ((arg1)->Accuracy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_CharmFileID_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->CharmFileID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_CharmFileID_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->CharmFileID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionMod1_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionMod1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionMod1_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionMod1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionMod2_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionMod2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionMod2_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionMod2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionMod3_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionMod3 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionMod3_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionMod3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionMod4_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionMod4 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionMod4_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionMod4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionAmt1_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionAmt1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionAmt1_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionAmt1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionAmt2_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionAmt2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionAmt2_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionAmt2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionAmt3_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionAmt3 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionAmt3_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionAmt3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FactionAmt4_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->FactionAmt4 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_FactionAmt4_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->FactionAmt4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_CharmFile_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CharmFile, (const char *)arg2, 32-1);
      arg1->CharmFile[32-1] = 0;
    } else {
      arg1->CharmFile[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_CharmFile_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->CharmFile);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AugType_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->AugType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_AugType_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->AugType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AugSlotType_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 *arg2 = (uint8 *) (uint8 *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->AugSlotType;
    for (ii = 0; ii < (size_t)invaug::SOCKET_COUNT; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_AugSlotType_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->AugSlotType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AugSlotVisible_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 *arg2 = (uint8 *) (uint8 *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->AugSlotVisible;
    for (ii = 0; ii < (size_t)invaug::SOCKET_COUNT; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_AugSlotVisible_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->AugSlotVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AugSlotUnk2_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 *arg2 = (uint8 *) (uint8 *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8 *)jarg2; 
  {
    size_t ii;
    uint8 *b = (uint8 *) arg1->AugSlotUnk2;
    for (ii = 0; ii < (size_t)invaug::SOCKET_COUNT; ii++) b[ii] = *((uint8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_AugSlotUnk2_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8 *)(uint8 *) ((arg1)->AugSlotUnk2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_LDoNTheme_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->LDoNTheme = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_LDoNTheme_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->LDoNTheme);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_LDoNPrice_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->LDoNPrice = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_LDoNPrice_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->LDoNPrice);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_LDoNSold_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->LDoNSold = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_LDoNSold_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->LDoNSold);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BaneDmgRaceAmt_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->BaneDmgRaceAmt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BaneDmgRaceAmt_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->BaneDmgRaceAmt);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AugRestrict_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->AugRestrict = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_AugRestrict_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->AugRestrict);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Endur_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Endur = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_Endur_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->Endur);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_DotShielding_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DotShielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_DotShielding_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->DotShielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Attack_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Attack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_Attack_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->Attack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Regen_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Regen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_Regen_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->Regen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ManaRegen_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->ManaRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_ManaRegen_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->ManaRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_EnduranceRegen_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->EnduranceRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_EnduranceRegen_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->EnduranceRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Haste_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->Haste = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_Haste_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->Haste);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_DamageShield_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->DamageShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_DamageShield_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->DamageShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_RecastDelay_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->RecastDelay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_RecastDelay_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->RecastDelay);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_RecastType_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RecastType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_RecastType_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int) ((arg1)->RecastType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_AugDistiller_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->AugDistiller = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_AugDistiller_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->AugDistiller);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Attuneable_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Attuneable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Attuneable_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->Attuneable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_NoPet_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoPet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_NoPet_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->NoPet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_PotionBelt_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PotionBelt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_PotionBelt_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->PotionBelt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Stackable_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Stackable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Stackable_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->Stackable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_NoTransfer_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoTransfer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_NoTransfer_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->NoTransfer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_QuestItemFlag_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->QuestItemFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_QuestItemFlag_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool) ((arg1)->QuestItemFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_StackSize_set(void * jarg1, short jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int16 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int16)jarg2; 
  if (arg1) (arg1)->StackSize = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemData_StackSize_get(void * jarg1) {
  short jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int16 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int16) ((arg1)->StackSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_PotionBeltSlots_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->PotionBeltSlots = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_PotionBeltSlots_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->PotionBeltSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Click_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *arg2 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::item::ItemEffect_Struct *)jarg2; 
  if (arg1) (arg1)->Click = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_Click_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::item::ItemEffect_Struct *)& ((arg1)->Click);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Proc_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *arg2 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::item::ItemEffect_Struct *)jarg2; 
  if (arg1) (arg1)->Proc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_Proc_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::item::ItemEffect_Struct *)& ((arg1)->Proc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Worn_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *arg2 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::item::ItemEffect_Struct *)jarg2; 
  if (arg1) (arg1)->Worn = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_Worn_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::item::ItemEffect_Struct *)& ((arg1)->Worn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Focus_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *arg2 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::item::ItemEffect_Struct *)jarg2; 
  if (arg1) (arg1)->Focus = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_Focus_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::item::ItemEffect_Struct *)& ((arg1)->Focus);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Scroll_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *arg2 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::item::ItemEffect_Struct *)jarg2; 
  if (arg1) (arg1)->Scroll = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_Scroll_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::item::ItemEffect_Struct *)& ((arg1)->Scroll);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Bard_set(void * jarg1, void * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *arg2 = (EQ::item::ItemEffect_Struct *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::item::ItemEffect_Struct *)jarg2; 
  if (arg1) (arg1)->Bard = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemData_Bard_get(void * jarg1) {
  void * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::item::ItemEffect_Struct *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (EQ::item::ItemEffect_Struct *)& ((arg1)->Bard);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Book_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->Book = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_Book_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->Book);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BookType_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->BookType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BookType_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->BookType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Filename_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Filename, (const char *)arg2, 33-1);
      arg1->Filename[33-1] = 0;
    } else {
      arg1->Filename[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_Filename_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->Filename);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SVCorruption_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SVCorruption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_SVCorruption_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->SVCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Purity_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Purity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Purity_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Purity);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_EvolvingItem_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->EvolvingItem = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_EvolvingItem_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->EvolvingItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_EvolvingID_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->EvolvingID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_EvolvingID_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->EvolvingID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_EvolvingLevel_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->EvolvingLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_EvolvingLevel_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->EvolvingLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_EvolvingMax_set(void * jarg1, unsigned char jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->EvolvingMax = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemData_EvolvingMax_get(void * jarg1) {
  unsigned char jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint8 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint8) ((arg1)->EvolvingMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_BackstabDmg_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->BackstabDmg = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_BackstabDmg_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->BackstabDmg);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_DSMitigation_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->DSMitigation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_DSMitigation_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->DSMitigation);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicStr_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicStr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicStr_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicStr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicInt_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicInt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicInt_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicInt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicWis_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicWis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicWis_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicWis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicAgi_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicAgi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicAgi_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicAgi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicDex_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicDex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicDex_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicDex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicSta_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicSta = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicSta_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicSta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicCha_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicCha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicCha_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicCha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicMR_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicMR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicMR_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicMR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicFR_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicFR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicFR_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicFR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicCR_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicCR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicCR_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicCR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicDR_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicDR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicDR_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicDR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicPR_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicPR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicPR_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicPR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HeroicSVCorrup_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HeroicSVCorrup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HeroicSVCorrup_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HeroicSVCorrup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_HealAmt_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->HealAmt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_HealAmt_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->HealAmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_SpellDmg_set(void * jarg1, int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->SpellDmg = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemData_SpellDmg_get(void * jarg1) {
  int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  int32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (int32) ((arg1)->SpellDmg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_LDoNSellBackRate_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->LDoNSellBackRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_LDoNSellBackRate_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->LDoNSellBackRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ScriptFileID_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->ScriptFileID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_ScriptFileID_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->ScriptFileID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ExpendableArrow_set(void * jarg1, unsigned short jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint16 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->ExpendableArrow = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ItemData_ExpendableArrow_get(void * jarg1) {
  unsigned short jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint16 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint16) ((arg1)->ExpendableArrow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_Clairvoyance_set(void * jarg1, unsigned int jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 arg2 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->Clairvoyance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_Clairvoyance_get(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint32 result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (uint32) ((arg1)->Clairvoyance);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ClickName_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ClickName, (const char *)arg2, 65-1);
      arg1->ClickName[65-1] = 0;
    } else {
      arg1->ClickName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_ClickName_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->ClickName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ProcName_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ProcName, (const char *)arg2, 65-1);
      arg1->ProcName[65-1] = 0;
    } else {
      arg1->ProcName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_ProcName_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->ProcName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_WornName_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WornName, (const char *)arg2, 65-1);
      arg1->WornName[65-1] = 0;
    } else {
      arg1->WornName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_WornName_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->WornName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_FocusName_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->FocusName, (const char *)arg2, 65-1);
      arg1->FocusName[65-1] = 0;
    } else {
      arg1->FocusName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_FocusName_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->FocusName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemData_ScrollName_set(void * jarg1, char * jarg2) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ScrollName, (const char *)arg2, 65-1);
      arg1->ScrollName[65-1] = 0;
    } else {
      arg1->ScrollName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemData_ScrollName_get(void * jarg1) {
  char * jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (char *)(char *) ((arg1)->ScrollName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsEquipable(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint16 arg2 ;
  uint16 arg3 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint16)jarg2; 
  arg3 = (uint16)jarg3; 
  result = (bool)((EQ::ItemData const *)arg1)->IsEquipable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsClassEquipable(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)((EQ::ItemData const *)arg1)->IsClassEquipable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsRaceEquipable(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  uint16 arg2 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (bool)((EQ::ItemData const *)arg1)->IsRaceEquipable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsClassCommon(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsClassCommon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsClassBag(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsClassBag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsClassBook(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsClassBook();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsType1HWeapon(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsType1HWeapon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsType2HWeapon(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsType2HWeapon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsTypeShield(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsTypeShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_IsQuestItem(void * jarg1) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  result = (bool)((EQ::ItemData const *)arg1)->IsQuestItem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemData_CheckLoreConflict__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  EQ::ItemData *arg2 = (EQ::ItemData *) 0 ;
  bool result;
  
  arg1 = (EQ::ItemData *)jarg1; 
  arg2 = (EQ::ItemData *)jarg2; 
  result = (bool)EQ::ItemData::CheckLoreConflict((EQ::ItemData const *)arg1,(EQ::ItemData const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemData() {
  void * jresult ;
  EQ::ItemData *result = 0 ;
  
  result = (EQ::ItemData *)new EQ::ItemData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemData(void * jarg1) {
  EQ::ItemData *arg1 = (EQ::ItemData *) 0 ;
  
  arg1 = (EQ::ItemData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogCategoryName_set(void * jarg1) {
  char **arg1 = (char **) (char **)0 ;
  
  arg1 = (char **)jarg1; 
  {
    size_t ii;
    char const * *b = (char const * *) Logs::LogCategoryName;
    for (ii = 0; ii < (size_t)LogCategory::MaxCategoryID; ii++) b[ii] = *((char const * *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogCategoryName_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)Logs::LogCategoryName;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_MAX_DISCORD_WEBHOOK_ID_get() {
  unsigned short jresult ;
  uint16 result;
  
  result = (uint16)MAX_DISCORD_WEBHOOK_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQEmuLogSys() {
  void * jresult ;
  EQEmuLogSys *result = 0 ;
  
  result = (EQEmuLogSys *)new EQEmuLogSys();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQEmuLogSys(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_CloseFileLogs(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  (arg1)->CloseFileLogs();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_LoadLogSettingsDefaults(void * jarg1) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (EQEmuLogSys *)(arg1)->LoadLogSettingsDefaults();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_LoadLogDatabaseSettings(void * jarg1) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (EQEmuLogSys *)(arg1)->LoadLogDatabaseSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_MakeDirectory(void * jarg1, const char * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->MakeDirectory((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_Out(void * jarg1, int jarg2, unsigned short jarg3, char * jarg4, char * jarg5, int jarg6, char * jarg7) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  Logs::DebugLevel arg2 ;
  uint16 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  void *arg8 = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (Logs::DebugLevel)jarg2; 
  arg3 = (uint16)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->Out(arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_SetCurrentTimeStamp(void * jarg1, char * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetCurrentTimeStamp(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_StartFileLogs__SWIG_0(void * jarg1, const char * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->StartFileLogs((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_StartFileLogs__SWIG_1(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  (arg1)->StartFileLogs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_file_set(void * jarg1, unsigned char jarg2) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->log_to_file = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_file_get(void * jarg1) {
  unsigned char jresult ;
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 result;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  result = (uint8) ((arg1)->log_to_file);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_console_set(void * jarg1, unsigned char jarg2) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->log_to_console = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_console_get(void * jarg1) {
  unsigned char jresult ;
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 result;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  result = (uint8) ((arg1)->log_to_console);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_gmsay_set(void * jarg1, unsigned char jarg2) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->log_to_gmsay = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_gmsay_get(void * jarg1) {
  unsigned char jresult ;
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 result;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  result = (uint8) ((arg1)->log_to_gmsay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_discord_set(void * jarg1, unsigned char jarg2) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->log_to_discord = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_log_to_discord_get(void * jarg1) {
  unsigned char jresult ;
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 result;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  result = (uint8) ((arg1)->log_to_discord);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_discord_webhook_id_set(void * jarg1, int jarg2) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  int arg2 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->discord_webhook_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_discord_webhook_id_get(void * jarg1) {
  int jresult ;
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  int result;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  result = (int) ((arg1)->discord_webhook_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_is_category_enabled_set(void * jarg1, unsigned char jarg2) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 arg2 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->is_category_enabled = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQEmuLogSys_LogSettings_is_category_enabled_get(void * jarg1) {
  unsigned char jresult ;
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  uint8 result;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  result = (uint8) ((arg1)->is_category_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQEmuLogSys_LogSettings() {
  void * jresult ;
  EQEmuLogSys::LogSettings *result = 0 ;
  
  result = (EQEmuLogSys::LogSettings *)new EQEmuLogSys::LogSettings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQEmuLogSys_LogSettings(void * jarg1) {
  EQEmuLogSys::LogSettings *arg1 = (EQEmuLogSys::LogSettings *) 0 ;
  
  arg1 = (EQEmuLogSys::LogSettings *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_OriginationInfo_zone_short_name_set(void * jarg1, const char * jarg2) {
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->zone_short_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EQEmuLogSys_OriginationInfo_zone_short_name_get(void * jarg1) {
  const char * jresult ;
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  result = (std::string *) & ((arg1)->zone_short_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_OriginationInfo_zone_long_name_set(void * jarg1, const char * jarg2) {
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->zone_long_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EQEmuLogSys_OriginationInfo_zone_long_name_get(void * jarg1) {
  const char * jresult ;
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  result = (std::string *) & ((arg1)->zone_long_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_OriginationInfo_instance_id_set(void * jarg1, int jarg2) {
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  int arg2 ;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->instance_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQEmuLogSys_OriginationInfo_instance_id_get(void * jarg1) {
  int jresult ;
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  int result;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  result = (int) ((arg1)->instance_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQEmuLogSys_OriginationInfo() {
  void * jresult ;
  EQEmuLogSys::OriginationInfo *result = 0 ;
  
  result = (EQEmuLogSys::OriginationInfo *)new EQEmuLogSys::OriginationInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQEmuLogSys_OriginationInfo(void * jarg1) {
  EQEmuLogSys::OriginationInfo *arg1 = (EQEmuLogSys::OriginationInfo *) 0 ;
  
  arg1 = (EQEmuLogSys::OriginationInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_origination_info_set(void * jarg1, void * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::OriginationInfo *arg2 = (EQEmuLogSys::OriginationInfo *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (EQEmuLogSys::OriginationInfo *)jarg2; 
  if (arg1) (arg1)->origination_info = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_origination_info_get(void * jarg1) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::OriginationInfo *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (EQEmuLogSys::OriginationInfo *)& ((arg1)->origination_info);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_log_settings_set(void * jarg1, void * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::LogSettings *arg2 = (EQEmuLogSys::LogSettings *) (EQEmuLogSys::LogSettings *)0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (EQEmuLogSys::LogSettings *)jarg2; 
  {
    size_t ii;
    EQEmuLogSys::LogSettings *b = (EQEmuLogSys::LogSettings *) arg1->log_settings;
    for (ii = 0; ii < (size_t)Logs::LogCategory::MaxCategoryID; ii++) b[ii] = *((EQEmuLogSys::LogSettings *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_log_settings_get(void * jarg1) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::LogSettings *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (EQEmuLogSys::LogSettings *)(EQEmuLogSys::LogSettings *) ((arg1)->log_settings);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_pre_silence_settings_set(void * jarg1, void * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::LogSettings *arg2 = (EQEmuLogSys::LogSettings *) (EQEmuLogSys::LogSettings *)0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (EQEmuLogSys::LogSettings *)jarg2; 
  {
    size_t ii;
    EQEmuLogSys::LogSettings *b = (EQEmuLogSys::LogSettings *) arg1->pre_silence_settings;
    for (ii = 0; ii < (size_t)Logs::LogCategory::MaxCategoryID; ii++) b[ii] = *((EQEmuLogSys::LogSettings *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_pre_silence_settings_get(void * jarg1) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::LogSettings *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (EQEmuLogSys::LogSettings *)(EQEmuLogSys::LogSettings *) ((arg1)->pre_silence_settings);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_file_enabled_set(void * jarg1, unsigned int jarg2) {
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool arg2 ;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->log_to_file_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_file_enabled_get(void * jarg1) {
  unsigned int jresult ;
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool result;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  result = (bool) ((arg1)->log_to_file_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_console_enabled_set(void * jarg1, unsigned int jarg2) {
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool arg2 ;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->log_to_console_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_console_enabled_get(void * jarg1) {
  unsigned int jresult ;
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool result;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  result = (bool) ((arg1)->log_to_console_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_gmsay_enabled_set(void * jarg1, unsigned int jarg2) {
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool arg2 ;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->log_to_gmsay_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_gmsay_enabled_get(void * jarg1) {
  unsigned int jresult ;
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool result;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  result = (bool) ((arg1)->log_to_gmsay_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_discord_enabled_set(void * jarg1, unsigned int jarg2) {
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool arg2 ;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->log_to_discord_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_to_discord_enabled_get(void * jarg1) {
  unsigned int jresult ;
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool result;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  result = (bool) ((arg1)->log_to_discord_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_enabled_set(void * jarg1, unsigned int jarg2) {
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool arg2 ;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->log_enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQEmuLogSys_LogEnabled_log_enabled_get(void * jarg1) {
  unsigned int jresult ;
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  bool result;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  result = (bool) ((arg1)->log_enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQEmuLogSys_LogEnabled() {
  void * jresult ;
  EQEmuLogSys::LogEnabled *result = 0 ;
  
  result = (EQEmuLogSys::LogEnabled *)new EQEmuLogSys::LogEnabled();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQEmuLogSys_LogEnabled(void * jarg1) {
  EQEmuLogSys::LogEnabled *arg1 = (EQEmuLogSys::LogEnabled *) 0 ;
  
  arg1 = (EQEmuLogSys::LogEnabled *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_GetLogsEnabled(void * jarg1, int jarg2, unsigned short jarg3) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  Logs::DebugLevel *arg2 = 0 ;
  uint16 *arg3 = 0 ;
  Logs::DebugLevel temp2 ;
  uint16 temp3 ;
  EQEmuLogSys::LogEnabled result;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  temp2 = (Logs::DebugLevel)jarg2; 
  arg2 = &temp2; 
  temp3 = (uint16)jarg3; 
  arg3 = &temp3; 
  result = (arg1)->GetLogsEnabled((Logs::DebugLevel const &)*arg2,(uint16 const &)*arg3);
  jresult = new EQEmuLogSys::LogEnabled(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQEmuLogSys_IsLogEnabled(void * jarg1, int jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  Logs::DebugLevel *arg2 = 0 ;
  uint16 *arg3 = 0 ;
  Logs::DebugLevel temp2 ;
  uint16 temp3 ;
  bool result;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  temp2 = (Logs::DebugLevel)jarg2; 
  arg2 = &temp2; 
  temp3 = (uint16)jarg3; 
  arg3 = &temp3; 
  result = (bool)(arg1)->IsLogEnabled((Logs::DebugLevel const &)*arg2,(uint16 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_DiscordWebhooks_id_set(void * jarg1, int jarg2) {
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  int arg2 ;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQEmuLogSys_DiscordWebhooks_id_get(void * jarg1) {
  int jresult ;
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  int result;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  result = (int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_DiscordWebhooks_webhook_name_set(void * jarg1, const char * jarg2) {
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->webhook_name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EQEmuLogSys_DiscordWebhooks_webhook_name_get(void * jarg1) {
  const char * jresult ;
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  result = (std::string *) & ((arg1)->webhook_name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_DiscordWebhooks_webhook_url_set(void * jarg1, const char * jarg2) {
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->webhook_url = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EQEmuLogSys_DiscordWebhooks_webhook_url_get(void * jarg1) {
  const char * jresult ;
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  result = (std::string *) & ((arg1)->webhook_url);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQEmuLogSys_DiscordWebhooks() {
  void * jresult ;
  EQEmuLogSys::DiscordWebhooks *result = 0 ;
  
  result = (EQEmuLogSys::DiscordWebhooks *)new EQEmuLogSys::DiscordWebhooks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQEmuLogSys_DiscordWebhooks(void * jarg1) {
  EQEmuLogSys::DiscordWebhooks *arg1 = (EQEmuLogSys::DiscordWebhooks *) 0 ;
  
  arg1 = (EQEmuLogSys::DiscordWebhooks *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_GetDiscordWebhooks(void * jarg1) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  EQEmuLogSys::DiscordWebhooks *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (EQEmuLogSys::DiscordWebhooks *)((EQEmuLogSys const *)arg1)->GetDiscordWebhooks();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQEmuLogSys_GetGMSayColorFromCategory(void * jarg1, unsigned short jarg2) {
  unsigned short jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  uint16 arg2 ;
  uint16 result;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (uint16)jarg2; 
  result = (uint16)(arg1)->GetGMSayColorFromCategory(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_SetGMSayHandler(void * jarg1, void * jarg2) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  std::function< void (uint16,char const *,std::string const &) > *arg2 = 0 ;
  EQEmuLogSys *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (std::function< void (uint16,char const *,std::string const &) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< void (uint16,char const *,std::string const &) > const & is null", 0);
    return 0;
  } 
  result = (EQEmuLogSys *)(arg1)->SetGMSayHandler((std::function< void (uint16,char const *,std::string const &) > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_SetDiscordHandler(void * jarg1, void * jarg2) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  SwigValueWrapper< std::function< void (unsigned short,int,std::string const &) > > arg2 ;
  std::function< void (uint16,int,std::string const &) > *argp2 ;
  EQEmuLogSys *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  argp2 = (std::function< void (uint16,int,std::string const &) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (uint16,int,std::string const &) >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (EQEmuLogSys *)(arg1)->SetDiscordHandler(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_SetConsoleHandler(void * jarg1, void * jarg2) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  SwigValueWrapper< std::function< void (unsigned short,std::string const &) > > arg2 ;
  std::function< void (uint16,std::string const &) > *argp2 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  argp2 = (std::function< void (uint16,std::string const &) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (uint16,std::string const &) >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetConsoleHandler(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_SilenceConsoleLogging(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  (arg1)->SilenceConsoleLogging();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_EnableConsoleLogging(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  (arg1)->EnableConsoleLogging();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_SetDatabase(void * jarg1, void * jarg2) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  Database *arg2 = (Database *) 0 ;
  EQEmuLogSys *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  arg2 = (Database *)jarg2; 
  result = (EQEmuLogSys *)(arg1)->SetDatabase(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_EQEmuLogSys_GetLogPath(void * jarg1) {
  const char * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  result = (std::string *) &((EQEmuLogSys const *)arg1)->GetLogPath();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQEmuLogSys_SetLogPath(void * jarg1, const char * jarg2) {
  void * jresult ;
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  std::string *arg2 = 0 ;
  EQEmuLogSys *result = 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (EQEmuLogSys *)(arg1)->SetLogPath((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_DisableMySQLErrorLogs(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  (arg1)->DisableMySQLErrorLogs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQEmuLogSys_EnableMySQLErrorLogs(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  (arg1)->EnableMySQLErrorLogs();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogSys_set(void * jarg1) {
  EQEmuLogSys *arg1 = (EQEmuLogSys *) 0 ;
  
  arg1 = (EQEmuLogSys *)jarg1; 
  LogSys = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogSys_get() {
  void * jresult ;
  EQEmuLogSys *result = 0 ;
  
  result = (EQEmuLogSys *)&LogSys;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkedListNewSpawn() {
  void * jresult ;
  LinkedList< NewSpawn_Struct * > *result = 0 ;
  
  result = (LinkedList< NewSpawn_Struct * > *)new LinkedList< NewSpawn_Struct * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinkedListNewSpawn(void * jarg1) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListNewSpawn_dont_delete_set(void * jarg1, unsigned int jarg2) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  bool arg2 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dont_delete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LinkedListNewSpawn_dont_delete_get(void * jarg1) {
  unsigned int jresult ;
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  bool result;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  result = (bool) ((arg1)->dont_delete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListNewSpawn_Append(void * jarg1, void * jarg2) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct **arg2 = 0 ;
  NewSpawn_Struct *temp2 = 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  temp2 = (NewSpawn_Struct *)jarg2;
  arg2 = (NewSpawn_Struct **)&temp2; 
  (arg1)->Append((NewSpawn_Struct *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListNewSpawn_Insert(void * jarg1, void * jarg2) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct **arg2 = 0 ;
  NewSpawn_Struct *temp2 = 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  temp2 = (NewSpawn_Struct *)jarg2;
  arg2 = (NewSpawn_Struct **)&temp2; 
  (arg1)->Insert((NewSpawn_Struct *const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListNewSpawn_Pop(void * jarg1) {
  void * jresult ;
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct *result = 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  result = (NewSpawn_Struct *)(arg1)->Pop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListNewSpawn_PeekTop(void * jarg1) {
  void * jresult ;
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct *result = 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  result = (NewSpawn_Struct *)(arg1)->PeekTop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListNewSpawn_Clear(void * jarg1) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListNewSpawn_LCount(void * jarg1) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  (arg1)->LCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListNewSpawn_ResetCount(void * jarg1) {
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  (arg1)->ResetCount();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LinkedListNewSpawn_Count(void * jarg1) {
  unsigned int jresult ;
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  uint32 result;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  result = (uint32)(arg1)->Count();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListNewSpawn_GetFirst(void * jarg1) {
  void * jresult ;
  LinkedList< NewSpawn_Struct * > *arg1 = (LinkedList< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *result = 0 ;
  
  arg1 = (LinkedList< NewSpawn_Struct * > *)jarg1; 
  result = (ListElement< NewSpawn_Struct * > *)(arg1)->GetFirst();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkedListSpawn2() {
  void * jresult ;
  LinkedList< Spawn2 * > *result = 0 ;
  
  result = (LinkedList< Spawn2 * > *)new LinkedList< Spawn2 * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinkedListSpawn2(void * jarg1) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListSpawn2_dont_delete_set(void * jarg1, unsigned int jarg2) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  bool arg2 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dont_delete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LinkedListSpawn2_dont_delete_get(void * jarg1) {
  unsigned int jresult ;
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  bool result;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  result = (bool) ((arg1)->dont_delete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListSpawn2_Append(void * jarg1, void * jarg2) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  Spawn2 **arg2 = 0 ;
  Spawn2 *temp2 = 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  temp2 = (Spawn2 *)jarg2;
  arg2 = (Spawn2 **)&temp2; 
  (arg1)->Append((Spawn2 *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListSpawn2_Insert(void * jarg1, void * jarg2) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  Spawn2 **arg2 = 0 ;
  Spawn2 *temp2 = 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  temp2 = (Spawn2 *)jarg2;
  arg2 = (Spawn2 **)&temp2; 
  (arg1)->Insert((Spawn2 *const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListSpawn2_Pop(void * jarg1) {
  void * jresult ;
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  Spawn2 *result = 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  result = (Spawn2 *)(arg1)->Pop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListSpawn2_PeekTop(void * jarg1) {
  void * jresult ;
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  Spawn2 *result = 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  result = (Spawn2 *)(arg1)->PeekTop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListSpawn2_Clear(void * jarg1) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListSpawn2_LCount(void * jarg1) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  (arg1)->LCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListSpawn2_ResetCount(void * jarg1) {
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  (arg1)->ResetCount();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LinkedListSpawn2_Count(void * jarg1) {
  unsigned int jresult ;
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  uint32 result;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  result = (uint32)(arg1)->Count();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListSpawn2_GetFirst(void * jarg1) {
  void * jresult ;
  LinkedList< Spawn2 * > *arg1 = (LinkedList< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *result = 0 ;
  
  arg1 = (LinkedList< Spawn2 * > *)jarg1; 
  result = (ListElement< Spawn2 * > *)(arg1)->GetFirst();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkedListZonePoint() {
  void * jresult ;
  LinkedList< ZonePoint * > *result = 0 ;
  
  result = (LinkedList< ZonePoint * > *)new LinkedList< ZonePoint * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinkedListZonePoint(void * jarg1) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListZonePoint_dont_delete_set(void * jarg1, unsigned int jarg2) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  bool arg2 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dont_delete = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LinkedListZonePoint_dont_delete_get(void * jarg1) {
  unsigned int jresult ;
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  bool result;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  result = (bool) ((arg1)->dont_delete);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListZonePoint_Append(void * jarg1, void * jarg2) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  ZonePoint **arg2 = 0 ;
  ZonePoint *temp2 = 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  temp2 = (ZonePoint *)jarg2;
  arg2 = (ZonePoint **)&temp2; 
  (arg1)->Append((ZonePoint *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListZonePoint_Insert(void * jarg1, void * jarg2) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  ZonePoint **arg2 = 0 ;
  ZonePoint *temp2 = 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  temp2 = (ZonePoint *)jarg2;
  arg2 = (ZonePoint **)&temp2; 
  (arg1)->Insert((ZonePoint *const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListZonePoint_Pop(void * jarg1) {
  void * jresult ;
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  ZonePoint *result = 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  result = (ZonePoint *)(arg1)->Pop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListZonePoint_PeekTop(void * jarg1) {
  void * jresult ;
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  ZonePoint *result = 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  result = (ZonePoint *)(arg1)->PeekTop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListZonePoint_Clear(void * jarg1) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListZonePoint_LCount(void * jarg1) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  (arg1)->LCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListZonePoint_ResetCount(void * jarg1) {
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  (arg1)->ResetCount();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LinkedListZonePoint_Count(void * jarg1) {
  unsigned int jresult ;
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  uint32 result;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  result = (uint32)(arg1)->Count();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListZonePoint_GetFirst(void * jarg1) {
  void * jresult ;
  LinkedList< ZonePoint * > *arg1 = (LinkedList< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *result = 0 ;
  
  arg1 = (LinkedList< ZonePoint * > *)jarg1; 
  result = (ListElement< ZonePoint * > *)(arg1)->GetFirst();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkedListElementNewSpawn(void * jarg1) {
  void * jresult ;
  NewSpawn_Struct **arg1 = 0 ;
  NewSpawn_Struct *temp1 = 0 ;
  ListElement< NewSpawn_Struct * > *result = 0 ;
  
  temp1 = (NewSpawn_Struct *)jarg1;
  arg1 = (NewSpawn_Struct **)&temp1; 
  result = (ListElement< NewSpawn_Struct * > *)new ListElement< NewSpawn_Struct * >((NewSpawn_Struct *const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinkedListElementNewSpawn(void * jarg1) {
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementNewSpawn_GetLast(void * jarg1) {
  void * jresult ;
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *result = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  result = (ListElement< NewSpawn_Struct * > *)(arg1)->GetLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementNewSpawn_GetNext(void * jarg1) {
  void * jresult ;
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *result = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  result = (ListElement< NewSpawn_Struct * > *)((ListElement< NewSpawn_Struct * > const *)arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementNewSpawn_GetPrev(void * jarg1) {
  void * jresult ;
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *result = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  result = (ListElement< NewSpawn_Struct * > *)((ListElement< NewSpawn_Struct * > const *)arg1)->GetPrev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementNewSpawn_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct **result = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  result = (NewSpawn_Struct **) &(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementNewSpawn_SetData(void * jarg1, void * jarg2) {
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct **arg2 = 0 ;
  NewSpawn_Struct *temp2 = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  temp2 = (NewSpawn_Struct *)jarg2;
  arg2 = (NewSpawn_Struct **)&temp2; 
  (arg1)->SetData((NewSpawn_Struct *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementNewSpawn_SetLastNext(void * jarg1, void * jarg2) {
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *arg2 = (ListElement< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  arg2 = (ListElement< NewSpawn_Struct * > *)jarg2; 
  (arg1)->SetLastNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementNewSpawn_SetNext(void * jarg1, void * jarg2) {
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *arg2 = (ListElement< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  arg2 = (ListElement< NewSpawn_Struct * > *)jarg2; 
  (arg1)->SetNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementNewSpawn_SetPrev(void * jarg1, void * jarg2) {
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  ListElement< NewSpawn_Struct * > *arg2 = (ListElement< NewSpawn_Struct * > *) 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  arg2 = (ListElement< NewSpawn_Struct * > *)jarg2; 
  (arg1)->SetPrev(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementNewSpawn_ReplaceData(void * jarg1, void * jarg2) {
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct **arg2 = 0 ;
  NewSpawn_Struct *temp2 = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  temp2 = (NewSpawn_Struct *)jarg2;
  arg2 = (NewSpawn_Struct **)&temp2; 
  (arg1)->ReplaceData((NewSpawn_Struct *const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementNewSpawn_GetObject(void * jarg1) {
  void * jresult ;
  ListElement< NewSpawn_Struct * > *arg1 = (ListElement< NewSpawn_Struct * > *) 0 ;
  NewSpawn_Struct *result = 0 ;
  
  arg1 = (ListElement< NewSpawn_Struct * > *)jarg1; 
  result = (NewSpawn_Struct *)ListElement_Sl_NewSpawn_Struct_Sm__Sg__GetObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkedListElementSpawn2(void * jarg1) {
  void * jresult ;
  Spawn2 **arg1 = 0 ;
  Spawn2 *temp1 = 0 ;
  ListElement< Spawn2 * > *result = 0 ;
  
  temp1 = (Spawn2 *)jarg1;
  arg1 = (Spawn2 **)&temp1; 
  result = (ListElement< Spawn2 * > *)new ListElement< Spawn2 * >((Spawn2 *const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinkedListElementSpawn2(void * jarg1) {
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementSpawn2_GetLast(void * jarg1) {
  void * jresult ;
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *result = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  result = (ListElement< Spawn2 * > *)(arg1)->GetLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementSpawn2_GetNext(void * jarg1) {
  void * jresult ;
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *result = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  result = (ListElement< Spawn2 * > *)((ListElement< Spawn2 * > const *)arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementSpawn2_GetPrev(void * jarg1) {
  void * jresult ;
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *result = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  result = (ListElement< Spawn2 * > *)((ListElement< Spawn2 * > const *)arg1)->GetPrev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementSpawn2_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  Spawn2 **result = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  result = (Spawn2 **) &(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementSpawn2_SetData(void * jarg1, void * jarg2) {
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  Spawn2 **arg2 = 0 ;
  Spawn2 *temp2 = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  temp2 = (Spawn2 *)jarg2;
  arg2 = (Spawn2 **)&temp2; 
  (arg1)->SetData((Spawn2 *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementSpawn2_SetLastNext(void * jarg1, void * jarg2) {
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *arg2 = (ListElement< Spawn2 * > *) 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  arg2 = (ListElement< Spawn2 * > *)jarg2; 
  (arg1)->SetLastNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementSpawn2_SetNext(void * jarg1, void * jarg2) {
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *arg2 = (ListElement< Spawn2 * > *) 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  arg2 = (ListElement< Spawn2 * > *)jarg2; 
  (arg1)->SetNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementSpawn2_SetPrev(void * jarg1, void * jarg2) {
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  ListElement< Spawn2 * > *arg2 = (ListElement< Spawn2 * > *) 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  arg2 = (ListElement< Spawn2 * > *)jarg2; 
  (arg1)->SetPrev(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementSpawn2_ReplaceData(void * jarg1, void * jarg2) {
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  Spawn2 **arg2 = 0 ;
  Spawn2 *temp2 = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  temp2 = (Spawn2 *)jarg2;
  arg2 = (Spawn2 **)&temp2; 
  (arg1)->ReplaceData((Spawn2 *const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementSpawn2_GetObject(void * jarg1) {
  void * jresult ;
  ListElement< Spawn2 * > *arg1 = (ListElement< Spawn2 * > *) 0 ;
  Spawn2 *result = 0 ;
  
  arg1 = (ListElement< Spawn2 * > *)jarg1; 
  result = (Spawn2 *)ListElement_Sl_Spawn2_Sm__Sg__GetObject(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LinkedListElementZonePoint(void * jarg1) {
  void * jresult ;
  ZonePoint **arg1 = 0 ;
  ZonePoint *temp1 = 0 ;
  ListElement< ZonePoint * > *result = 0 ;
  
  temp1 = (ZonePoint *)jarg1;
  arg1 = (ZonePoint **)&temp1; 
  result = (ListElement< ZonePoint * > *)new ListElement< ZonePoint * >((ZonePoint *const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LinkedListElementZonePoint(void * jarg1) {
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementZonePoint_GetLast(void * jarg1) {
  void * jresult ;
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *result = 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  result = (ListElement< ZonePoint * > *)(arg1)->GetLast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementZonePoint_GetNext(void * jarg1) {
  void * jresult ;
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *result = 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  result = (ListElement< ZonePoint * > *)((ListElement< ZonePoint * > const *)arg1)->GetNext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementZonePoint_GetPrev(void * jarg1) {
  void * jresult ;
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *result = 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  result = (ListElement< ZonePoint * > *)((ListElement< ZonePoint * > const *)arg1)->GetPrev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LinkedListElementZonePoint_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ZonePoint **result = 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  result = (ZonePoint **) &(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementZonePoint_SetData(void * jarg1, void * jarg2) {
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ZonePoint **arg2 = 0 ;
  ZonePoint *temp2 = 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  temp2 = (ZonePoint *)jarg2;
  arg2 = (ZonePoint **)&temp2; 
  (arg1)->SetData((ZonePoint *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementZonePoint_SetLastNext(void * jarg1, void * jarg2) {
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *arg2 = (ListElement< ZonePoint * > *) 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  arg2 = (ListElement< ZonePoint * > *)jarg2; 
  (arg1)->SetLastNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementZonePoint_SetNext(void * jarg1, void * jarg2) {
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *arg2 = (ListElement< ZonePoint * > *) 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  arg2 = (ListElement< ZonePoint * > *)jarg2; 
  (arg1)->SetNext(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementZonePoint_SetPrev(void * jarg1, void * jarg2) {
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ListElement< ZonePoint * > *arg2 = (ListElement< ZonePoint * > *) 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  arg2 = (ListElement< ZonePoint * > *)jarg2; 
  (arg1)->SetPrev(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LinkedListElementZonePoint_ReplaceData(void * jarg1, void * jarg2) {
  ListElement< ZonePoint * > *arg1 = (ListElement< ZonePoint * > *) 0 ;
  ZonePoint **arg2 = 0 ;
  ZonePoint *temp2 = 0 ;
  
  arg1 = (ListElement< ZonePoint * > *)jarg1; 
  temp2 = (ZonePoint *)jarg2;
  arg2 = (ZonePoint **)&temp2; 
  (arg1)->ReplaceData((ZonePoint *const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtraDataVector__SWIG_0() {
  void * jresult ;
  std::vector< std::any > *result = 0 ;
  
  result = (std::vector< std::any > *)new std::vector< std::any >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtraDataVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::any > *arg1 = 0 ;
  std::vector< std::any > *result = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::any > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::any > *)new std::vector< std::any >((std::vector< std::any > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_Clear(void * jarg1) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_Add(void * jarg1, void * jarg2) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  std::any *arg2 = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (std::any *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::any const & is null", 0);
    return ;
  } 
  (arg1)->push_back((std::any const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExtraDataVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  std::vector< std::any >::size_type result;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  result = ((std::vector< std::any > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExtraDataVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  result = (bool)((std::vector< std::any > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExtraDataVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  std::vector< std::any >::size_type result;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  result = ((std::vector< std::any > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  std::vector< std::any >::size_type arg2 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (std::vector< std::any >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExtraDataVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::any > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::any > *)new_std_vector_Sl_std_any_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtraDataVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  std::any result;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_any_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::any(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtraDataVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  std::vector< std::any >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::any >::value_type *) &std_vector_Sl_std_any_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  std::any *arg3 = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::any *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::any const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_any_Sg__setitem(arg1,arg2,(std::any const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  std::vector< std::any > *arg2 = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (std::vector< std::any > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::any > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_any_Sg__AddRange(arg1,(std::vector< std::any > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtraDataVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::any > *result = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::any > *)std_vector_Sl_std_any_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  std::any *arg3 = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::any *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::any const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_any_Sg__Insert(arg1,arg2,(std::any const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  std::vector< std::any > *arg3 = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::any > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::any > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_any_Sg__InsertRange(arg1,arg2,(std::vector< std::any > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_any_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_any_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExtraDataVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::any *arg1 = 0 ;
  int arg2 ;
  std::vector< std::any > *result = 0 ;
  
  arg1 = (std::any *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::any const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::any > *)std_vector_Sl_std_any_Sg__Repeat((std::any const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  std_vector_Sl_std_any_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_any_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExtraDataVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  int arg2 ;
  std::vector< std::any > *arg3 = 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::any > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::any > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_any_Sg__SetRange(arg1,arg2,(std::vector< std::any > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExtraDataVector(void * jarg1) {
  std::vector< std::any > *arg1 = (std::vector< std::any > *) 0 ;
  
  arg1 = (std::vector< std::any > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Add(void * jarg1, const char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StringVector_getitemcopy(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_StringVector_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Insert(void * jarg1, int jarg2, const char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringVector_Repeat(const char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Contains(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_IndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringVector_LastIndexOf(void * jarg1, const char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringVector_Remove(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringVector(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemVector__SWIG_0() {
  void * jresult ;
  std::vector< EQ::ItemInstance * > *result = 0 ;
  
  result = (std::vector< EQ::ItemInstance * > *)new std::vector< EQ::ItemInstance * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = 0 ;
  std::vector< EQ::ItemInstance * > *result = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQ::ItemInstance * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< EQ::ItemInstance * > *)new std::vector< EQ::ItemInstance * >((std::vector< EQ::ItemInstance * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_Clear(void * jarg1) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_Add(void * jarg1, void * jarg2) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  EQ::ItemInstance **arg2 = 0 ;
  EQ::ItemInstance *temp2 = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  temp2 = (EQ::ItemInstance *)jarg2;
  arg2 = (EQ::ItemInstance **)&temp2; 
  (arg1)->push_back((EQ::ItemInstance *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  std::vector< EQ::ItemInstance * >::size_type result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  result = ((std::vector< EQ::ItemInstance * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  result = (bool)((std::vector< EQ::ItemInstance * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  std::vector< EQ::ItemInstance * >::size_type result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  result = ((std::vector< EQ::ItemInstance * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  std::vector< EQ::ItemInstance * >::size_type arg2 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (std::vector< EQ::ItemInstance * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< EQ::ItemInstance * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< EQ::ItemInstance * > *)new_std_vector_Sl_EQ_ItemInstance_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  EQ::ItemInstance *result = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (EQ::ItemInstance *)std_vector_Sl_EQ_ItemInstance_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  std::vector< EQ::ItemInstance * >::value_type *result = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< EQ::ItemInstance * >::value_type *) &std_vector_Sl_EQ_ItemInstance_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  EQ::ItemInstance **arg3 = 0 ;
  EQ::ItemInstance *temp3 = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (EQ::ItemInstance *)jarg3;
  arg3 = (EQ::ItemInstance **)&temp3; 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__setitem(arg1,arg2,(EQ::ItemInstance *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  std::vector< EQ::ItemInstance * > *arg2 = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (std::vector< EQ::ItemInstance * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQ::ItemInstance * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_EQ_ItemInstance_Sm__Sg__AddRange(arg1,(std::vector< EQ::ItemInstance * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< EQ::ItemInstance * > *result = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< EQ::ItemInstance * > *)std_vector_Sl_EQ_ItemInstance_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  EQ::ItemInstance **arg3 = 0 ;
  EQ::ItemInstance *temp3 = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (EQ::ItemInstance *)jarg3;
  arg3 = (EQ::ItemInstance **)&temp3; 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__Insert(arg1,arg2,(EQ::ItemInstance *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  std::vector< EQ::ItemInstance * > *arg3 = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< EQ::ItemInstance * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQ::ItemInstance * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__InsertRange(arg1,arg2,(std::vector< EQ::ItemInstance * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  EQ::ItemInstance **arg1 = 0 ;
  int arg2 ;
  EQ::ItemInstance *temp1 = 0 ;
  std::vector< EQ::ItemInstance * > *result = 0 ;
  
  temp1 = (EQ::ItemInstance *)jarg1;
  arg1 = (EQ::ItemInstance **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< EQ::ItemInstance * > *)std_vector_Sl_EQ_ItemInstance_Sm__Sg__Repeat((EQ::ItemInstance *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  std_vector_Sl_EQ_ItemInstance_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  int arg2 ;
  std::vector< EQ::ItemInstance * > *arg3 = 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< EQ::ItemInstance * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQ::ItemInstance * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_EQ_ItemInstance_Sm__Sg__SetRange(arg1,arg2,(std::vector< EQ::ItemInstance * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  EQ::ItemInstance **arg2 = 0 ;
  EQ::ItemInstance *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  temp2 = (EQ::ItemInstance *)jarg2;
  arg2 = (EQ::ItemInstance **)&temp2; 
  result = (bool)std_vector_Sl_EQ_ItemInstance_Sm__Sg__Contains(arg1,(EQ::ItemInstance *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  EQ::ItemInstance **arg2 = 0 ;
  EQ::ItemInstance *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  temp2 = (EQ::ItemInstance *)jarg2;
  arg2 = (EQ::ItemInstance **)&temp2; 
  result = (int)std_vector_Sl_EQ_ItemInstance_Sm__Sg__IndexOf(arg1,(EQ::ItemInstance *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  EQ::ItemInstance **arg2 = 0 ;
  EQ::ItemInstance *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  temp2 = (EQ::ItemInstance *)jarg2;
  arg2 = (EQ::ItemInstance **)&temp2; 
  result = (int)std_vector_Sl_EQ_ItemInstance_Sm__Sg__LastIndexOf(arg1,(EQ::ItemInstance *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  EQ::ItemInstance **arg2 = 0 ;
  EQ::ItemInstance *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  temp2 = (EQ::ItemInstance *)jarg2;
  arg2 = (EQ::ItemInstance **)&temp2; 
  result = (bool)std_vector_Sl_EQ_ItemInstance_Sm__Sg__Remove(arg1,(EQ::ItemInstance *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemVector(void * jarg1) {
  std::vector< EQ::ItemInstance * > *arg1 = (std::vector< EQ::ItemInstance * > *) 0 ;
  
  arg1 = (std::vector< EQ::ItemInstance * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MobVector__SWIG_0() {
  void * jresult ;
  std::vector< Mob * > *result = 0 ;
  
  result = (std::vector< Mob * > *)new std::vector< Mob * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MobVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Mob * > *arg1 = 0 ;
  std::vector< Mob * > *result = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Mob * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Mob * > *)new std::vector< Mob * >((std::vector< Mob * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_Clear(void * jarg1) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_Add(void * jarg1, void * jarg2) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  Mob **arg2 = 0 ;
  Mob *temp2 = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  temp2 = (Mob *)jarg2;
  arg2 = (Mob **)&temp2; 
  (arg1)->push_back((Mob *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MobVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  std::vector< Mob * >::size_type result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  result = ((std::vector< Mob * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MobVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  result = (bool)((std::vector< Mob * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MobVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  std::vector< Mob * >::size_type result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  result = ((std::vector< Mob * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  std::vector< Mob * >::size_type arg2 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (std::vector< Mob * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MobVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Mob * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Mob * > *)new_std_vector_Sl_Mob_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MobVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  Mob *result = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Mob *)std_vector_Sl_Mob_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MobVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  std::vector< Mob * >::value_type *result = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Mob * >::value_type *) &std_vector_Sl_Mob_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  Mob **arg3 = 0 ;
  Mob *temp3 = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Mob *)jarg3;
  arg3 = (Mob **)&temp3; 
  try {
    std_vector_Sl_Mob_Sm__Sg__setitem(arg1,arg2,(Mob *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  std::vector< Mob * > *arg2 = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (std::vector< Mob * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Mob * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Mob_Sm__Sg__AddRange(arg1,(std::vector< Mob * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MobVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Mob * > *result = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Mob * > *)std_vector_Sl_Mob_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  Mob **arg3 = 0 ;
  Mob *temp3 = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Mob *)jarg3;
  arg3 = (Mob **)&temp3; 
  try {
    std_vector_Sl_Mob_Sm__Sg__Insert(arg1,arg2,(Mob *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  std::vector< Mob * > *arg3 = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Mob * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Mob * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Mob_Sm__Sg__InsertRange(arg1,arg2,(std::vector< Mob * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Mob_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Mob_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MobVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Mob **arg1 = 0 ;
  int arg2 ;
  Mob *temp1 = 0 ;
  std::vector< Mob * > *result = 0 ;
  
  temp1 = (Mob *)jarg1;
  arg1 = (Mob **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Mob * > *)std_vector_Sl_Mob_Sm__Sg__Repeat((Mob *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  std_vector_Sl_Mob_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Mob_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MobVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  int arg2 ;
  std::vector< Mob * > *arg3 = 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Mob * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Mob * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Mob_Sm__Sg__SetRange(arg1,arg2,(std::vector< Mob * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MobVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  Mob **arg2 = 0 ;
  Mob *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  temp2 = (Mob *)jarg2;
  arg2 = (Mob **)&temp2; 
  result = (bool)std_vector_Sl_Mob_Sm__Sg__Contains(arg1,(Mob *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MobVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  Mob **arg2 = 0 ;
  Mob *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  temp2 = (Mob *)jarg2;
  arg2 = (Mob **)&temp2; 
  result = (int)std_vector_Sl_Mob_Sm__Sg__IndexOf(arg1,(Mob *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MobVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  Mob **arg2 = 0 ;
  Mob *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  temp2 = (Mob *)jarg2;
  arg2 = (Mob **)&temp2; 
  result = (int)std_vector_Sl_Mob_Sm__Sg__LastIndexOf(arg1,(Mob *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MobVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  Mob **arg2 = 0 ;
  Mob *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  temp2 = (Mob *)jarg2;
  arg2 = (Mob **)&temp2; 
  result = (bool)std_vector_Sl_Mob_Sm__Sg__Remove(arg1,(Mob *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MobVector(void * jarg1) {
  std::vector< Mob * > *arg1 = (std::vector< Mob * > *) 0 ;
  
  arg1 = (std::vector< Mob * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketVector__SWIG_0() {
  void * jresult ;
  std::vector< EQApplicationPacket * > *result = 0 ;
  
  result = (std::vector< EQApplicationPacket * > *)new std::vector< EQApplicationPacket * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< EQApplicationPacket * > *arg1 = 0 ;
  std::vector< EQApplicationPacket * > *result = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQApplicationPacket * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< EQApplicationPacket * > *)new std::vector< EQApplicationPacket * >((std::vector< EQApplicationPacket * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_Clear(void * jarg1) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_Add(void * jarg1, void * jarg2) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  EQApplicationPacket **arg2 = 0 ;
  EQApplicationPacket *temp2 = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  temp2 = (EQApplicationPacket *)jarg2;
  arg2 = (EQApplicationPacket **)&temp2; 
  (arg1)->push_back((EQApplicationPacket *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketVector_size(void * jarg1) {
  unsigned int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  std::vector< EQApplicationPacket * >::size_type result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  result = ((std::vector< EQApplicationPacket * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketVector_empty(void * jarg1) {
  unsigned int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  bool result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  result = (bool)((std::vector< EQApplicationPacket * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketVector_capacity(void * jarg1) {
  unsigned int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  std::vector< EQApplicationPacket * >::size_type result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  result = ((std::vector< EQApplicationPacket * > const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_reserve(void * jarg1, unsigned int jarg2) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  std::vector< EQApplicationPacket * >::size_type arg2 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (std::vector< EQApplicationPacket * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PacketVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< EQApplicationPacket * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< EQApplicationPacket * > *)new_std_vector_Sl_EQApplicationPacket_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  EQApplicationPacket *result = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (EQApplicationPacket *)std_vector_Sl_EQApplicationPacket_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  std::vector< EQApplicationPacket * >::value_type *result = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< EQApplicationPacket * >::value_type *) &std_vector_Sl_EQApplicationPacket_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  EQApplicationPacket **arg3 = 0 ;
  EQApplicationPacket *temp3 = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (EQApplicationPacket *)jarg3;
  arg3 = (EQApplicationPacket **)&temp3; 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__setitem(arg1,arg2,(EQApplicationPacket *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  std::vector< EQApplicationPacket * > *arg2 = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (std::vector< EQApplicationPacket * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQApplicationPacket * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_EQApplicationPacket_Sm__Sg__AddRange(arg1,(std::vector< EQApplicationPacket * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< EQApplicationPacket * > *result = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< EQApplicationPacket * > *)std_vector_Sl_EQApplicationPacket_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  EQApplicationPacket **arg3 = 0 ;
  EQApplicationPacket *temp3 = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (EQApplicationPacket *)jarg3;
  arg3 = (EQApplicationPacket **)&temp3; 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__Insert(arg1,arg2,(EQApplicationPacket *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  std::vector< EQApplicationPacket * > *arg3 = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< EQApplicationPacket * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQApplicationPacket * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__InsertRange(arg1,arg2,(std::vector< EQApplicationPacket * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PacketVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  EQApplicationPacket **arg1 = 0 ;
  int arg2 ;
  EQApplicationPacket *temp1 = 0 ;
  std::vector< EQApplicationPacket * > *result = 0 ;
  
  temp1 = (EQApplicationPacket *)jarg1;
  arg1 = (EQApplicationPacket **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< EQApplicationPacket * > *)std_vector_Sl_EQApplicationPacket_Sm__Sg__Repeat((EQApplicationPacket *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  std_vector_Sl_EQApplicationPacket_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_PacketVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  int arg2 ;
  std::vector< EQApplicationPacket * > *arg3 = 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< EQApplicationPacket * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< EQApplicationPacket * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_EQApplicationPacket_Sm__Sg__SetRange(arg1,arg2,(std::vector< EQApplicationPacket * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketVector_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  EQApplicationPacket **arg2 = 0 ;
  EQApplicationPacket *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  temp2 = (EQApplicationPacket *)jarg2;
  arg2 = (EQApplicationPacket **)&temp2; 
  result = (bool)std_vector_Sl_EQApplicationPacket_Sm__Sg__Contains(arg1,(EQApplicationPacket *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketVector_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  EQApplicationPacket **arg2 = 0 ;
  EQApplicationPacket *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  temp2 = (EQApplicationPacket *)jarg2;
  arg2 = (EQApplicationPacket **)&temp2; 
  result = (int)std_vector_Sl_EQApplicationPacket_Sm__Sg__IndexOf(arg1,(EQApplicationPacket *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PacketVector_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  EQApplicationPacket **arg2 = 0 ;
  EQApplicationPacket *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  temp2 = (EQApplicationPacket *)jarg2;
  arg2 = (EQApplicationPacket **)&temp2; 
  result = (int)std_vector_Sl_EQApplicationPacket_Sm__Sg__LastIndexOf(arg1,(EQApplicationPacket *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PacketVector_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  EQApplicationPacket **arg2 = 0 ;
  EQApplicationPacket *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  temp2 = (EQApplicationPacket *)jarg2;
  arg2 = (EQApplicationPacket **)&temp2; 
  result = (bool)std_vector_Sl_EQApplicationPacket_Sm__Sg__Remove(arg1,(EQApplicationPacket *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PacketVector(void * jarg1) {
  std::vector< EQApplicationPacket * > *arg1 = (std::vector< EQApplicationPacket * > *) 0 ;
  
  arg1 = (std::vector< EQApplicationPacket * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_push_front(void * jarg1, void * jarg2) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  AltCurrencyDefinition_Struct *arg2 = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (AltCurrencyDefinition_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AltCurrencyDefinition_Struct const & is null", 0);
    return ;
  } 
  (arg1)->push_front((AltCurrencyDefinition_Struct const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_push_back(void * jarg1, void * jarg2) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  AltCurrencyDefinition_Struct *arg2 = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (AltCurrencyDefinition_Struct *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AltCurrencyDefinition_Struct const & is null", 0);
    return ;
  } 
  (arg1)->push_back((AltCurrencyDefinition_Struct const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_RemoveFirst(void * jarg1) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_RemoveLast(void * jarg1) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AltCurrencyDefinitionList_size(void * jarg1) {
  unsigned int jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::size_type result;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  result = ((std::list< AltCurrencyDefinition_Struct > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_Clear(void * jarg1) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AltCurrencyDefinitionList_getItem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::value_type *result = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  result = (std::list< AltCurrencyDefinition_Struct >::value_type *) &std_list_Sl_AltCurrencyDefinition_Struct_Sg__getItem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_setItem(void * jarg1, void * jarg2, void * jarg3) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  AltCurrencyDefinition_Struct *arg3 = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  arg3 = (AltCurrencyDefinition_Struct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AltCurrencyDefinition_Struct const & is null", 0);
    return ;
  } 
  std_list_Sl_AltCurrencyDefinition_Struct_Sg__setItem(arg1,arg2,(AltCurrencyDefinition_Struct const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AltCurrencyDefinitionList_getFirstIter(void * jarg1) {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *result = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  result = (std::list< AltCurrencyDefinition_Struct >::iterator *)std_list_Sl_AltCurrencyDefinition_Struct_Sg__getFirstIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AltCurrencyDefinitionList_getLastIter(void * jarg1) {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *result = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  result = (std::list< AltCurrencyDefinition_Struct >::iterator *)std_list_Sl_AltCurrencyDefinition_Struct_Sg__getLastIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AltCurrencyDefinitionList_getNextIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *result = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  result = (std::list< AltCurrencyDefinition_Struct >::iterator *)std_list_Sl_AltCurrencyDefinition_Struct_Sg__getNextIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AltCurrencyDefinitionList_getPrevIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *result = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  result = (std::list< AltCurrencyDefinition_Struct >::iterator *)std_list_Sl_AltCurrencyDefinition_Struct_Sg__getPrevIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AltCurrencyDefinitionList_insertNode(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  AltCurrencyDefinition_Struct *arg3 = 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *result = 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  arg3 = (AltCurrencyDefinition_Struct *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "AltCurrencyDefinition_Struct const & is null", 0);
    return 0;
  } 
  result = (std::list< AltCurrencyDefinition_Struct >::iterator *)std_list_Sl_AltCurrencyDefinition_Struct_Sg__insertNode(arg1,arg2,(AltCurrencyDefinition_Struct const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_eraseIter(void * jarg1, void * jarg2) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  std_list_Sl_AltCurrencyDefinition_Struct_Sg__eraseIter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltCurrencyDefinitionList_deleteIter(void * jarg1, void * jarg2) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  std_list_Sl_AltCurrencyDefinition_Struct_Sg__deleteIter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AltCurrencyDefinitionList_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  std::list< AltCurrencyDefinition_Struct >::iterator *arg3 = (std::list< AltCurrencyDefinition_Struct >::iterator *) 0 ;
  bool result;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  arg2 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg2; 
  arg3 = (std::list< AltCurrencyDefinition_Struct >::iterator *)jarg3; 
  result = (bool)std_list_Sl_AltCurrencyDefinition_Struct_Sg__equals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AltCurrencyDefinitionList() {
  void * jresult ;
  std::list< AltCurrencyDefinition_Struct > *result = 0 ;
  
  result = (std::list< AltCurrencyDefinition_Struct > *)new std::list< AltCurrencyDefinition_Struct >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AltCurrencyDefinitionList(void * jarg1) {
  std::list< AltCurrencyDefinition_Struct > *arg1 = (std::list< AltCurrencyDefinition_Struct > *) 0 ;
  
  arg1 = (std::list< AltCurrencyDefinition_Struct > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_push_front(void * jarg1, void * jarg2) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  InternalVeteranReward *arg2 = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (InternalVeteranReward *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InternalVeteranReward const & is null", 0);
    return ;
  } 
  (arg1)->push_front((InternalVeteranReward const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_push_back(void * jarg1, void * jarg2) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  InternalVeteranReward *arg2 = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (InternalVeteranReward *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InternalVeteranReward const & is null", 0);
    return ;
  } 
  (arg1)->push_back((InternalVeteranReward const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_RemoveFirst(void * jarg1) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_RemoveLast(void * jarg1) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InternalVeteranRewardList_size(void * jarg1) {
  unsigned int jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::size_type result;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  result = ((std::list< InternalVeteranReward > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_Clear(void * jarg1) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalVeteranRewardList_getItem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  std::list< InternalVeteranReward >::value_type *result = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  result = (std::list< InternalVeteranReward >::value_type *) &std_list_Sl_InternalVeteranReward_Sg__getItem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_setItem(void * jarg1, void * jarg2, void * jarg3) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  InternalVeteranReward *arg3 = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  arg3 = (InternalVeteranReward *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InternalVeteranReward const & is null", 0);
    return ;
  } 
  std_list_Sl_InternalVeteranReward_Sg__setItem(arg1,arg2,(InternalVeteranReward const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalVeteranRewardList_getFirstIter(void * jarg1) {
  void * jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *result = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  result = (std::list< InternalVeteranReward >::iterator *)std_list_Sl_InternalVeteranReward_Sg__getFirstIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalVeteranRewardList_getLastIter(void * jarg1) {
  void * jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *result = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  result = (std::list< InternalVeteranReward >::iterator *)std_list_Sl_InternalVeteranReward_Sg__getLastIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalVeteranRewardList_getNextIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  std::list< InternalVeteranReward >::iterator *result = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  result = (std::list< InternalVeteranReward >::iterator *)std_list_Sl_InternalVeteranReward_Sg__getNextIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalVeteranRewardList_getPrevIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  std::list< InternalVeteranReward >::iterator *result = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  result = (std::list< InternalVeteranReward >::iterator *)std_list_Sl_InternalVeteranReward_Sg__getPrevIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InternalVeteranRewardList_insertNode(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  InternalVeteranReward *arg3 = 0 ;
  std::list< InternalVeteranReward >::iterator *result = 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  arg3 = (InternalVeteranReward *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "InternalVeteranReward const & is null", 0);
    return 0;
  } 
  result = (std::list< InternalVeteranReward >::iterator *)std_list_Sl_InternalVeteranReward_Sg__insertNode(arg1,arg2,(InternalVeteranReward const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_eraseIter(void * jarg1, void * jarg2) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  std_list_Sl_InternalVeteranReward_Sg__eraseIter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InternalVeteranRewardList_deleteIter(void * jarg1, void * jarg2) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  std_list_Sl_InternalVeteranReward_Sg__deleteIter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InternalVeteranRewardList_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg2 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  std::list< InternalVeteranReward >::iterator *arg3 = (std::list< InternalVeteranReward >::iterator *) 0 ;
  bool result;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  arg2 = (std::list< InternalVeteranReward >::iterator *)jarg2; 
  arg3 = (std::list< InternalVeteranReward >::iterator *)jarg3; 
  result = (bool)std_list_Sl_InternalVeteranReward_Sg__equals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_InternalVeteranRewardList() {
  void * jresult ;
  std::list< InternalVeteranReward > *result = 0 ;
  
  result = (std::list< InternalVeteranReward > *)new std::list< InternalVeteranReward >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_InternalVeteranRewardList(void * jarg1) {
  std::list< InternalVeteranReward > *arg1 = (std::list< InternalVeteranReward > *) 0 ;
  
  arg1 = (std::list< InternalVeteranReward > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntStringMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< int,std::string > *result = 0 ;
  
  result = (std::unordered_map< int,std::string > *)new std::unordered_map< int,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntStringMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< int,std::string > *arg1 = 0 ;
  std::unordered_map< int,std::string > *result = 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< int,std::string > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< int,std::string > *)new std::unordered_map< int,std::string >((std::unordered_map< int,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntStringMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string >::size_type result;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  result = ((std::unordered_map< int,std::string > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntStringMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  result = (bool)((std::unordered_map< int,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntStringMap_Clear(void * jarg1) {
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_IntStringMap_getitem(void * jarg1, int jarg2) {
  const char * jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string >::key_type *arg2 = 0 ;
  std::unordered_map< int,std::string >::key_type temp2 ;
  std::unordered_map< int,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  temp2 = (std::unordered_map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< int,std::string >::mapped_type *) &std_unordered_map_Sl_int_Sc_std_string_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntStringMap_setitem(void * jarg1, int jarg2, const char * jarg3) {
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string >::key_type *arg2 = 0 ;
  std::unordered_map< int,std::string >::mapped_type *arg3 = 0 ;
  std::unordered_map< int,std::string >::key_type temp2 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  temp2 = (std::unordered_map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::unordered_map< int,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_unordered_map_Sl_int_Sc_std_string_Sg__setitem(arg1,(int const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntStringMap_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string >::key_type *arg2 = 0 ;
  std::unordered_map< int,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  temp2 = (std::unordered_map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_int_Sc_std_string_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntStringMap_Add(void * jarg1, int jarg2, const char * jarg3) {
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string >::key_type *arg2 = 0 ;
  std::unordered_map< int,std::string >::mapped_type *arg3 = 0 ;
  std::unordered_map< int,std::string >::key_type temp2 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  temp2 = (std::unordered_map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::unordered_map< int,std::string >::mapped_type arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_unordered_map_Sl_int_Sc_std_string_Sg__Add(arg1,(int const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntStringMap_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string >::key_type *arg2 = 0 ;
  std::unordered_map< int,std::string >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  temp2 = (std::unordered_map< int,std::string >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_int_Sc_std_string_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntStringMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string,std::hash< int > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  result = (std::unordered_map< int,std::string,std::hash< int > >::iterator *)std_unordered_map_Sl_int_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntStringMap_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string,std::hash< int > >::iterator *arg2 = (std::unordered_map< int,std::string,std::hash< int > >::iterator *) 0 ;
  std::unordered_map< int,std::string >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  arg2 = (std::unordered_map< int,std::string,std::hash< int > >::iterator *)jarg2; 
  result = (std::unordered_map< int,std::string >::key_type *) &std_unordered_map_Sl_int_Sc_std_string_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntStringMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  std::unordered_map< int,std::string,std::hash< int > >::iterator *arg2 = (std::unordered_map< int,std::string,std::hash< int > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  arg2 = (std::unordered_map< int,std::string,std::hash< int > >::iterator *)jarg2; 
  std_unordered_map_Sl_int_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntStringMap(void * jarg1) {
  std::unordered_map< int,std::string > *arg1 = (std::unordered_map< int,std::string > *) 0 ;
  
  arg1 = (std::unordered_map< int,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntDoubleMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< int,double > *result = 0 ;
  
  result = (std::unordered_map< int,double > *)new std::unordered_map< int,double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntDoubleMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< int,double > *arg1 = 0 ;
  std::unordered_map< int,double > *result = 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< int,double > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< int,double > *)new std::unordered_map< int,double >((std::unordered_map< int,double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoubleMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double >::size_type result;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  result = ((std::unordered_map< int,double > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoubleMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  result = (bool)((std::unordered_map< int,double > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoubleMap_Clear(void * jarg1) {
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT double SWIGSTDCALL CSharp_IntDoubleMap_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double >::key_type *arg2 = 0 ;
  std::unordered_map< int,double >::key_type temp2 ;
  std::unordered_map< int,double >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  temp2 = (std::unordered_map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< int,double >::mapped_type *) &std_unordered_map_Sl_int_Sc_double_Sg__getitem(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoubleMap_setitem(void * jarg1, int jarg2, double jarg3) {
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double >::key_type *arg2 = 0 ;
  std::unordered_map< int,double >::mapped_type *arg3 = 0 ;
  std::unordered_map< int,double >::key_type temp2 ;
  std::unordered_map< int,double >::mapped_type temp3 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  temp2 = (std::unordered_map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< int,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_unordered_map_Sl_int_Sc_double_Sg__setitem(arg1,(int const &)*arg2,(double const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoubleMap_ContainsKey(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double >::key_type *arg2 = 0 ;
  std::unordered_map< int,double >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  temp2 = (std::unordered_map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_int_Sc_double_Sg__ContainsKey(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoubleMap_Add(void * jarg1, int jarg2, double jarg3) {
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double >::key_type *arg2 = 0 ;
  std::unordered_map< int,double >::mapped_type *arg3 = 0 ;
  std::unordered_map< int,double >::key_type temp2 ;
  std::unordered_map< int,double >::mapped_type temp3 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  temp2 = (std::unordered_map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< int,double >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_unordered_map_Sl_int_Sc_double_Sg__Add(arg1,(int const &)*arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoubleMap_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double >::key_type *arg2 = 0 ;
  std::unordered_map< int,double >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  temp2 = (std::unordered_map< int,double >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_int_Sc_double_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntDoubleMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double,std::hash< int > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  result = (std::unordered_map< int,double,std::hash< int > >::iterator *)std_unordered_map_Sl_int_Sc_double_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntDoubleMap_get_next_key(void * jarg1, void * jarg2) {
  int jresult ;
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double,std::hash< int > >::iterator *arg2 = (std::unordered_map< int,double,std::hash< int > >::iterator *) 0 ;
  std::unordered_map< int,double >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  arg2 = (std::unordered_map< int,double,std::hash< int > >::iterator *)jarg2; 
  result = (std::unordered_map< int,double >::key_type *) &std_unordered_map_Sl_int_Sc_double_Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoubleMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  std::unordered_map< int,double,std::hash< int > >::iterator *arg2 = (std::unordered_map< int,double,std::hash< int > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  arg2 = (std::unordered_map< int,double,std::hash< int > >::iterator *)jarg2; 
  std_unordered_map_Sl_int_Sc_double_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntDoubleMap(void * jarg1) {
  std::unordered_map< int,double > *arg1 = (std::unordered_map< int,double > *) 0 ;
  
  arg1 = (std::unordered_map< int,double > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntExpModifierMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned int,EXPModifier > *result = 0 ;
  
  result = (std::unordered_map< unsigned int,EXPModifier > *)new std::unordered_map< unsigned int,EXPModifier >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntExpModifierMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = 0 ;
  std::unordered_map< unsigned int,EXPModifier > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned int,EXPModifier > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned int,EXPModifier > *)new std::unordered_map< unsigned int,EXPModifier >((std::unordered_map< unsigned int,EXPModifier > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntExpModifierMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::size_type result;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  result = ((std::unordered_map< unsigned int,EXPModifier > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntExpModifierMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned int,EXPModifier > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntExpModifierMap_Clear(void * jarg1) {
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntExpModifierMap_getitem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type temp2 ;
  std::unordered_map< unsigned int,EXPModifier >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,EXPModifier >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned int,EXPModifier >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__getitem(arg1,(unsigned int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntExpModifierMap_setitem(void * jarg1, unsigned int jarg2, void * jarg3) {
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type temp2 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,EXPModifier >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::unordered_map< unsigned int,EXPModifier >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned int,EXPModifier >::mapped_type const & is null", 0);
    return ;
  } 
  std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__setitem(arg1,(unsigned int const &)*arg2,(EXPModifier const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntExpModifierMap_ContainsKey(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,EXPModifier >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__ContainsKey(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntExpModifierMap_Add(void * jarg1, unsigned int jarg2, void * jarg3) {
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type temp2 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,EXPModifier >::key_type)jarg2; 
  arg2 = &temp2; 
  arg3 = (std::unordered_map< unsigned int,EXPModifier >::mapped_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned int,EXPModifier >::mapped_type const & is null", 0);
    return ;
  } 
  try {
    std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__Add(arg1,(unsigned int const &)*arg2,(EXPModifier const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntExpModifierMap_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,EXPModifier >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__Remove(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntExpModifierMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  result = (std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *)std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntExpModifierMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *arg2 = (std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *) 0 ;
  std::unordered_map< unsigned int,EXPModifier >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  arg2 = (std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned int,EXPModifier >::key_type *) &std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__get_next_key(arg1,arg2);
  jresult = (unsigned int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntExpModifierMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *arg2 = (std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  arg2 = (std::unordered_map< unsigned int,EXPModifier,std::hash< unsigned int > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_int_Sc_EXPModifier_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntExpModifierMap(void * jarg1) {
  std::unordered_map< unsigned int,EXPModifier > *arg1 = (std::unordered_map< unsigned int,EXPModifier > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned int,EXPModifier > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntNpcMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned int,NPCType * > *result = 0 ;
  
  result = (std::unordered_map< unsigned int,NPCType * > *)new std::unordered_map< unsigned int,NPCType * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntNpcMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = 0 ;
  std::unordered_map< unsigned int,NPCType * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned int,NPCType * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned int,NPCType * > *)new std::unordered_map< unsigned int,NPCType * >((std::unordered_map< unsigned int,NPCType * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  result = ((std::unordered_map< unsigned int,NPCType * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned int,NPCType * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap_Clear(void * jarg1) {
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntNpcMap_getitem(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type temp2 ;
  std::unordered_map< unsigned int,NPCType * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,NPCType * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned int,NPCType * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__getitem(arg1,(unsigned int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap_setitem(void * jarg1, unsigned int jarg2, void * jarg3) {
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type temp2 ;
  std::unordered_map< unsigned int,NPCType * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,NPCType * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned int,NPCType * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned int,NPCType * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__setitem(arg1,(unsigned int const &)*arg2,(NPCType *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap_ContainsKey(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,NPCType * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__ContainsKey(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap_Add(void * jarg1, unsigned int jarg2, void * jarg3) {
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type temp2 ;
  std::unordered_map< unsigned int,NPCType * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,NPCType * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned int,NPCType * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned int,NPCType * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__Add(arg1,(unsigned int const &)*arg2,(NPCType *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned int,NPCType * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__Remove(arg1,(unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntNpcMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  result = (std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *)std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *arg2 = (std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *) 0 ;
  std::unordered_map< unsigned int,NPCType * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned int,NPCType * >::key_type *) &std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__get_next_key(arg1,arg2);
  jresult = (unsigned int)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *arg2 = (std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned int,NPCType *,std::hash< unsigned int > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_int_Sc_NPCType_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntNpcMap(void * jarg1) {
  std::unordered_map< unsigned int,NPCType * > *arg1 = (std::unordered_map< unsigned int,NPCType * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned int,NPCType * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntClientMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Client * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Client * > *)new std::unordered_map< unsigned short,Client * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntClientMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Client * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Client * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Client * > *)new std::unordered_map< unsigned short,Client * >((std::unordered_map< unsigned short,Client * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntClientMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Client * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntClientMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Client * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntClientMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntClientMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Client * >::key_type temp2 ;
  std::unordered_map< unsigned short,Client * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Client * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Client * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntClientMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Client * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Client * >::key_type temp2 ;
  std::unordered_map< unsigned short,Client * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Client * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Client * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Client * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Client *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntClientMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Client * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Client * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntClientMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Client * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Client * >::key_type temp2 ;
  std::unordered_map< unsigned short,Client * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Client * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Client * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Client * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Client *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntClientMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Client * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Client * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntClientMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntClientMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Client * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Client * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntClientMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Client *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Client_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntClientMap(void * jarg1) {
  std::unordered_map< unsigned short,Client * > *arg1 = (std::unordered_map< unsigned short,Client * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Client * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntMobMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Mob * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Mob * > *)new std::unordered_map< unsigned short,Mob * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntMobMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Mob * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Mob * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Mob * > *)new std::unordered_map< unsigned short,Mob * >((std::unordered_map< unsigned short,Mob * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMobMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Mob * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMobMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Mob * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMobMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntMobMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type temp2 ;
  std::unordered_map< unsigned short,Mob * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Mob * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Mob * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMobMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Mob * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type temp2 ;
  std::unordered_map< unsigned short,Mob * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Mob * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Mob * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Mob * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Mob *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMobMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Mob * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMobMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Mob * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type temp2 ;
  std::unordered_map< unsigned short,Mob * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Mob * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Mob * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Mob * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Mob *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMobMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Mob * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntMobMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntMobMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Mob * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Mob * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMobMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Mob *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Mob_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntMobMap(void * jarg1) {
  std::unordered_map< unsigned short,Mob * > *arg1 = (std::unordered_map< unsigned short,Mob * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Mob * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntNpcMap2__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,NPC * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,NPC * > *)new std::unordered_map< unsigned short,NPC * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntNpcMap2__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = 0 ;
  std::unordered_map< unsigned short,NPC * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,NPC * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,NPC * > *)new std::unordered_map< unsigned short,NPC * >((std::unordered_map< unsigned short,NPC * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap2_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,NPC * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap2_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,NPC * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap2_Clear(void * jarg1) {
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntNpcMap2_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type temp2 ;
  std::unordered_map< unsigned short,NPC * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,NPC * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,NPC * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap2_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,NPC * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type temp2 ;
  std::unordered_map< unsigned short,NPC * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,NPC * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,NPC * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,NPC * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(NPC *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap2_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,NPC * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap2_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,NPC * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type temp2 ;
  std::unordered_map< unsigned short,NPC * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,NPC * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,NPC * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,NPC * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(NPC *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntNpcMap2_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,NPC * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntNpcMap2_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  result = (std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntNpcMap2_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,NPC * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,NPC * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntNpcMap2_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,NPC *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_NPC_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntNpcMap2(void * jarg1) {
  std::unordered_map< unsigned short,NPC * > *arg1 = (std::unordered_map< unsigned short,NPC * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,NPC * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntMercMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Merc * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Merc * > *)new std::unordered_map< unsigned short,Merc * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntMercMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Merc * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Merc * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Merc * > *)new std::unordered_map< unsigned short,Merc * >((std::unordered_map< unsigned short,Merc * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMercMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Merc * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMercMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Merc * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMercMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntMercMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type temp2 ;
  std::unordered_map< unsigned short,Merc * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Merc * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Merc * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMercMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Merc * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type temp2 ;
  std::unordered_map< unsigned short,Merc * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Merc * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Merc * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Merc * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Merc *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMercMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Merc * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMercMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Merc * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type temp2 ;
  std::unordered_map< unsigned short,Merc * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Merc * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Merc * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Merc * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Merc *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntMercMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Merc * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntMercMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntMercMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Merc * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Merc * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntMercMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Merc *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Merc_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntMercMap(void * jarg1) {
  std::unordered_map< unsigned short,Merc * > *arg1 = (std::unordered_map< unsigned short,Merc * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Merc * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntCorpseMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Corpse * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Corpse * > *)new std::unordered_map< unsigned short,Corpse * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntCorpseMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Corpse * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Corpse * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Corpse * > *)new std::unordered_map< unsigned short,Corpse * >((std::unordered_map< unsigned short,Corpse * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntCorpseMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Corpse * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntCorpseMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Corpse * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntCorpseMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntCorpseMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type temp2 ;
  std::unordered_map< unsigned short,Corpse * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Corpse * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Corpse * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntCorpseMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type temp2 ;
  std::unordered_map< unsigned short,Corpse * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Corpse * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Corpse * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Corpse * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Corpse *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntCorpseMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Corpse * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntCorpseMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type temp2 ;
  std::unordered_map< unsigned short,Corpse * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Corpse * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Corpse * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Corpse * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Corpse *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntCorpseMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Corpse * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntCorpseMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntCorpseMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Corpse * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Corpse * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntCorpseMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Corpse *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Corpse_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntCorpseMap(void * jarg1) {
  std::unordered_map< unsigned short,Corpse * > *arg1 = (std::unordered_map< unsigned short,Corpse * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Corpse * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntObjectMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Object * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Object * > *)new std::unordered_map< unsigned short,Object * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntObjectMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Object * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Object * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Object * > *)new std::unordered_map< unsigned short,Object * >((std::unordered_map< unsigned short,Object * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntObjectMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Object * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntObjectMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Object * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntObjectMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntObjectMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Object * >::key_type temp2 ;
  std::unordered_map< unsigned short,Object * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Object * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Object * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntObjectMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Object * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Object * >::key_type temp2 ;
  std::unordered_map< unsigned short,Object * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Object * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Object * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Object * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Object *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntObjectMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Object * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Object * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntObjectMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Object * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Object * >::key_type temp2 ;
  std::unordered_map< unsigned short,Object * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Object * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Object * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Object * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Object *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntObjectMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Object * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Object * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntObjectMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntObjectMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Object * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Object * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntObjectMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Object *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Object_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntObjectMap(void * jarg1) {
  std::unordered_map< unsigned short,Object * > *arg1 = (std::unordered_map< unsigned short,Object * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Object * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntDoorMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Doors * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Doors * > *)new std::unordered_map< unsigned short,Doors * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntDoorMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Doors * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Doors * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Doors * > *)new std::unordered_map< unsigned short,Doors * >((std::unordered_map< unsigned short,Doors * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoorMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Doors * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoorMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Doors * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoorMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntDoorMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type temp2 ;
  std::unordered_map< unsigned short,Doors * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Doors * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Doors * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoorMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Doors * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type temp2 ;
  std::unordered_map< unsigned short,Doors * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Doors * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Doors * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Doors * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Doors *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoorMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Doors * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoorMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Doors * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type temp2 ;
  std::unordered_map< unsigned short,Doors * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Doors * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Doors * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Doors * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Doors *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntDoorMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Doors * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntDoorMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntDoorMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Doors * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Doors * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntDoorMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Doors *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Doors_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntDoorMap(void * jarg1) {
  std::unordered_map< unsigned short,Doors * > *arg1 = (std::unordered_map< unsigned short,Doors * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Doors * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntTrapMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Trap * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Trap * > *)new std::unordered_map< unsigned short,Trap * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntTrapMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Trap * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Trap * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Trap * > *)new std::unordered_map< unsigned short,Trap * >((std::unordered_map< unsigned short,Trap * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntTrapMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Trap * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntTrapMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Trap * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntTrapMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntTrapMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type temp2 ;
  std::unordered_map< unsigned short,Trap * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Trap * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Trap * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntTrapMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Trap * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type temp2 ;
  std::unordered_map< unsigned short,Trap * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Trap * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Trap * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Trap * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Trap *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntTrapMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Trap * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntTrapMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Trap * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type temp2 ;
  std::unordered_map< unsigned short,Trap * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Trap * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Trap * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Trap * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Trap *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntTrapMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Trap * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntTrapMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntTrapMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Trap * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Trap * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntTrapMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Trap *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Trap_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntTrapMap(void * jarg1) {
  std::unordered_map< unsigned short,Trap * > *arg1 = (std::unordered_map< unsigned short,Trap * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Trap * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntBeaconMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Beacon * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Beacon * > *)new std::unordered_map< unsigned short,Beacon * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntBeaconMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Beacon * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Beacon * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Beacon * > *)new std::unordered_map< unsigned short,Beacon * >((std::unordered_map< unsigned short,Beacon * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntBeaconMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Beacon * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntBeaconMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Beacon * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntBeaconMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntBeaconMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type temp2 ;
  std::unordered_map< unsigned short,Beacon * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Beacon * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Beacon * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntBeaconMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type temp2 ;
  std::unordered_map< unsigned short,Beacon * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Beacon * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Beacon * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Beacon * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Beacon *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntBeaconMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Beacon * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntBeaconMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type temp2 ;
  std::unordered_map< unsigned short,Beacon * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Beacon * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Beacon * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Beacon * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Beacon *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntBeaconMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Beacon * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntBeaconMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntBeaconMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Beacon * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Beacon * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntBeaconMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Beacon *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Beacon_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntBeaconMap(void * jarg1) {
  std::unordered_map< unsigned short,Beacon * > *arg1 = (std::unordered_map< unsigned short,Beacon * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Beacon * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntEncounterMap__SWIG_0() {
  void * jresult ;
  std::unordered_map< unsigned short,Encounter * > *result = 0 ;
  
  result = (std::unordered_map< unsigned short,Encounter * > *)new std::unordered_map< unsigned short,Encounter * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntEncounterMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = 0 ;
  std::unordered_map< unsigned short,Encounter * > *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< unsigned short,Encounter * > const & is null", 0);
    return 0;
  } 
  result = (std::unordered_map< unsigned short,Encounter * > *)new std::unordered_map< unsigned short,Encounter * >((std::unordered_map< unsigned short,Encounter * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntEncounterMap_size(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::size_type result;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  result = ((std::unordered_map< unsigned short,Encounter * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntEncounterMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  result = (bool)((std::unordered_map< unsigned short,Encounter * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntEncounterMap_Clear(void * jarg1) {
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntEncounterMap_getitem(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type temp2 ;
  std::unordered_map< unsigned short,Encounter * >::mapped_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Encounter * >::key_type)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::unordered_map< unsigned short,Encounter * >::mapped_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__getitem(arg1,(unsigned short const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntEncounterMap_setitem(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type temp2 ;
  std::unordered_map< unsigned short,Encounter * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Encounter * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Encounter * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Encounter * >::mapped_type *)&temp3; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__setitem(arg1,(unsigned short const &)*arg2,(Encounter *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntEncounterMap_ContainsKey(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Encounter * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__ContainsKey(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntEncounterMap_Add(void * jarg1, unsigned short jarg2, void * jarg3) {
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::mapped_type *arg3 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type temp2 ;
  std::unordered_map< unsigned short,Encounter * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Encounter * >::key_type)jarg2; 
  arg2 = &temp2; 
  temp3 = (std::unordered_map< unsigned short,Encounter * >::mapped_type)jarg3;
  arg3 = (std::unordered_map< unsigned short,Encounter * >::mapped_type *)&temp3; 
  try {
    std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__Add(arg1,(unsigned short const &)*arg2,(Encounter *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntEncounterMap_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type *arg2 = 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type temp2 ;
  bool result;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  temp2 = (std::unordered_map< unsigned short,Encounter * >::key_type)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntEncounterMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  result = (std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *)std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_IntEncounterMap_get_next_key(void * jarg1, void * jarg2) {
  unsigned short jresult ;
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *) 0 ;
  std::unordered_map< unsigned short,Encounter * >::key_type *result = 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *)jarg2; 
  result = (std::unordered_map< unsigned short,Encounter * >::key_type *) &std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__get_next_key(arg1,arg2);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntEncounterMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *arg2 = (std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  arg2 = (std::unordered_map< unsigned short,Encounter *,std::hash< unsigned short > >::iterator *)jarg2; 
  std_unordered_map_Sl_unsigned_SS_short_Sc_Encounter_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntEncounterMap(void * jarg1) {
  std::unordered_map< unsigned short,Encounter * > *arg1 = (std::unordered_map< unsigned short,Encounter * > *) 0 ;
  
  arg1 = (std::unordered_map< unsigned short,Encounter * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_push_front(void * jarg1, void * jarg2) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  NPC **arg2 = 0 ;
  NPC *temp2 = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  temp2 = (NPC *)jarg2;
  arg2 = (NPC **)&temp2; 
  (arg1)->push_front((NPC *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_push_back(void * jarg1, void * jarg2) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  NPC **arg2 = 0 ;
  NPC *temp2 = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  temp2 = (NPC *)jarg2;
  arg2 = (NPC **)&temp2; 
  (arg1)->push_back((NPC *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_RemoveFirst(void * jarg1) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_RemoveLast(void * jarg1) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProximityList_size(void * jarg1) {
  unsigned int jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::size_type result;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  result = ((std::list< NPC * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_Clear(void * jarg1) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_getItem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  std::list< NPC * >::value_type *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  result = (std::list< NPC * >::value_type *) &std_list_Sl_NPC_Sm__Sg__getItem(arg1,arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_setItem(void * jarg1, void * jarg2, void * jarg3) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  NPC **arg3 = 0 ;
  NPC *temp3 = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  temp3 = (NPC *)jarg3;
  arg3 = (NPC **)&temp3; 
  std_list_Sl_NPC_Sm__Sg__setItem(arg1,arg2,(NPC *const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_getFirstIter(void * jarg1) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  result = (std::list< NPC * >::iterator *)std_list_Sl_NPC_Sm__Sg__getFirstIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_getLastIter(void * jarg1) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  result = (std::list< NPC * >::iterator *)std_list_Sl_NPC_Sm__Sg__getLastIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_getNextIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  std::list< NPC * >::iterator *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  result = (std::list< NPC * >::iterator *)std_list_Sl_NPC_Sm__Sg__getNextIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_getPrevIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  std::list< NPC * >::iterator *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  result = (std::list< NPC * >::iterator *)std_list_Sl_NPC_Sm__Sg__getPrevIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_insertNode(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  NPC **arg3 = 0 ;
  NPC *temp3 = 0 ;
  std::list< NPC * >::iterator *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  temp3 = (NPC *)jarg3;
  arg3 = (NPC **)&temp3; 
  result = (std::list< NPC * >::iterator *)std_list_Sl_NPC_Sm__Sg__insertNode(arg1,arg2,(NPC *const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_eraseIter(void * jarg1, void * jarg2) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  std_list_Sl_NPC_Sm__Sg__eraseIter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProximityList_deleteIter(void * jarg1, void * jarg2) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  std_list_Sl_NPC_Sm__Sg__deleteIter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProximityList_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  std::list< NPC * >::iterator *arg2 = (std::list< NPC * >::iterator *) 0 ;
  std::list< NPC * >::iterator *arg3 = (std::list< NPC * >::iterator *) 0 ;
  bool result;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  arg2 = (std::list< NPC * >::iterator *)jarg2; 
  arg3 = (std::list< NPC * >::iterator *)jarg3; 
  result = (bool)std_list_Sl_NPC_Sm__Sg__equals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProximityList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  NPC **arg2 = 0 ;
  NPC *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  temp2 = (NPC *)jarg2;
  arg2 = (NPC **)&temp2; 
  result = (bool)std_list_Sl_NPC_Sm__Sg__Contains(arg1,(NPC *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProximityList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  NPC **arg2 = 0 ;
  NPC *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  temp2 = (NPC *)jarg2;
  arg2 = (NPC **)&temp2; 
  result = (bool)std_list_Sl_NPC_Sm__Sg__Remove(arg1,(NPC *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ProximityList_find(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  NPC **arg2 = 0 ;
  NPC *temp2 = 0 ;
  std::list< NPC * >::iterator *result = 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  temp2 = (NPC *)jarg2;
  arg2 = (NPC **)&temp2; 
  result = (std::list< NPC * >::iterator *)std_list_Sl_NPC_Sm__Sg__find(arg1,(NPC *const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProximityList() {
  void * jresult ;
  std::list< NPC * > *result = 0 ;
  
  result = (std::list< NPC * > *)new std::list< NPC * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProximityList(void * jarg1) {
  std::list< NPC * > *arg1 = (std::list< NPC * > *) 0 ;
  
  arg1 = (std::list< NPC * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_push_front(void * jarg1, void * jarg2) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  Group **arg2 = 0 ;
  Group *temp2 = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  temp2 = (Group *)jarg2;
  arg2 = (Group **)&temp2; 
  (arg1)->push_front((Group *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_push_back(void * jarg1, void * jarg2) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  Group **arg2 = 0 ;
  Group *temp2 = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  temp2 = (Group *)jarg2;
  arg2 = (Group **)&temp2; 
  (arg1)->push_back((Group *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_RemoveFirst(void * jarg1) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_RemoveLast(void * jarg1) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GroupList_size(void * jarg1) {
  unsigned int jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::size_type result;
  
  arg1 = (std::list< Group * > *)jarg1; 
  result = ((std::list< Group * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_Clear(void * jarg1) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_getItem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  std::list< Group * >::value_type *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  result = (std::list< Group * >::value_type *) &std_list_Sl_Group_Sm__Sg__getItem(arg1,arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_setItem(void * jarg1, void * jarg2, void * jarg3) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  Group **arg3 = 0 ;
  Group *temp3 = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  temp3 = (Group *)jarg3;
  arg3 = (Group **)&temp3; 
  std_list_Sl_Group_Sm__Sg__setItem(arg1,arg2,(Group *const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_getFirstIter(void * jarg1) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  result = (std::list< Group * >::iterator *)std_list_Sl_Group_Sm__Sg__getFirstIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_getLastIter(void * jarg1) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  result = (std::list< Group * >::iterator *)std_list_Sl_Group_Sm__Sg__getLastIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_getNextIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  std::list< Group * >::iterator *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  result = (std::list< Group * >::iterator *)std_list_Sl_Group_Sm__Sg__getNextIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_getPrevIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  std::list< Group * >::iterator *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  result = (std::list< Group * >::iterator *)std_list_Sl_Group_Sm__Sg__getPrevIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_insertNode(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  Group **arg3 = 0 ;
  Group *temp3 = 0 ;
  std::list< Group * >::iterator *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  temp3 = (Group *)jarg3;
  arg3 = (Group **)&temp3; 
  result = (std::list< Group * >::iterator *)std_list_Sl_Group_Sm__Sg__insertNode(arg1,arg2,(Group *const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_eraseIter(void * jarg1, void * jarg2) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  std_list_Sl_Group_Sm__Sg__eraseIter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GroupList_deleteIter(void * jarg1, void * jarg2) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  std_list_Sl_Group_Sm__Sg__deleteIter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GroupList_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  std::list< Group * >::iterator *arg2 = (std::list< Group * >::iterator *) 0 ;
  std::list< Group * >::iterator *arg3 = (std::list< Group * >::iterator *) 0 ;
  bool result;
  
  arg1 = (std::list< Group * > *)jarg1; 
  arg2 = (std::list< Group * >::iterator *)jarg2; 
  arg3 = (std::list< Group * >::iterator *)jarg3; 
  result = (bool)std_list_Sl_Group_Sm__Sg__equals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GroupList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  Group **arg2 = 0 ;
  Group *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< Group * > *)jarg1; 
  temp2 = (Group *)jarg2;
  arg2 = (Group **)&temp2; 
  result = (bool)std_list_Sl_Group_Sm__Sg__Contains(arg1,(Group *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GroupList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  Group **arg2 = 0 ;
  Group *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< Group * > *)jarg1; 
  temp2 = (Group *)jarg2;
  arg2 = (Group **)&temp2; 
  result = (bool)std_list_Sl_Group_Sm__Sg__Remove(arg1,(Group *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GroupList_find(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  Group **arg2 = 0 ;
  Group *temp2 = 0 ;
  std::list< Group * >::iterator *result = 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  temp2 = (Group *)jarg2;
  arg2 = (Group **)&temp2; 
  result = (std::list< Group * >::iterator *)std_list_Sl_Group_Sm__Sg__find(arg1,(Group *const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_GroupList() {
  void * jresult ;
  std::list< Group * > *result = 0 ;
  
  result = (std::list< Group * > *)new std::list< Group * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GroupList(void * jarg1) {
  std::list< Group * > *arg1 = (std::list< Group * > *) 0 ;
  
  arg1 = (std::list< Group * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_push_front(void * jarg1, void * jarg2) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  Raid **arg2 = 0 ;
  Raid *temp2 = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  temp2 = (Raid *)jarg2;
  arg2 = (Raid **)&temp2; 
  (arg1)->push_front((Raid *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_push_back(void * jarg1, void * jarg2) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  Raid **arg2 = 0 ;
  Raid *temp2 = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  temp2 = (Raid *)jarg2;
  arg2 = (Raid **)&temp2; 
  (arg1)->push_back((Raid *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_RemoveFirst(void * jarg1) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_RemoveLast(void * jarg1) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidList_size(void * jarg1) {
  unsigned int jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::size_type result;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  result = ((std::list< Raid * > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_Clear(void * jarg1) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_getItem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  std::list< Raid * >::value_type *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  result = (std::list< Raid * >::value_type *) &std_list_Sl_Raid_Sm__Sg__getItem(arg1,arg2);
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_setItem(void * jarg1, void * jarg2, void * jarg3) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  Raid **arg3 = 0 ;
  Raid *temp3 = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  temp3 = (Raid *)jarg3;
  arg3 = (Raid **)&temp3; 
  std_list_Sl_Raid_Sm__Sg__setItem(arg1,arg2,(Raid *const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_getFirstIter(void * jarg1) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  result = (std::list< Raid * >::iterator *)std_list_Sl_Raid_Sm__Sg__getFirstIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_getLastIter(void * jarg1) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  result = (std::list< Raid * >::iterator *)std_list_Sl_Raid_Sm__Sg__getLastIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_getNextIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  std::list< Raid * >::iterator *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  result = (std::list< Raid * >::iterator *)std_list_Sl_Raid_Sm__Sg__getNextIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_getPrevIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  std::list< Raid * >::iterator *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  result = (std::list< Raid * >::iterator *)std_list_Sl_Raid_Sm__Sg__getPrevIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_insertNode(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  Raid **arg3 = 0 ;
  Raid *temp3 = 0 ;
  std::list< Raid * >::iterator *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  temp3 = (Raid *)jarg3;
  arg3 = (Raid **)&temp3; 
  result = (std::list< Raid * >::iterator *)std_list_Sl_Raid_Sm__Sg__insertNode(arg1,arg2,(Raid *const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_eraseIter(void * jarg1, void * jarg2) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  std_list_Sl_Raid_Sm__Sg__eraseIter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaidList_deleteIter(void * jarg1, void * jarg2) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  std_list_Sl_Raid_Sm__Sg__deleteIter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidList_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  std::list< Raid * >::iterator *arg2 = (std::list< Raid * >::iterator *) 0 ;
  std::list< Raid * >::iterator *arg3 = (std::list< Raid * >::iterator *) 0 ;
  bool result;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  arg2 = (std::list< Raid * >::iterator *)jarg2; 
  arg3 = (std::list< Raid * >::iterator *)jarg3; 
  result = (bool)std_list_Sl_Raid_Sm__Sg__equals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  Raid **arg2 = 0 ;
  Raid *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  temp2 = (Raid *)jarg2;
  arg2 = (Raid **)&temp2; 
  result = (bool)std_list_Sl_Raid_Sm__Sg__Contains(arg1,(Raid *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaidList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  Raid **arg2 = 0 ;
  Raid *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  temp2 = (Raid *)jarg2;
  arg2 = (Raid **)&temp2; 
  result = (bool)std_list_Sl_Raid_Sm__Sg__Remove(arg1,(Raid *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaidList_find(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  Raid **arg2 = 0 ;
  Raid *temp2 = 0 ;
  std::list< Raid * >::iterator *result = 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  temp2 = (Raid *)jarg2;
  arg2 = (Raid **)&temp2; 
  result = (std::list< Raid * >::iterator *)std_list_Sl_Raid_Sm__Sg__find(arg1,(Raid *const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaidList() {
  void * jresult ;
  std::list< Raid * > *result = 0 ;
  
  result = (std::list< Raid * > *)new std::list< Raid * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RaidList(void * jarg1) {
  std::list< Raid * > *arg1 = (std::list< Raid * > *) 0 ;
  
  arg1 = (std::list< Raid * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_push_front(void * jarg1, void * jarg2) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  Area *arg2 = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (Area *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Area const & is null", 0);
    return ;
  } 
  (arg1)->push_front((Area const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_push_back(void * jarg1, void * jarg2) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  Area *arg2 = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (Area *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Area const & is null", 0);
    return ;
  } 
  (arg1)->push_back((Area const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_RemoveFirst(void * jarg1) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_RemoveLast(void * jarg1) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AreaList_size(void * jarg1) {
  unsigned int jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::size_type result;
  
  arg1 = (std::list< Area > *)jarg1; 
  result = ((std::list< Area > const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_Clear(void * jarg1) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AreaList_getItem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  std::list< Area >::value_type *result = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  result = (std::list< Area >::value_type *) &std_list_Sl_Area_Sg__getItem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_setItem(void * jarg1, void * jarg2, void * jarg3) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  Area *arg3 = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  arg3 = (Area *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Area const & is null", 0);
    return ;
  } 
  std_list_Sl_Area_Sg__setItem(arg1,arg2,(Area const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AreaList_getFirstIter(void * jarg1) {
  void * jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *result = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  result = (std::list< Area >::iterator *)std_list_Sl_Area_Sg__getFirstIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AreaList_getLastIter(void * jarg1) {
  void * jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *result = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  result = (std::list< Area >::iterator *)std_list_Sl_Area_Sg__getLastIter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AreaList_getNextIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  std::list< Area >::iterator *result = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  result = (std::list< Area >::iterator *)std_list_Sl_Area_Sg__getNextIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AreaList_getPrevIter(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  std::list< Area >::iterator *result = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  result = (std::list< Area >::iterator *)std_list_Sl_Area_Sg__getPrevIter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AreaList_insertNode(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  Area *arg3 = 0 ;
  std::list< Area >::iterator *result = 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  arg3 = (Area *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Area const & is null", 0);
    return 0;
  } 
  result = (std::list< Area >::iterator *)std_list_Sl_Area_Sg__insertNode(arg1,arg2,(Area const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_eraseIter(void * jarg1, void * jarg2) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  std_list_Sl_Area_Sg__eraseIter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AreaList_deleteIter(void * jarg1, void * jarg2) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  std_list_Sl_Area_Sg__deleteIter(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AreaList_equals(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  std::list< Area >::iterator *arg2 = (std::list< Area >::iterator *) 0 ;
  std::list< Area >::iterator *arg3 = (std::list< Area >::iterator *) 0 ;
  bool result;
  
  arg1 = (std::list< Area > *)jarg1; 
  arg2 = (std::list< Area >::iterator *)jarg2; 
  arg3 = (std::list< Area >::iterator *)jarg3; 
  result = (bool)std_list_Sl_Area_Sg__equals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AreaList() {
  void * jresult ;
  std::list< Area > *result = 0 ;
  
  result = (std::list< Area > *)new std::list< Area >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AreaList(void * jarg1) {
  std::list< Area > *arg1 = (std::list< Area > *) 0 ;
  
  arg1 = (std::list< Area > *)jarg1; 
  delete arg1;
}


SWIGEXPORT EQPacket * SWIGSTDCALL CSharp_EQApplicationPacket_SWIGUpcast(EQApplicationPacket *jarg1) {
    return (EQPacket *)jarg1;
}

SWIGEXPORT EQApplicationPacket * SWIGSTDCALL CSharp_EQRawApplicationPacket_SWIGUpcast(EQRawApplicationPacket *jarg1) {
    return (EQApplicationPacket *)jarg1;
}

SWIGEXPORT Entity * SWIGSTDCALL CSharp_Mob_SWIGUpcast(Mob *jarg1) {
    return (Entity *)jarg1;
}

SWIGEXPORT Mob * SWIGSTDCALL CSharp_NPC_SWIGUpcast(NPC *jarg1) {
    return (Mob *)jarg1;
}

SWIGEXPORT Mob * SWIGSTDCALL CSharp_Encounter_SWIGUpcast(Encounter *jarg1) {
    return (Mob *)jarg1;
}

SWIGEXPORT Mob * SWIGSTDCALL CSharp_Beacon_SWIGUpcast(Beacon *jarg1) {
    return (Mob *)jarg1;
}

SWIGEXPORT Mob * SWIGSTDCALL CSharp_Client_SWIGUpcast(Client *jarg1) {
    return (Mob *)jarg1;
}

SWIGEXPORT Mob * SWIGSTDCALL CSharp_Corpse_SWIGUpcast(Corpse *jarg1) {
    return (Mob *)jarg1;
}

SWIGEXPORT Entity * SWIGSTDCALL CSharp_Doors_SWIGUpcast(Doors *jarg1) {
    return (Entity *)jarg1;
}

SWIGEXPORT GroupIDConsumer * SWIGSTDCALL CSharp_Group_SWIGUpcast(Group *jarg1) {
    return (GroupIDConsumer *)jarg1;
}

SWIGEXPORT Entity * SWIGSTDCALL CSharp_Object_SWIGUpcast(Object *jarg1) {
    return (Entity *)jarg1;
}

SWIGEXPORT GroupIDConsumer * SWIGSTDCALL CSharp_Raid_SWIGUpcast(Raid *jarg1) {
    return (GroupIDConsumer *)jarg1;
}

SWIGEXPORT Entity * SWIGSTDCALL CSharp_Trap_SWIGUpcast(Trap *jarg1) {
    return (Entity *)jarg1;
}

#ifdef __cplusplus
}
#endif


CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

SET(zone_sources
    aa.cpp
    aa_ability.cpp
    aggro.cpp
    aggromanager.cpp
    api_service.cpp
    attack.cpp
    aura.cpp
    beacon.cpp
    bonuses.cpp
    bot.cpp
    bot_raid.cpp
    bot_command.cpp
    bot_database.cpp
    botspellsai.cpp
    cheat_manager.cpp
    client.cpp
    client_bot.cpp
    client_mods.cpp
    client_packet.cpp
    client_process.cpp
    combat_record.cpp
    command.cpp
    corpse.cpp
    data_bucket.cpp
    doors.cpp
    dialogue_window.cpp
    dynamic_zone.cpp
    effects.cpp
    embparser.cpp
    embparser_api.cpp
    embperl.cpp
    encounter.cpp
    entity.cpp
    exp.cpp
    expedition.cpp
    expedition_database.cpp
    expedition_request.cpp
    fastmath.cpp
    fearpath.cpp
    forage.cpp
    groups.cpp
    guild.cpp
    guild_mgr.cpp
    hate_list.cpp
    heal_rotation.cpp
    horse.cpp
    inventory.cpp
    loot.cpp
    lua_bot.cpp
    lua_bit.cpp
    lua_buff.cpp
    lua_corpse.cpp
    lua_client.cpp
    lua_door.cpp
    lua_encounter.cpp
    lua_entity.cpp
    lua_entity_list.cpp
    lua_expedition.cpp
    lua_general.cpp
    lua_group.cpp
    lua_hate_list.cpp
    lua_inventory.cpp
    lua_item.cpp
    lua_iteminst.cpp
    lua_mob.cpp
    lua_mod.cpp
    lua_npc.cpp
    lua_object.cpp
    lua_packet.cpp
    lua_parser.cpp
    lua_parser_events.cpp
    lua_raid.cpp
    lua_spawn.cpp
    lua_spell.cpp
    lua_stat_bonuses.cpp
    embperl.cpp
    entity.cpp
    exp.cpp
    fearpath.cpp
    forage.cpp
    global_loot_manager.cpp
    groups.cpp
    guild.cpp
    guild_mgr.cpp
    hate_list.cpp
    horse.cpp
    inventory.cpp
    loot.cpp
    main.cpp
    map.cpp
    merc.cpp
    mob.cpp
    mob_ai.cpp
    mob_appearance.cpp
    mob_movement_manager.cpp
    mob_info.cpp
    npc.cpp
    npc_scale_manager.cpp
    object.cpp
    oriented_bounding_box.cpp
    pathfinder_interface.cpp
    pathfinder_nav_mesh.cpp
    pathfinder_null.cpp
    pathing.cpp
    perl_bot.cpp
    perl_buff.cpp
    perl_client.cpp
    perl_doors.cpp
    perl_entity.cpp
    perl_expedition.cpp
    perl_groups.cpp
    perl_hateentry.cpp
    perl_inventory.cpp
    perl_mob.cpp
    perl_npc.cpp
    perl_object.cpp
    perl_perlpacket.cpp
    perl_player_corpse.cpp
    perl_questitem.cpp
    perl_questitem_data.cpp
    perl_raids.cpp
    perl_spawn.cpp
    perl_spell.cpp
    perl_stat_bonuses.cpp
    perlpacket.cpp
    petitions.cpp
    pets.cpp
    position.cpp
    qglobals.cpp
    queryserv.cpp
    questmgr.cpp
    quest_parser_collection.cpp
    raids.cpp
    raycast_mesh.cpp
    sidecar_api/sidecar_api.cpp
    sidecar_api/loot_simulator_controller.cpp
    shared_task_zone_messaging.cpp
    spawn2.cpp
    spawn2.h
    spawngroup.cpp
    special_attacks.cpp
    spell_effects.cpp
    spells.cpp
    task_client_state.cpp
    task_manager.cpp
    tasks.cpp
    titles.cpp
    tradeskills.cpp
    trading.cpp
    trap.cpp
    tribute.cpp
    tune.cpp
    water_map.cpp
    water_map_v1.cpp
    water_map_v2.cpp
    waypoints.cpp
    worldserver.cpp
    xtargetautohaters.cpp
    zone.cpp
    zone_config.cpp
    zonedb.cpp
    zone_base_data.cpp
    zone_event_scheduler.cpp
    zone_npc_factions.cpp
    zone_reload.cpp
    zoning.cpp
)

SET(zone_headers
    aa.h
    aa_ability.h
    aggromanager.h
    api_service.h
    aura.h
    beacon.h
    bot.h
    bot_command.h
    bot_database.h
    bot_structs.h
    cheat_manager.h
    client.h
    client_packet.h
    combat_record.h
    command.h
    common.h
    corpse.h
    data_bucket.h
    doors.h
    dialogue_window.h
    dynamic_zone.h
    embparser.h
    embperl.h
    encounter.h
    entity.h
    event_codes.h
    expedition.h
    expedition_database.h
    expedition_request.h
    fastmath.h
    forage.h
    global_loot_manager.h
    groups.h
    guild_mgr.h
    hate_list.h
    heal_rotation.h
    horse.h
    lua_bot.h
    lua_bit.h
    lua_buff.h
    lua_client.h
    lua_corpse.h
    lua_door.h
    lua_encounter.h
    lua_entity.h
    lua_entity_list.h
    lua_expedition.h
    lua_general.h
    lua_group.h
    lua_hate_list.h
    lua_inventory.h
    lua_item.h
    lua_iteminst.h
    lua_mob.h
    lua_mod.h
    lua_npc.h
    lua_object.h
    lua_packet.h
    lua_parser.h
    lua_parser_events.h
    lua_ptr.h
    lua_raid.h
    lua_spawn.h
    lua_spell.h
    lua_stat_bonuses.h
    map.h
    masterentity.h
    merc.h
    mob.h
    mob_movement_manager.h
    npc.h
    npc_scale_manager.h
    object.h
    oriented_bounding_box.h
    pathfinder_interface.h
    pathfinder_nav_mesh.h
    pathfinder_null.h
    perlpacket.h
    petitions.h
    pets.h
    position.h
    qglobals.h
    quest_interface.h
    queryserv.h
    quest_interface.h
    questmgr.h
    quest_parser_collection.h
    raids.h
    raycast_mesh.h
    sidecar_api/sidecar_api.h
    shared_task_zone_messaging.h
    spawn2.cpp
    spawn2.h
    spawngroup.h
    string_ids.h
    task_client_state.h
    task_manager.h
    tasks.h
    titles.h
    trap.h
    water_map.h
    water_map_v1.h
    water_map_v2.h
    worldserver.h
    xtargetautohaters.h
    zone.h
    zone_event_scheduler.h
    zone_config.h
    zonedb.h
    zonedump.h
    zone_cli.h
    zone_reload.h
    zone_cli.cpp)


IF (WIN32 AND EQEMU_BUILD_PCH)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ../common/pch/pch.h)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE ../common/types.h ../common/eqemu_logsys.h ../common/eqemu_logsys_log_aliases.h ../common/features.h ../common/global_define.h)
    TARGET_PRECOMPILE_HEADERS(zone PRIVATE mob.h npc.h corpse.h doors.h bot.h entity.h client.h zone.h)
ENDIF()

ADD_DEFINITIONS(-DZONE)
SET(BUILD_DIR ${PROJECT_BINARY_DIR}/bin)

## DOTNET
## Swig exec: swig -csharp -c++ -I../../../submodules/fmt/include -outfile DotNetTypes/dotnet_quests.cs questinterface.i
set(dotnet_sources
    dotnet_quests/dotnet_quest_interface.h
    dotnet_quests/dotnet_quest_interface.cpp
    dotnet_quests/dotnet_runtime.h
    dotnet_quests/dotnet_runtime.cpp
)

execute_process(COMMAND dotnet --info OUTPUT_VARIABLE DOTNET_INFO)
string(REGEX MATCH "Base Path:[ ]*([^\n\r]*)" DOTNET_BASE_PATH_MATCH "${DOTNET_INFO}")
set(DOTNET_BASE_PATH "${CMAKE_MATCH_1}")
get_filename_component(UP_ONE_DIR "${DOTNET_BASE_PATH}" DIRECTORY)
get_filename_component(UP_TWO_DIRS "${UP_ONE_DIR}" DIRECTORY)
file(GLOB_RECURSE LIBNETHOST_PATHS LIST_DIRECTORIES true "${UP_TWO_DIRS}/packs/**/native")

MESSAGE(STATUS "DOTNET_BASE_PATH PATHS ${UP_TWO_DIRS}")

foreach(DIR IN LISTS LIBNETHOST_PATHS)
    if("${DIR}" MATCHES "native$")
        SET(NETHOST_PATH "${DIR}")
        break()
    endif()
endforeach()


set(NETHOST_LIBRARY_NAME "")

if(WIN32)
    set(NETHOST_LIBRARY_NAME "nethost.lib")
else()
    set(NETHOST_LIBRARY_NAME "libnethost.a")
endif()

MESSAGE(STATUS "Looking for ${NETHOST_LIBRARY_NAME}")
add_library(questinterface SHARED dotnet_quests/questinterface/questinterface_wrap.cxx)

file(GLOB_RECURSE DOTNET_QUESTS_SOURCES 
     "dotnet_quests/questinterface/DotNetTypes/**/*")

file(GLOB_RECURSE DOTNET_BRIDGE_SOURCES 
    "dotnet_quests/questinterface/DotNetBridge/**/*")
add_custom_target(dotnet_questinterface
  COMMAND dotnet restore
  COMMAND dotnet publish "${CMAKE_SOURCE_DIR}/zone/dotnet_quests/questinterface/questinterface.sln" -c Release --output "${BUILD_DIR}/dotnet"
  DEPENDS questinterface ${DOTNET_QUESTS_SOURCES} ${DOTNET_BRIDGE_SOURCES}
  WORKING_DIRECTORY  "${CMAKE_SOURCE_DIR}/zone/dotnet_quests/questinterface"
  COMMENT "Building DotNet questinterface .NET solution..."
)

include_directories(
    ${CMAKE_SOURCE_DIR}/zone
)

# Create symlinks to shared lib and dotnet folder 
if(UNIX AND NOT APPLE)
  if(IS_DIRECTORY "/home/eqemu")
  execute_process(COMMAND sudo bash ${CMAKE_CURRENT_SOURCE_DIR}/dotnet_quests/setup.sh
    RESULT_VARIABLE script_result
    OUTPUT_VARIABLE script_output)

    # Check the result
    if(NOT script_result EQUAL "0")
        message(FATAL_ERROR "Script failed: ${script_output}")
    else()
        message(STATUS "Setup script succeeded: ${script_output}")
    endif()

  endif()
endif()

add_library(dotnet_quests SHARED ${zone_sources} ${zone_headers} ${dotnet_sources})

set_target_properties(dotnet_quests PROPERTIES PREFIX "")
set_target_properties(questinterface PROPERTIES PREFIX "")

target_include_directories(dotnet_quests PRIVATE ${NETHOST_PATH})

target_link_libraries(dotnet_quests ${PERL_LIBRARY} ${ZONE_LIBS} "${NETHOST_PATH}/${NETHOST_LIBRARY_NAME}")
target_link_libraries(questinterface dotnet_quests)

set_target_properties(dotnet_quests PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ${BUILD_DIR}
    ARCHIVE_OUTPUT_DIRECTORY ${BUILD_DIR} # For static libs or import libs on Windows
    RUNTIME_OUTPUT_DIRECTORY ${BUILD_DIR} # For Windows DLLs
)

set_target_properties(questinterface PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY ${BUILD_DIR}/dotnet
    ARCHIVE_OUTPUT_DIRECTORY ${BUILD_DIR}/dotnet # For static libs or import libs on Windows
    RUNTIME_OUTPUT_DIRECTORY ${BUILD_DIR}/dotnet # For Windows DLLs
)

ADD_EXECUTABLE(zone zone.cpp)
add_dependencies(zone dotnet_questinterface)
TARGET_LINK_LIBRARIES(zone dotnet_quests)


SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
